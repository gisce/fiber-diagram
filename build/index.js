"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("react");function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=t(e),r=function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function i(e,t,n){if(n||2===arguments.length)for(var r,i=0,a=t.length;i<a;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}var a=Math.PI/180;const o="undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{},s={_global:o,version:"8.3.1",isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/param/.test(function(e){}.toString()),dblClickWindow:400,getAngle:e=>s.angleDeg?e*a:e,enableTrace:!1,pointerEventsEnabled:!0,autoDrawEnabled:!0,hitOnDragEnabled:!1,capturePointerEventsEnabled:!1,_mouseListenClick:!1,_touchListenClick:!1,_pointerListenClick:!1,_mouseInDblClickWindow:!1,_touchInDblClickWindow:!1,_pointerInDblClickWindow:!1,_mouseDblClickPointerId:null,_touchDblClickPointerId:null,_pointerDblClickPointerId:null,pixelRatio:"undefined"!=typeof window&&window.devicePixelRatio||1,dragDistance:3,angleDeg:!0,showWarnings:!0,dragButtons:[0,1],isDragging:()=>s.DD.isDragging,isDragReady:()=>!!s.DD.node,document:o.document,_injectGlobal(e){o.Konva=e}},l=e=>{s[e.prototype.getClassName()]=e};s._injectGlobal(s);class u{constructor(e=[1,0,0,1,0,0]){this.dirty=!1,this.m=e&&e.slice()||[1,0,0,1,0,0]}reset(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=1,this.m[4]=0,this.m[5]=0}copy(){return new u(this.m)}copyInto(e){e.m[0]=this.m[0],e.m[1]=this.m[1],e.m[2]=this.m[2],e.m[3]=this.m[3],e.m[4]=this.m[4],e.m[5]=this.m[5]}point(e){var t=this.m;return{x:t[0]*e.x+t[2]*e.y+t[4],y:t[1]*e.x+t[3]*e.y+t[5]}}translate(e,t){return this.m[4]+=this.m[0]*e+this.m[2]*t,this.m[5]+=this.m[1]*e+this.m[3]*t,this}scale(e,t){return this.m[0]*=e,this.m[1]*=e,this.m[2]*=t,this.m[3]*=t,this}rotate(e){var t=Math.cos(e),n=Math.sin(e),r=this.m[0]*t+this.m[2]*n,i=this.m[1]*t+this.m[3]*n,a=this.m[0]*-n+this.m[2]*t,o=this.m[1]*-n+this.m[3]*t;return this.m[0]=r,this.m[1]=i,this.m[2]=a,this.m[3]=o,this}getTranslation(){return{x:this.m[4],y:this.m[5]}}skew(e,t){var n=this.m[0]+this.m[2]*t,r=this.m[1]+this.m[3]*t,i=this.m[2]+this.m[0]*e,a=this.m[3]+this.m[1]*e;return this.m[0]=n,this.m[1]=r,this.m[2]=i,this.m[3]=a,this}multiply(e){var t=this.m[0]*e.m[0]+this.m[2]*e.m[1],n=this.m[1]*e.m[0]+this.m[3]*e.m[1],r=this.m[0]*e.m[2]+this.m[2]*e.m[3],i=this.m[1]*e.m[2]+this.m[3]*e.m[3],a=this.m[0]*e.m[4]+this.m[2]*e.m[5]+this.m[4],o=this.m[1]*e.m[4]+this.m[3]*e.m[5]+this.m[5];return this.m[0]=t,this.m[1]=n,this.m[2]=r,this.m[3]=i,this.m[4]=a,this.m[5]=o,this}invert(){var e=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),t=this.m[3]*e,n=-this.m[1]*e,r=-this.m[2]*e,i=this.m[0]*e,a=e*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),o=e*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=t,this.m[1]=n,this.m[2]=r,this.m[3]=i,this.m[4]=a,this.m[5]=o,this}getMatrix(){return this.m}setAbsolutePosition(e,t){var n=this.m[0],r=this.m[1],i=this.m[2],a=this.m[3],o=this.m[4],s=(n*(t-this.m[5])-r*(e-o))/(n*a-r*i),l=(e-o-i*s)/n;return this.translate(l,s)}decompose(){var e=this.m[0],t=this.m[1],n=this.m[2],r=this.m[3],i=e*r-t*n;let a={x:this.m[4],y:this.m[5],rotation:0,scaleX:0,scaleY:0,skewX:0,skewY:0};if(0!=e||0!=t){var o=Math.sqrt(e*e+t*t);a.rotation=t>0?Math.acos(e/o):-Math.acos(e/o),a.scaleX=o,a.scaleY=i/o,a.skewX=(e*n+t*r)/i,a.skewY=0}else if(0!=n||0!=r){var s=Math.sqrt(n*n+r*r);a.rotation=Math.PI/2-(r>0?Math.acos(-n/s):-Math.acos(n/s)),a.scaleX=i/s,a.scaleY=s,a.skewX=0,a.skewY=(e*n+t*r)/i}return a.rotation=m._getRotation(a.rotation),a}}var c=Math.PI/180,d=180/Math.PI,h={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},f=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/,p=[];const g="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||function(e){setTimeout(e,60)},m={_isElement:e=>!(!e||1!=e.nodeType),_isFunction:e=>!!(e&&e.constructor&&e.call&&e.apply),_isPlainObject:e=>!!e&&e.constructor===Object,_isArray:e=>"[object Array]"===Object.prototype.toString.call(e),_isNumber:e=>"[object Number]"===Object.prototype.toString.call(e)&&!isNaN(e)&&isFinite(e),_isString:e=>"[object String]"===Object.prototype.toString.call(e),_isBoolean:e=>"[object Boolean]"===Object.prototype.toString.call(e),isObject:e=>e instanceof Object,isValidSelector(e){if("string"!=typeof e)return!1;var t=e[0];return"#"===t||"."===t||t===t.toUpperCase()},_sign:e=>0===e||e>0?1:-1,requestAnimFrame(e){p.push(e),1===p.length&&g((function(){const e=p;p=[],e.forEach((function(e){e()}))}))},createCanvasElement(){var e=document.createElement("canvas");try{e.style=e.style||{}}catch(e){}return e},createImageElement:()=>document.createElement("img"),_isInDocument(e){for(;e=e.parentNode;)if(e==document)return!0;return!1},_urlToImage(e,t){var n=m.createImageElement();n.onload=function(){t(n)},n.src=e},_rgbToHex:(e,t,n)=>((1<<24)+(e<<16)+(t<<8)+n).toString(16).slice(1),_hexToRgb(e){e=e.replace("#","");var t=parseInt(e,16);return{r:t>>16&255,g:t>>8&255,b:255&t}},getRandomColor(){for(var e=(16777215*Math.random()<<0).toString(16);e.length<6;)e="0"+e;return"#"+e},getRGB(e){var t;return e in h?{r:(t=h[e])[0],g:t[1],b:t[2]}:"#"===e[0]?this._hexToRgb(e.substring(1)):"rgb("===e.substr(0,4)?(t=f.exec(e.replace(/ /g,"")),{r:parseInt(t[1],10),g:parseInt(t[2],10),b:parseInt(t[3],10)}):{r:0,g:0,b:0}},colorToRGBA:e=>(e=e||"black",m._namedColorToRBA(e)||m._hex3ColorToRGBA(e)||m._hex6ColorToRGBA(e)||m._rgbColorToRGBA(e)||m._rgbaColorToRGBA(e)||m._hslColorToRGBA(e)),_namedColorToRBA(e){var t=h[e.toLowerCase()];return t?{r:t[0],g:t[1],b:t[2],a:1}:null},_rgbColorToRGBA(e){if(0===e.indexOf("rgb(")){var t=(e=e.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:1}}},_rgbaColorToRGBA(e){if(0===e.indexOf("rgba(")){var t=(e=e.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:t[0],g:t[1],b:t[2],a:t[3]}}},_hex6ColorToRGBA(e){if("#"===e[0]&&7===e.length)return{r:parseInt(e.slice(1,3),16),g:parseInt(e.slice(3,5),16),b:parseInt(e.slice(5,7),16),a:1}},_hex3ColorToRGBA(e){if("#"===e[0]&&4===e.length)return{r:parseInt(e[1]+e[1],16),g:parseInt(e[2]+e[2],16),b:parseInt(e[3]+e[3],16),a:1}},_hslColorToRGBA(e){if(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(e)){const[t,...n]=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e),r=Number(n[0])/360,i=Number(n[1])/100,a=Number(n[2])/100;let o,s,l;if(0===i)return l=255*a,{r:Math.round(l),g:Math.round(l),b:Math.round(l),a:1};o=a<.5?a*(1+i):a+i-a*i;const u=2*a-o,c=[0,0,0];for(let e=0;e<3;e++)s=r+1/3*-(e-1),s<0&&s++,s>1&&s--,l=6*s<1?u+6*(o-u)*s:2*s<1?o:3*s<2?u+(o-u)*(2/3-s)*6:u,c[e]=255*l;return{r:Math.round(c[0]),g:Math.round(c[1]),b:Math.round(c[2]),a:1}}},haveIntersection:(e,t)=>!(t.x>e.x+e.width||t.x+t.width<e.x||t.y>e.y+e.height||t.y+t.height<e.y),cloneObject(e){var t={};for(var n in e)this._isPlainObject(e[n])?t[n]=this.cloneObject(e[n]):this._isArray(e[n])?t[n]=this.cloneArray(e[n]):t[n]=e[n];return t},cloneArray:e=>e.slice(0),degToRad:e=>e*c,radToDeg:e=>e*d,_degToRad:e=>(m.warn("Util._degToRad is removed. Please use public Util.degToRad instead."),m.degToRad(e)),_radToDeg:e=>(m.warn("Util._radToDeg is removed. Please use public Util.radToDeg instead."),m.radToDeg(e)),_getRotation:e=>s.angleDeg?m.radToDeg(e):e,_capitalize:e=>e.charAt(0).toUpperCase()+e.slice(1),throw(e){throw new Error("Konva error: "+e)},error(e){console.error("Konva error: "+e)},warn(e){s.showWarnings&&console.warn("Konva warning: "+e)},each(e,t){for(var n in e)t(n,e[n])},_inRange:(e,t,n)=>t<=e&&e<n,_getProjectionToSegment(e,t,n,r,i,a){var o,s,l,u=(e-n)*(e-n)+(t-r)*(t-r);if(0==u)o=e,s=t,l=(i-n)*(i-n)+(a-r)*(a-r);else{var c=((i-e)*(n-e)+(a-t)*(r-t))/u;c<0?(o=e,s=t,l=(e-i)*(e-i)+(t-a)*(t-a)):c>1?(o=n,s=r,l=(n-i)*(n-i)+(r-a)*(r-a)):l=((o=e+c*(n-e))-i)*(o-i)+((s=t+c*(r-t))-a)*(s-a)}return[o,s,l]},_getProjectionToLine(e,t,n){var r=m.cloneObject(e),i=Number.MAX_VALUE;return t.forEach((function(a,o){if(n||o!==t.length-1){var s=t[(o+1)%t.length],l=m._getProjectionToSegment(a.x,a.y,s.x,s.y,e.x,e.y),u=l[0],c=l[1],d=l[2];d<i&&(r.x=u,r.y=c,i=d)}})),r},_prepareArrayForTween(e,t,n){var r,i=[],a=[];if(e.length>t.length){var o=t;t=e,e=o}for(r=0;r<e.length;r+=2)i.push({x:e[r],y:e[r+1]});for(r=0;r<t.length;r+=2)a.push({x:t[r],y:t[r+1]});var s=[];return a.forEach((function(e){var t=m._getProjectionToLine(e,i,n);s.push(t.x),s.push(t.y)})),s},_prepareToStringify(e){var t;for(var n in e.visitedByCircularReferenceRemoval=!0,e)if(e.hasOwnProperty(n)&&e[n]&&"object"==typeof e[n])if(t=Object.getOwnPropertyDescriptor(e,n),e[n].visitedByCircularReferenceRemoval||m._isElement(e[n])){if(!t.configurable)return null;delete e[n]}else if(null===m._prepareToStringify(e[n])){if(!t.configurable)return null;delete e[n]}return delete e.visitedByCircularReferenceRemoval,e},_assign(e,t){for(var n in t)e[n]=t[n];return e},_getFirstPointerId:e=>e.touches?e.changedTouches[0].identifier:e.pointerId||999};function v(e){return m._isString(e)?'"'+e+'"':"[object Number]"===Object.prototype.toString.call(e)||m._isBoolean(e)?e:Object.prototype.toString.call(e)}function y(e){return e>255?255:e<0?0:Math.round(e)}function b(){if(s.isUnminified)return function(e,t){return m._isNumber(e)||m.warn(v(e)+' is a not valid value for "'+t+'" attribute. The value should be a number.'),e}}function w(e){if(s.isUnminified)return function(t,n){let r=m._isNumber(t),i=m._isArray(t)&&t.length==e;return r||i||m.warn(v(t)+' is a not valid value for "'+n+'" attribute. The value should be a number or Array<number>('+e+")"),t}}function x(){if(s.isUnminified)return function(e,t){return m._isNumber(e)||"auto"===e||m.warn(v(e)+' is a not valid value for "'+t+'" attribute. The value should be a number or "auto".'),e}}function _(){if(s.isUnminified)return function(e,t){return m._isString(e)||m.warn(v(e)+' is a not valid value for "'+t+'" attribute. The value should be a string.'),e}}function S(){if(s.isUnminified)return function(e,t){const n=m._isString(e),r="[object CanvasGradient]"===Object.prototype.toString.call(e)||e&&e.addColorStop;return n||r||m.warn(v(e)+' is a not valid value for "'+t+'" attribute. The value should be a string or a native gradient.'),e}}function C(){if(s.isUnminified)return function(e,t){return!0===e||!1===e||m.warn(v(e)+' is a not valid value for "'+t+'" attribute. The value should be a boolean.'),e}}const k={addGetterSetter(e,t,n,r,i){k.addGetter(e,t,n),k.addSetter(e,t,r,i),k.addOverloadedGetterSetter(e,t)},addGetter(e,t,n){var r="get"+m._capitalize(t);e.prototype[r]=e.prototype[r]||function(){var e=this.attrs[t];return void 0===e?n:e}},addSetter(e,t,n,r){var i="set"+m._capitalize(t);e.prototype[i]||k.overWriteSetter(e,t,n,r)},overWriteSetter(e,t,n,r){var i="set"+m._capitalize(t);e.prototype[i]=function(e){return n&&null!=e&&(e=n.call(this,e,t)),this._setAttr(t,e),r&&r.call(this),this}},addComponentsGetterSetter(e,t,n,r,i){var a,o,l=n.length,u=m._capitalize,c="get"+u(t),d="set"+u(t);e.prototype[c]=function(){var e={};for(a=0;a<l;a++)e[o=n[a]]=this.getAttr(t+u(o));return e};var h=function(e){if(s.isUnminified)return function(t,n){return m.isObject(t)||m.warn(v(t)+' is a not valid value for "'+n+'" attribute. The value should be an object with properties '+e),t}}(n);e.prototype[d]=function(e){var n,a=this.attrs[t];for(n in r&&(e=r.call(this,e)),h&&h.call(this,e,t),e)e.hasOwnProperty(n)&&this._setAttr(t+u(n),e[n]);return this._fireChangeEvent(t,a,e),i&&i.call(this),this},k.addOverloadedGetterSetter(e,t)},addOverloadedGetterSetter(e,t){var n=m._capitalize(t),r="set"+n,i="get"+n;e.prototype[t]=function(){return arguments.length?(this[r](arguments[0]),this):this[i]()}},addDeprecatedGetterSetter(e,t,n,r){m.error("Adding deprecated "+t);var i="get"+m._capitalize(t),a=t+" property is deprecated and will be removed soon. Look at Konva change log for more information.";e.prototype[i]=function(){m.error(a);var e=this.attrs[t];return void 0===e?n:e},k.addSetter(e,t,r,(function(){m.error(a)})),k.addOverloadedGetterSetter(e,t)},backCompat(e,t){m.each(t,(function(t,n){var r=e.prototype[n],i="get"+m._capitalize(t),a="set"+m._capitalize(t);function o(){r.apply(this,arguments),m.error('"'+t+'" method is deprecated and will be removed soon. Use ""'+n+'" instead.')}e.prototype[t]=o,e.prototype[i]=o,e.prototype[a]=o}))},afterSetFilter(){this._filterUpToDate=!1}};function P(e){var t,n,r=[],i=e.length,a=m;for(t=0;t<i;t++)n=e[t],a._isNumber(n)?n=Math.round(1e3*n)/1e3:a._isString(n)||(n+=""),r.push(n);return r}var E=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","ellipse","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"];class T{constructor(e){this.canvas=e,this._context=e._canvas.getContext("2d"),s.enableTrace&&(this.traceArr=[],this._enableTrace())}fillShape(e){e.fillEnabled()&&this._fill(e)}_fill(e){}strokeShape(e){e.hasStroke()&&this._stroke(e)}_stroke(e){}fillStrokeShape(e){e.attrs.fillAfterStrokeEnabled?(this.strokeShape(e),this.fillShape(e)):(this.fillShape(e),this.strokeShape(e))}getTrace(e,t){var n,r,i,a,o=this.traceArr,s=o.length,l="";for(n=0;n<s;n++)(i=(r=o[n]).method)?(a=r.args,l+=i,e?l+="()":m._isArray(a[0])?l+="(["+a.join(",")+"])":(t&&(a=a.map((e=>"number"==typeof e?Math.floor(e):e))),l+="("+a.join(",")+")")):(l+=r.property,e||(l+="="+r.val)),l+=";";return l}clearTrace(){this.traceArr=[]}_trace(e){var t=this.traceArr;t.push(e),t.length>=100&&t.shift()}reset(){var e=this.getCanvas().getPixelRatio();this.setTransform(1*e,0,0,1*e,0,0)}getCanvas(){return this.canvas}clear(e){var t=this.getCanvas();e?this.clearRect(e.x||0,e.y||0,e.width||0,e.height||0):this.clearRect(0,0,t.getWidth()/t.pixelRatio,t.getHeight()/t.pixelRatio)}_applyLineCap(e){var t=e.getLineCap();t&&this.setAttr("lineCap",t)}_applyOpacity(e){var t=e.getAbsoluteOpacity();1!==t&&this.setAttr("globalAlpha",t)}_applyLineJoin(e){var t=e.attrs.lineJoin;t&&this.setAttr("lineJoin",t)}setAttr(e,t){this._context[e]=t}arc(e,t,n,r,i,a){this._context.arc(e,t,n,r,i,a)}arcTo(e,t,n,r,i){this._context.arcTo(e,t,n,r,i)}beginPath(){this._context.beginPath()}bezierCurveTo(e,t,n,r,i,a){this._context.bezierCurveTo(e,t,n,r,i,a)}clearRect(e,t,n,r){this._context.clearRect(e,t,n,r)}clip(){this._context.clip()}closePath(){this._context.closePath()}createImageData(e,t){var n=arguments;return 2===n.length?this._context.createImageData(e,t):1===n.length?this._context.createImageData(e):void 0}createLinearGradient(e,t,n,r){return this._context.createLinearGradient(e,t,n,r)}createPattern(e,t){return this._context.createPattern(e,t)}createRadialGradient(e,t,n,r,i,a){return this._context.createRadialGradient(e,t,n,r,i,a)}drawImage(e,t,n,r,i,a,o,s,l){var u=arguments,c=this._context;3===u.length?c.drawImage(e,t,n):5===u.length?c.drawImage(e,t,n,r,i):9===u.length&&c.drawImage(e,t,n,r,i,a,o,s,l)}ellipse(e,t,n,r,i,a,o,s){this._context.ellipse(e,t,n,r,i,a,o,s)}isPointInPath(e,t){return this._context.isPointInPath(e,t)}fill(e){e?this._context.fill(e):this._context.fill()}fillRect(e,t,n,r){this._context.fillRect(e,t,n,r)}strokeRect(e,t,n,r){this._context.strokeRect(e,t,n,r)}fillText(e,t,n,r){r?this._context.fillText(e,t,n,r):this._context.fillText(e,t,n)}measureText(e){return this._context.measureText(e)}getImageData(e,t,n,r){return this._context.getImageData(e,t,n,r)}lineTo(e,t){this._context.lineTo(e,t)}moveTo(e,t){this._context.moveTo(e,t)}rect(e,t,n,r){this._context.rect(e,t,n,r)}putImageData(e,t,n){this._context.putImageData(e,t,n)}quadraticCurveTo(e,t,n,r){this._context.quadraticCurveTo(e,t,n,r)}restore(){this._context.restore()}rotate(e){this._context.rotate(e)}save(){this._context.save()}scale(e,t){this._context.scale(e,t)}setLineDash(e){this._context.setLineDash?this._context.setLineDash(e):"mozDash"in this._context?this._context.mozDash=e:"webkitLineDash"in this._context&&(this._context.webkitLineDash=e)}getLineDash(){return this._context.getLineDash()}setTransform(e,t,n,r,i,a){this._context.setTransform(e,t,n,r,i,a)}stroke(e){e?this._context.stroke(e):this._context.stroke()}strokeText(e,t,n,r){this._context.strokeText(e,t,n,r)}transform(e,t,n,r,i,a){this._context.transform(e,t,n,r,i,a)}translate(e,t){this._context.translate(e,t)}_enableTrace(){var e,t,n=this,r=E.length,i=this.setAttr,a=function(e){var r,i=n[e];n[e]=function(){return t=P(Array.prototype.slice.call(arguments,0)),r=i.apply(n,arguments),n._trace({method:e,args:t}),r}};for(e=0;e<r;e++)a(E[e]);n.setAttr=function(){i.apply(n,arguments);var e=arguments[0],t=arguments[1];"shadowOffsetX"!==e&&"shadowOffsetY"!==e&&"shadowBlur"!==e||(t/=this.canvas.getPixelRatio()),n._trace({property:e,val:t})}}_applyGlobalCompositeOperation(e){const t=e.attrs.globalCompositeOperation;!t||"source-over"===t||this.setAttr("globalCompositeOperation",t)}}["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation","imageSmoothingEnabled"].forEach((function(e){Object.defineProperty(T.prototype,e,{get(){return this._context[e]},set(t){this._context[e]=t}})}));class R extends T{_fillColor(e){var t=e.fill();this.setAttr("fillStyle",t),e._fillFunc(this)}_fillPattern(e){this.setAttr("fillStyle",e._getFillPattern()),e._fillFunc(this)}_fillLinearGradient(e){var t=e._getLinearGradient();t&&(this.setAttr("fillStyle",t),e._fillFunc(this))}_fillRadialGradient(e){var t=e._getRadialGradient();t&&(this.setAttr("fillStyle",t),e._fillFunc(this))}_fill(e){var t=e.fill(),n=e.getFillPriority();if(t&&"color"===n)this._fillColor(e);else{var r=e.getFillPatternImage();if(r&&"pattern"===n)this._fillPattern(e);else{var i=e.getFillLinearGradientColorStops();if(i&&"linear-gradient"===n)this._fillLinearGradient(e);else{var a=e.getFillRadialGradientColorStops();a&&"radial-gradient"===n?this._fillRadialGradient(e):t?this._fillColor(e):r?this._fillPattern(e):i?this._fillLinearGradient(e):a&&this._fillRadialGradient(e)}}}}_strokeLinearGradient(e){var t=e.getStrokeLinearGradientStartPoint(),n=e.getStrokeLinearGradientEndPoint(),r=e.getStrokeLinearGradientColorStops(),i=this.createLinearGradient(t.x,t.y,n.x,n.y);if(r){for(var a=0;a<r.length;a+=2)i.addColorStop(r[a],r[a+1]);this.setAttr("strokeStyle",i)}}_stroke(e){var t=e.dash(),n=e.getStrokeScaleEnabled();if(e.hasStroke()){if(!n){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(e),t&&e.dashEnabled()&&(this.setLineDash(t),this.setAttr("lineDashOffset",e.dashOffset())),this.setAttr("lineWidth",e.strokeWidth()),e.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),e.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(e):this.setAttr("strokeStyle",e.stroke()),e._strokeFunc(this),n||this.restore()}}_applyShadow(e){var t,n,r,i=null!==(t=e.getShadowRGBA())&&void 0!==t?t:"black",a=null!==(n=e.getShadowBlur())&&void 0!==n?n:5,o=null!==(r=e.getShadowOffset())&&void 0!==r?r:{x:0,y:0},s=e.getAbsoluteScale(),l=this.canvas.getPixelRatio(),u=s.x*l,c=s.y*l;this.setAttr("shadowColor",i),this.setAttr("shadowBlur",a*Math.min(Math.abs(u),Math.abs(c))),this.setAttr("shadowOffsetX",o.x*u),this.setAttr("shadowOffsetY",o.y*c)}}class I extends T{_fill(e){this.save(),this.setAttr("fillStyle",e.colorKey),e._fillFuncHit(this),this.restore()}strokeShape(e){e.hasHitStroke()&&this._stroke(e)}_stroke(e){if(e.hasHitStroke()){var t=e.getStrokeScaleEnabled();if(!t){this.save();var n=this.getCanvas().getPixelRatio();this.setTransform(n,0,0,n,0,0)}this._applyLineCap(e);var r=e.hitStrokeWidth(),i="auto"===r?e.strokeWidth():r;this.setAttr("lineWidth",i),this.setAttr("strokeStyle",e.colorKey),e._strokeFuncHit(this),t||this.restore()}}}var z;class A{constructor(e){this.pixelRatio=1,this.width=0,this.height=0,this.isCache=!1;var t=(e||{}).pixelRatio||s.pixelRatio||function(){if(z)return z;var e=m.createCanvasElement().getContext("2d");return z=(s._global.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)}();this.pixelRatio=t,this._canvas=m.createCanvasElement(),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.border="0",this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0"}getContext(){return this.context}getPixelRatio(){return this.pixelRatio}setPixelRatio(e){var t=this.pixelRatio;this.pixelRatio=e,this.setSize(this.getWidth()/t,this.getHeight()/t)}setWidth(e){this.width=this._canvas.width=e*this.pixelRatio,this._canvas.style.width=e+"px";var t=this.pixelRatio;this.getContext()._context.scale(t,t)}setHeight(e){this.height=this._canvas.height=e*this.pixelRatio,this._canvas.style.height=e+"px";var t=this.pixelRatio;this.getContext()._context.scale(t,t)}getWidth(){return this.width}getHeight(){return this.height}setSize(e,t){this.setWidth(e||0),this.setHeight(t||0)}toDataURL(e,t){try{return this._canvas.toDataURL(e,t)}catch(e){try{return this._canvas.toDataURL()}catch(e){return m.error("Unable to get data URL. "+e.message+" For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."),""}}}}k.addGetterSetter(A,"pixelRatio",void 0,b());class L extends A{constructor(e={width:0,height:0}){super(e),this.context=new R(this),this.setSize(e.width,e.height)}}class M extends A{constructor(e={width:0,height:0}){super(e),this.hitCanvas=!0,this.context=new I(this),this.setSize(e.width,e.height)}}const D={get isDragging(){var e=!1;return D._dragElements.forEach((t=>{"dragging"===t.dragStatus&&(e=!0)})),e},justDragged:!1,get node(){var e;return D._dragElements.forEach((t=>{e=t.node})),e},_dragElements:new Map,_drag(e){const t=[];D._dragElements.forEach(((n,r)=>{const{node:i}=n,a=i.getStage();a.setPointersPositions(e),void 0===n.pointerId&&(n.pointerId=m._getFirstPointerId(e));const o=a._changedPointerPositions.find((e=>e.id===n.pointerId));if(o){if("dragging"!==n.dragStatus){var s=i.dragDistance();if(Math.max(Math.abs(o.x-n.startPointerPos.x),Math.abs(o.y-n.startPointerPos.y))<s)return;if(i.startDrag({evt:e}),!i.isDragging())return}i._setDragPosition(e,n),t.push(i)}})),t.forEach((t=>{t.fire("dragmove",{type:"dragmove",target:t,evt:e},!0)}))},_endDragBefore(e){D._dragElements.forEach((t=>{const{node:n}=t,r=n.getStage();e&&r.setPointersPositions(e);if(!r._changedPointerPositions.find((e=>e.id===t.pointerId)))return;"dragging"!==t.dragStatus&&"stopped"!==t.dragStatus||(D.justDragged=!0,s._mouseListenClick=!1,s._touchListenClick=!1,s._pointerListenClick=!1,t.dragStatus="stopped");const i=t.node.getLayer()||t.node instanceof s.Stage&&t.node;i&&i.batchDraw()}))},_endDragAfter(e){D._dragElements.forEach(((t,n)=>{"stopped"===t.dragStatus&&t.node.fire("dragend",{type:"dragend",target:t.node,evt:e},!0),"dragging"!==t.dragStatus&&D._dragElements.delete(n)}))}};s.isBrowser&&(window.addEventListener("mouseup",D._endDragBefore,!0),window.addEventListener("touchend",D._endDragBefore,!0),window.addEventListener("mousemove",D._drag),window.addEventListener("touchmove",D._drag),window.addEventListener("mouseup",D._endDragAfter,!1),window.addEventListener("touchend",D._endDragAfter,!1));var N=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(" ");let F=1;class U{constructor(e){this._id=F++,this.eventListeners={},this.attrs={},this.index=0,this._allEventListeners=null,this.parent=null,this._cache=new Map,this._attachedDepsListeners=new Map,this._lastPos=null,this._batchingTransformChange=!1,this._needClearTransformCache=!1,this._filterUpToDate=!1,this._isUnderCache=!1,this._dragEventId=null,this._shouldFireChangeEvents=!1,this.setAttrs(e),this._shouldFireChangeEvents=!0}hasChildren(){return!1}_clearCache(e){"transform"!==e&&"absoluteTransform"!==e||!this._cache.get(e)?e?this._cache.delete(e):this._cache.clear():this._cache.get(e).dirty=!0}_getCache(e,t){var n=this._cache.get(e);return(void 0===n||("transform"===e||"absoluteTransform"===e)&&!0===n.dirty)&&(n=t.call(this),this._cache.set(e,n)),n}_calculate(e,t,n){if(!this._attachedDepsListeners.get(e)){const n=t.map((e=>e+"Change.konva")).join(" ");this.on(n,(()=>{this._clearCache(e)})),this._attachedDepsListeners.set(e,!0)}return this._getCache(e,n)}_getCanvasCache(){return this._cache.get("canvas")}_clearSelfAndDescendantCache(e){this._clearCache(e),"absoluteTransform"===e&&this.fire("absoluteTransformChange")}clearCache(){return this._cache.delete("canvas"),this._clearSelfAndDescendantCache(),this._requestDraw(),this}cache(e){var t=e||{},n={};void 0!==t.x&&void 0!==t.y&&void 0!==t.width&&void 0!==t.height||(n=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var r=Math.ceil(t.width||n.width),i=Math.ceil(t.height||n.height),a=t.pixelRatio,o=void 0===t.x?n.x:t.x,s=void 0===t.y?n.y:t.y,l=t.offset||0,u=t.drawBorder||!1,c=t.hitCanvasPixelRatio||1;if(r&&i){o-=l,s-=l;var d=new L({pixelRatio:a,width:r+=2*l,height:i+=2*l}),h=new L({pixelRatio:a,width:0,height:0}),f=new M({pixelRatio:c,width:r,height:i}),p=d.getContext(),g=f.getContext();return f.isCache=!0,d.isCache=!0,this._cache.delete("canvas"),this._filterUpToDate=!1,!1===t.imageSmoothingEnabled&&(d.getContext()._context.imageSmoothingEnabled=!1,h.getContext()._context.imageSmoothingEnabled=!1),p.save(),g.save(),p.translate(-o,-s),g.translate(-o,-s),this._isUnderCache=!0,this._clearSelfAndDescendantCache("absoluteOpacity"),this._clearSelfAndDescendantCache("absoluteScale"),this.drawScene(d,this),this.drawHit(f,this),this._isUnderCache=!1,p.restore(),g.restore(),u&&(p.save(),p.beginPath(),p.rect(0,0,r,i),p.closePath(),p.setAttr("strokeStyle","red"),p.setAttr("lineWidth",5),p.stroke(),p.restore()),this._cache.set("canvas",{scene:d,filter:h,hit:f,x:o,y:s}),this._requestDraw(),this}m.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")}isCached(){return this._cache.has("canvas")}getClientRect(e){throw new Error('abstract "getClientRect" method call')}_transformedRect(e,t){var n,r,i,a,o=[{x:e.x,y:e.y},{x:e.x+e.width,y:e.y},{x:e.x+e.width,y:e.y+e.height},{x:e.x,y:e.y+e.height}],s=this.getAbsoluteTransform(t);return o.forEach((function(e){var t=s.point(e);void 0===n&&(n=i=t.x,r=a=t.y),n=Math.min(n,t.x),r=Math.min(r,t.y),i=Math.max(i,t.x),a=Math.max(a,t.y)})),{x:n,y:r,width:i-n,height:a-r}}_drawCachedSceneCanvas(e){e.save(),e._applyOpacity(this),e._applyGlobalCompositeOperation(this);const t=this._getCanvasCache();e.translate(t.x,t.y);var n=this._getCachedSceneCanvas(),r=n.pixelRatio;e.drawImage(n._canvas,0,0,n.width/r,n.height/r),e.restore()}_drawCachedHitCanvas(e){var t=this._getCanvasCache(),n=t.hit;e.save(),e.translate(t.x,t.y),e.drawImage(n._canvas,0,0,n.width/n.pixelRatio,n.height/n.pixelRatio),e.restore()}_getCachedSceneCanvas(){var e,t,n,r,i=this.filters(),a=this._getCanvasCache(),o=a.scene,s=a.filter,l=s.getContext();if(i){if(!this._filterUpToDate){var u=o.pixelRatio;s.setSize(o.width/o.pixelRatio,o.height/o.pixelRatio);try{for(e=i.length,l.clear(),l.drawImage(o._canvas,0,0,o.getWidth()/u,o.getHeight()/u),t=l.getImageData(0,0,s.getWidth(),s.getHeight()),n=0;n<e;n++)"function"==typeof(r=i[n])?(r.call(this,t),l.putImageData(t,0,0)):m.error("Filter should be type of function, but got "+typeof r+" instead. Please check correct filters")}catch(e){m.error("Unable to apply filter. "+e.message+" This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.")}this._filterUpToDate=!0}return s}return o}on(e,t){if(this._cache&&this._cache.delete("allEventListeners"),3===arguments.length)return this._delegate.apply(this,arguments);var n,r,i,a,o=e.split(" "),s=o.length;for(n=0;n<s;n++)i=(r=o[n].split("."))[0],a=r[1]||"",this.eventListeners[i]||(this.eventListeners[i]=[]),this.eventListeners[i].push({name:a,handler:t});return this}off(e,t){var n,r,i,a,o,s=(e||"").split(" "),l=s.length;if(this._cache&&this._cache.delete("allEventListeners"),!e)for(r in this.eventListeners)this._off(r);for(n=0;n<l;n++)if(a=(i=s[n].split("."))[0],o=i[1],a)this.eventListeners[a]&&this._off(a,o,t);else for(r in this.eventListeners)this._off(r,o,t);return this}dispatchEvent(e){var t={target:this,type:e.type,evt:e};return this.fire(e.type,t),this}addEventListener(e,t){return this.on(e,(function(e){t.call(this,e.evt)})),this}removeEventListener(e){return this.off(e),this}_delegate(e,t,n){var r=this;this.on(e,(function(e){for(var i=e.target.findAncestors(t,!0,r),a=0;a<i.length;a++)(e=m.cloneObject(e)).currentTarget=i[a],n.call(i[a],e)}))}remove(){return this.isDragging()&&this.stopDrag(),D._dragElements.delete(this._id),this._remove(),this}_clearCaches(){this._clearSelfAndDescendantCache("absoluteTransform"),this._clearSelfAndDescendantCache("absoluteOpacity"),this._clearSelfAndDescendantCache("absoluteScale"),this._clearSelfAndDescendantCache("stage"),this._clearSelfAndDescendantCache("visible"),this._clearSelfAndDescendantCache("listening")}_remove(){this._clearCaches();var e=this.getParent();e&&e.children&&(e.children.splice(this.index,1),e._setChildrenIndices(),this.parent=null)}destroy(){return this.remove(),this}getAttr(e){var t="get"+m._capitalize(e);return m._isFunction(this[t])?this[t]():this.attrs[e]}getAncestors(){for(var e=this.getParent(),t=[];e;)t.push(e),e=e.getParent();return t}getAttrs(){return this.attrs||{}}setAttrs(e){return this._batchTransformChanges((()=>{var t,n;if(!e)return this;for(t in e)"children"!==t&&(n="set"+m._capitalize(t),m._isFunction(this[n])?this[n](e[t]):this._setAttr(t,e[t]))})),this}isListening(){return this._getCache("listening",this._isListening)}_isListening(e){if(!this.listening())return!1;const t=this.getParent();return!t||t===e||this===e||t._isListening(e)}isVisible(){return this._getCache("visible",this._isVisible)}_isVisible(e){if(!this.visible())return!1;const t=this.getParent();return!t||t===e||this===e||t._isVisible(e)}shouldDrawHit(e,t=!1){if(e)return this._isVisible(e)&&this._isListening(e);var n=this.getLayer(),r=!1;D._dragElements.forEach((e=>{"dragging"===e.dragStatus&&("Stage"===e.node.nodeType||e.node.getLayer()===n)&&(r=!0)}));var i=!t&&!s.hitOnDragEnabled&&r;return this.isListening()&&this.isVisible()&&!i}show(){return this.visible(!0),this}hide(){return this.visible(!1),this}getZIndex(){return this.index||0}getAbsoluteZIndex(){var e,t,n,r,i=this.getDepth(),a=this,o=0;return"Stage"!==a.nodeType&&function s(l){for(e=[],t=l.length,n=0;n<t;n++)r=l[n],o++,"Shape"!==r.nodeType&&(e=e.concat(r.getChildren().slice())),r._id===a._id&&(n=t);e.length>0&&e[0].getDepth()<=i&&s(e)}(a.getStage().getChildren()),o}getDepth(){for(var e=0,t=this.parent;t;)e++,t=t.parent;return e}_batchTransformChanges(e){this._batchingTransformChange=!0,e(),this._batchingTransformChange=!1,this._needClearTransformCache&&(this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")),this._needClearTransformCache=!1}setPosition(e){return this._batchTransformChanges((()=>{this.x(e.x),this.y(e.y)})),this}getPosition(){return{x:this.x(),y:this.y()}}getRelativePointerPosition(){if(!this.getStage())return null;var e=this.getStage().getPointerPosition();if(!e)return null;var t=this.getAbsoluteTransform().copy();return t.invert(),t.point(e)}getAbsolutePosition(e){let t=!1,n=this.parent;for(;n;){if(n.isCached()){t=!0;break}n=n.parent}t&&!e&&(e=!0);var r=this.getAbsoluteTransform(e).getMatrix(),i=new u,a=this.offset();return i.m=r.slice(),i.translate(a.x,a.y),i.getTranslation()}setAbsolutePosition(e){var t=this._clearTransform();this.attrs.x=t.x,this.attrs.y=t.y,delete t.x,delete t.y,this._clearCache("transform");var n=this._getAbsoluteTransform().copy();return n.invert(),n.translate(e.x,e.y),e={x:this.attrs.x+n.getTranslation().x,y:this.attrs.y+n.getTranslation().y},this._setTransform(t),this.setPosition({x:e.x,y:e.y}),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform"),this}_setTransform(e){var t;for(t in e)this.attrs[t]=e[t]}_clearTransform(){var e={x:this.x(),y:this.y(),rotation:this.rotation(),scaleX:this.scaleX(),scaleY:this.scaleY(),offsetX:this.offsetX(),offsetY:this.offsetY(),skewX:this.skewX(),skewY:this.skewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,e}move(e){var t=e.x,n=e.y,r=this.x(),i=this.y();return void 0!==t&&(r+=t),void 0!==n&&(i+=n),this.setPosition({x:r,y:i}),this}_eachAncestorReverse(e,t){var n,r,i=[],a=this.getParent();if(!t||t._id!==this._id){for(i.unshift(this);a&&(!t||a._id!==t._id);)i.unshift(a),a=a.parent;for(n=i.length,r=0;r<n;r++)e(i[r])}}rotate(e){return this.rotation(this.rotation()+e),this}moveToTop(){if(!this.parent)return m.warn("Node has no parent. moveToTop function is ignored."),!1;var e=this.index;return e<this.parent.getChildren().length-1&&(this.parent.children.splice(e,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0)}moveUp(){if(!this.parent)return m.warn("Node has no parent. moveUp function is ignored."),!1;var e=this.index;return e<this.parent.getChildren().length-1&&(this.parent.children.splice(e,1),this.parent.children.splice(e+1,0,this),this.parent._setChildrenIndices(),!0)}moveDown(){if(!this.parent)return m.warn("Node has no parent. moveDown function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.splice(e-1,0,this),this.parent._setChildrenIndices(),!0)}moveToBottom(){if(!this.parent)return m.warn("Node has no parent. moveToBottom function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)}setZIndex(e){if(!this.parent)return m.warn("Node has no parent. zIndex parameter is ignored."),this;(e<0||e>=this.parent.children.length)&&m.warn("Unexpected value "+e+" for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to "+(this.parent.children.length-1)+".");var t=this.index;return this.parent.children.splice(t,1),this.parent.children.splice(e,0,this),this.parent._setChildrenIndices(),this}getAbsoluteOpacity(){return this._getCache("absoluteOpacity",this._getAbsoluteOpacity)}_getAbsoluteOpacity(){var e=this.opacity(),t=this.getParent();return t&&!t._isUnderCache&&(e*=t.getAbsoluteOpacity()),e}moveTo(e){return this.getParent()!==e&&(this._remove(),e.add(this)),this}toObject(){var e,t,n,r,i={},a=this.getAttrs();for(e in i.attrs={},a)t=a[e],m.isObject(t)&&!m._isPlainObject(t)&&!m._isArray(t)||(n="function"==typeof this[e]&&this[e],delete a[e],r=n?n.call(this):null,a[e]=t,r!==t&&(i.attrs[e]=t));return i.className=this.getClassName(),m._prepareToStringify(i)}toJSON(){return JSON.stringify(this.toObject())}getParent(){return this.parent}findAncestors(e,t,n){var r=[];t&&this._isMatch(e)&&r.push(this);for(var i=this.parent;i;){if(i===n)return r;i._isMatch(e)&&r.push(i),i=i.parent}return r}isAncestorOf(e){return!1}findAncestor(e,t,n){return this.findAncestors(e,t,n)[0]}_isMatch(e){if(!e)return!1;if("function"==typeof e)return e(this);var t,n,r=e.replace(/ /g,"").split(","),i=r.length;for(t=0;t<i;t++)if(n=r[t],m.isValidSelector(n)||(m.warn('Selector "'+n+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),m.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),m.warn("Konva is awesome, right?")),"#"===n.charAt(0)){if(this.id()===n.slice(1))return!0}else if("."===n.charAt(0)){if(this.hasName(n.slice(1)))return!0}else if(this.className===n||this.nodeType===n)return!0;return!1}getLayer(){var e=this.getParent();return e?e.getLayer():null}getStage(){return this._getCache("stage",this._getStage)}_getStage(){var e=this.getParent();return e?e.getStage():void 0}fire(e,t={},n){return t.target=t.target||this,n?this._fireAndBubble(e,t):this._fire(e,t),this}getAbsoluteTransform(e){return e?this._getAbsoluteTransform(e):this._getCache("absoluteTransform",this._getAbsoluteTransform)}_getAbsoluteTransform(e){var t;if(e)return t=new u,this._eachAncestorReverse((function(e){var n=e.transformsEnabled();"all"===n?t.multiply(e.getTransform()):"position"===n&&t.translate(e.x()-e.offsetX(),e.y()-e.offsetY())}),e),t;t=this._cache.get("absoluteTransform")||new u,this.parent?this.parent.getAbsoluteTransform().copyInto(t):t.reset();var n=this.transformsEnabled();if("all"===n)t.multiply(this.getTransform());else if("position"===n){const e=this.attrs.x||0,n=this.attrs.y||0,r=this.attrs.offsetX||0,i=this.attrs.offsetY||0;t.translate(e-r,n-i)}return t.dirty=!1,t}getAbsoluteScale(e){for(var t=this;t;)t._isUnderCache&&(e=t),t=t.getParent();const n=this.getAbsoluteTransform(e).decompose();return{x:n.scaleX,y:n.scaleY}}getAbsoluteRotation(){return this.getAbsoluteTransform().decompose().rotation}getTransform(){return this._getCache("transform",this._getTransform)}_getTransform(){var e,t,n=this._cache.get("transform")||new u;n.reset();var r=this.x(),i=this.y(),a=s.getAngle(this.rotation()),o=null!==(e=this.attrs.scaleX)&&void 0!==e?e:1,l=null!==(t=this.attrs.scaleY)&&void 0!==t?t:1,c=this.attrs.skewX||0,d=this.attrs.skewY||0,h=this.attrs.offsetX||0,f=this.attrs.offsetY||0;return 0===r&&0===i||n.translate(r,i),0!==a&&n.rotate(a),0===c&&0===d||n.skew(c,d),1===o&&1===l||n.scale(o,l),0===h&&0===f||n.translate(-1*h,-1*f),n.dirty=!1,n}clone(e){var t,n,r,i,a,o=m.cloneObject(this.attrs);for(t in e)o[t]=e[t];var s=new this.constructor(o);for(t in this.eventListeners)for(r=(n=this.eventListeners[t]).length,i=0;i<r;i++)(a=n[i]).name.indexOf("konva")<0&&(s.eventListeners[t]||(s.eventListeners[t]=[]),s.eventListeners[t].push(a));return s}_toKonvaCanvas(e){e=e||{};var t=this.getClientRect(),n=this.getStage(),r=void 0!==e.x?e.x:t.x,i=void 0!==e.y?e.y:t.y,a=e.pixelRatio||1,o=new L({width:e.width||t.width||(n?n.width():0),height:e.height||t.height||(n?n.height():0),pixelRatio:a}),s=o.getContext();return s.save(),(r||i)&&s.translate(-1*r,-1*i),this.drawScene(o),s.restore(),o}toCanvas(e){return this._toKonvaCanvas(e)._canvas}toDataURL(e){var t=(e=e||{}).mimeType||null,n=e.quality||null,r=this._toKonvaCanvas(e).toDataURL(t,n);return e.callback&&e.callback(r),r}toImage(e){if(!e||!e.callback)throw"callback required for toImage method config argument";var t=e.callback;delete e.callback,m._urlToImage(this.toDataURL(e),(function(e){t(e)}))}setSize(e){return this.width(e.width),this.height(e.height),this}getSize(){return{width:this.width(),height:this.height()}}getClassName(){return this.className||this.nodeType}getType(){return this.nodeType}getDragDistance(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():s.dragDistance}_off(e,t,n){var r,i,a,o=this.eventListeners[e];for(r=0;r<o.length;r++)if(i=o[r].name,a=o[r].handler,!("konva"===i&&"konva"!==t||t&&i!==t||n&&n!==a)){if(o.splice(r,1),0===o.length){delete this.eventListeners[e];break}r--}}_fireChangeEvent(e,t,n){this._fire(e+"Change",{oldVal:t,newVal:n})}addName(e){if(!this.hasName(e)){var t=this.name(),n=t?t+" "+e:e;this.name(n)}return this}hasName(e){if(!e)return!1;const t=this.name();return!!t&&-1!==(t||"").split(/\s/g).indexOf(e)}removeName(e){var t=(this.name()||"").split(/\s/g),n=t.indexOf(e);return-1!==n&&(t.splice(n,1),this.name(t.join(" "))),this}setAttr(e,t){var n=this["set"+m._capitalize(e)];return m._isFunction(n)?n.call(this,t):this._setAttr(e,t),this}_requestDraw(){if(s.autoDrawEnabled){const e=this.getLayer()||this.getStage();null==e||e.batchDraw()}}_setAttr(e,t){var n=this.attrs[e];(n!==t||m.isObject(t))&&(null==t?delete this.attrs[e]:this.attrs[e]=t,this._shouldFireChangeEvents&&this._fireChangeEvent(e,n,t),this._requestDraw())}_setComponentAttr(e,t,n){var r;void 0!==n&&((r=this.attrs[e])||(this.attrs[e]=this.getAttr(e)),this.attrs[e][t]=n,this._fireChangeEvent(e,r,n))}_fireAndBubble(e,t,n){if(t&&"Shape"===this.nodeType&&(t.target=this),!(("mouseenter"===e||"mouseleave"===e)&&(n&&(this===n||this.isAncestorOf&&this.isAncestorOf(n))||"Stage"===this.nodeType&&!n))){this._fire(e,t);var r=("mouseenter"===e||"mouseleave"===e)&&n&&n.isAncestorOf&&n.isAncestorOf(this)&&!n.isAncestorOf(this.parent);(t&&!t.cancelBubble||!t)&&this.parent&&this.parent.isListening()&&!r&&(n&&n.parent?this._fireAndBubble.call(this.parent,e,t,n):this._fireAndBubble.call(this.parent,e,t))}}_getProtoListeners(e){let t=this._cache.get("allEventListeners");if(!t){t={};let e=Object.getPrototypeOf(this);for(;e;)if(e.eventListeners){for(var n in e.eventListeners){const r=e.eventListeners[n],i=t[n]||[];t[n]=r.concat(i)}e=Object.getPrototypeOf(e)}else e=Object.getPrototypeOf(e);this._cache.set("allEventListeners",t)}return t[e]}_fire(e,t){(t=t||{}).currentTarget=this,t.type=e;const n=this._getProtoListeners(e);if(n)for(var r=0;r<n.length;r++)n[r].handler.call(this,t);const i=this.eventListeners[e];if(i)for(r=0;r<i.length;r++)i[r].handler.call(this,t)}draw(){return this.drawScene(),this.drawHit(),this}_createDragElement(e){var t=e?e.pointerId:void 0,n=this.getStage(),r=this.getAbsolutePosition(),i=n._getPointerById(t)||n._changedPointerPositions[0]||r;D._dragElements.set(this._id,{node:this,startPointerPos:i,offset:{x:i.x-r.x,y:i.y-r.y},dragStatus:"ready",pointerId:t})}startDrag(e,t=!0){D._dragElements.has(this._id)||this._createDragElement(e);D._dragElements.get(this._id).dragStatus="dragging",this.fire("dragstart",{type:"dragstart",target:this,evt:e&&e.evt},t)}_setDragPosition(e,t){const n=this.getStage()._getPointerById(t.pointerId);if(n){var r={x:n.x-t.offset.x,y:n.y-t.offset.y},i=this.dragBoundFunc();if(void 0!==i){const t=i.call(this,r,e);t?r=t:m.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.")}this._lastPos&&this._lastPos.x===r.x&&this._lastPos.y===r.y||(this.setAbsolutePosition(r),this._requestDraw()),this._lastPos=r}}stopDrag(e){const t=D._dragElements.get(this._id);t&&(t.dragStatus="stopped"),D._endDragBefore(e),D._endDragAfter(e)}setDraggable(e){this._setAttr("draggable",e),this._dragChange()}isDragging(){const e=D._dragElements.get(this._id);return!!e&&"dragging"===e.dragStatus}_listenDrag(){this._dragCleanup(),this.on("mousedown.konva touchstart.konva",(function(e){if((!(void 0!==e.evt.button)||s.dragButtons.indexOf(e.evt.button)>=0)&&!this.isDragging()){var t=!1;D._dragElements.forEach((e=>{this.isAncestorOf(e.node)&&(t=!0)})),t||this._createDragElement(e)}}))}_dragChange(){if(this.attrs.draggable)this._listenDrag();else{if(this._dragCleanup(),!this.getStage())return;const e=D._dragElements.get(this._id),t=e&&"dragging"===e.dragStatus,n=e&&"ready"===e.dragStatus;t?this.stopDrag():n&&D._dragElements.delete(this._id)}}_dragCleanup(){this.off("mousedown.konva"),this.off("touchstart.konva")}isClientRectOnScreen(e={x:0,y:0}){const t=this.getStage();if(!t)return!1;const n={x:-e.x,y:-e.y,width:t.width()+e.x,height:t.height()+e.y};return m.haveIntersection(n,this.getClientRect())}static create(e,t){return m._isString(e)&&(e=JSON.parse(e)),this._createNode(e,t)}static _createNode(e,t){var n,r,i,a=U.prototype.getClassName.call(e),o=e.children;t&&(e.attrs.container=t),s[a]||(m.warn('Can not find a node with class name "'+a+'". Fallback to "Shape".'),a="Shape");if(n=new(0,s[a])(e.attrs),o)for(r=o.length,i=0;i<r;i++)n.add(U._createNode(o[i]));return n}}U.prototype.nodeType="Node",U.prototype._attrsAffectingSize=[],U.prototype.eventListeners={},U.prototype.on.call(U.prototype,N,(function(){this._batchingTransformChange?this._needClearTransformCache=!0:(this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform"))})),U.prototype.on.call(U.prototype,"visibleChange.konva",(function(){this._clearSelfAndDescendantCache("visible")})),U.prototype.on.call(U.prototype,"listeningChange.konva",(function(){this._clearSelfAndDescendantCache("listening")})),U.prototype.on.call(U.prototype,"opacityChange.konva",(function(){this._clearSelfAndDescendantCache("absoluteOpacity")}));const O=k.addGetterSetter;O(U,"zIndex"),O(U,"absolutePosition"),O(U,"position"),O(U,"x",0,b()),O(U,"y",0,b()),O(U,"globalCompositeOperation","source-over",_()),O(U,"opacity",1,b()),O(U,"name","",_()),O(U,"id","",_()),O(U,"rotation",0,b()),k.addComponentsGetterSetter(U,"scale",["x","y"]),O(U,"scaleX",1,b()),O(U,"scaleY",1,b()),k.addComponentsGetterSetter(U,"skew",["x","y"]),O(U,"skewX",0,b()),O(U,"skewY",0,b()),k.addComponentsGetterSetter(U,"offset",["x","y"]),O(U,"offsetX",0,b()),O(U,"offsetY",0,b()),O(U,"dragDistance",null,b()),O(U,"width",0,b()),O(U,"height",0,b()),O(U,"listening",!0,C()),O(U,"preventDefault",!0,C()),O(U,"filters",null,(function(e){return this._filterUpToDate=!1,e})),O(U,"visible",!0,C()),O(U,"transformsEnabled","all",_()),O(U,"size"),O(U,"dragBoundFunc"),O(U,"draggable",!1,C()),k.backCompat(U,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"});class W extends U{constructor(){super(...arguments),this.children=[]}getChildren(e){if(!e)return this.children||[];const t=this.children||[];var n=[];return t.forEach((function(t){e(t)&&n.push(t)})),n}hasChildren(){return this.getChildren().length>0}removeChildren(){return this.getChildren().forEach((e=>{e.parent=null,e.index=0,e.remove()})),this.children=[],this._requestDraw(),this}destroyChildren(){return this.getChildren().forEach((e=>{e.parent=null,e.index=0,e.destroy()})),this.children=[],this._requestDraw(),this}add(...e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}var n=e[0];return n.getParent()?(n.moveTo(this),this):(this._validateAdd(n),n.index=this.getChildren().length,n.parent=this,n._clearCaches(),this.getChildren().push(n),this._fire("add",{child:n}),this._requestDraw(),this)}destroy(){return this.hasChildren()&&this.destroyChildren(),super.destroy(),this}find(e){return this._generalFind(e,!1)}findOne(e){var t=this._generalFind(e,!0);return t.length>0?t[0]:void 0}_generalFind(e,t){var n=[];return this._descendants((r=>{const i=r._isMatch(e);return i&&n.push(r),!(!i||!t)})),n}_descendants(e){let t=!1;const n=this.getChildren();for(const r of n){if(t=e(r),t)return!0;if(r.hasChildren()&&(t=r._descendants(e),t))return!0}return!1}toObject(){var e=U.prototype.toObject.call(this);return e.children=[],this.getChildren().forEach((t=>{e.children.push(t.toObject())})),e}isAncestorOf(e){for(var t=e.getParent();t;){if(t._id===this._id)return!0;t=t.getParent()}return!1}clone(e){var t=U.prototype.clone.call(this,e);return this.getChildren().forEach((function(e){t.add(e.clone())})),t}getAllIntersections(e){var t=[];return this.find("Shape").forEach((function(n){n.isVisible()&&n.intersects(e)&&t.push(n)})),t}_clearSelfAndDescendantCache(e){var t;super._clearSelfAndDescendantCache(e),this.isCached()||null===(t=this.children)||void 0===t||t.forEach((function(t){t._clearSelfAndDescendantCache(e)}))}_setChildrenIndices(){var e;null===(e=this.children)||void 0===e||e.forEach((function(e,t){e.index=t})),this._requestDraw()}drawScene(e,t){var n=this.getLayer(),r=e||n&&n.getCanvas(),i=r&&r.getContext(),a=this._getCanvasCache(),o=a&&a.scene,s=r&&r.isCache;if(!this.isVisible()&&!s)return this;if(o){i.save();var l=this.getAbsoluteTransform(t).getMatrix();i.transform(l[0],l[1],l[2],l[3],l[4],l[5]),this._drawCachedSceneCanvas(i),i.restore()}else this._drawChildren("drawScene",r,t);return this}drawHit(e,t){if(!this.shouldDrawHit(t))return this;var n=this.getLayer(),r=e||n&&n.hitCanvas,i=r&&r.getContext(),a=this._getCanvasCache();if(a&&a.hit){i.save();var o=this.getAbsoluteTransform(t).getMatrix();i.transform(o[0],o[1],o[2],o[3],o[4],o[5]),this._drawCachedHitCanvas(i),i.restore()}else this._drawChildren("drawHit",r,t);return this}_drawChildren(e,t,n){var r,i=t&&t.getContext(),a=this.clipWidth(),o=this.clipHeight(),s=this.clipFunc(),l=a&&o||s;const u=n===this;if(l){i.save();var c=this.getAbsoluteTransform(n),d=c.getMatrix();if(i.transform(d[0],d[1],d[2],d[3],d[4],d[5]),i.beginPath(),s)s.call(this,i,this);else{var h=this.clipX(),f=this.clipY();i.rect(h,f,a,o)}i.clip(),d=c.copy().invert().getMatrix(),i.transform(d[0],d[1],d[2],d[3],d[4],d[5])}var p=!u&&"source-over"!==this.globalCompositeOperation()&&"drawScene"===e;p&&(i.save(),i._applyGlobalCompositeOperation(this)),null===(r=this.children)||void 0===r||r.forEach((function(r){r[e](t,n)})),p&&i.restore(),l&&i.restore()}getClientRect(e){var t,n,r,i,a,o=(e=e||{}).skipTransform,s=e.relativeTo,l={x:1/0,y:1/0,width:0,height:0},u=this;null===(t=this.children)||void 0===t||t.forEach((function(t){if(t.visible()){var o=t.getClientRect({relativeTo:u,skipShadow:e.skipShadow,skipStroke:e.skipStroke});0===o.width&&0===o.height||(void 0===n?(n=o.x,r=o.y,i=o.x+o.width,a=o.y+o.height):(n=Math.min(n,o.x),r=Math.min(r,o.y),i=Math.max(i,o.x+o.width),a=Math.max(a,o.y+o.height)))}}));for(var c=this.find("Shape"),d=!1,h=0;h<c.length;h++){if(c[h]._isVisible(this)){d=!0;break}}return l=d&&void 0!==n?{x:n,y:r,width:i-n,height:a-r}:{x:0,y:0,width:0,height:0},o?l:this._transformedRect(l,s)}}k.addComponentsGetterSetter(W,"clip",["x","y","width","height"]),k.addGetterSetter(W,"clipX",void 0,b()),k.addGetterSetter(W,"clipY",void 0,b()),k.addGetterSetter(W,"clipWidth",void 0,b()),k.addGetterSetter(W,"clipHeight",void 0,b()),k.addGetterSetter(W,"clipFunc");const G=new Map,B=void 0!==s._global.PointerEvent;function j(e){return G.get(e)}function H(e){return{evt:e,pointerId:e.pointerId}}function Y(e,t){return G.get(e)===t}function q(e,t){Q(e);t.getStage()&&(G.set(e,t),B&&t._fire("gotpointercapture",H(new PointerEvent("gotpointercapture"))))}function Q(e,t){const n=G.get(e);if(!n)return;const r=n.getStage();r&&r.content,G.delete(e),B&&n._fire("lostpointercapture",H(new PointerEvent("lostpointercapture")))}var V=[["mouseenter","_pointerenter"],["mousedown","_pointerdown"],["mousemove","_pointermove"],["mouseup","_pointerup"],["mouseleave","_pointerleave"],["touchstart","_pointerdown"],["touchmove","_pointermove"],["touchend","_pointerup"],["touchcancel","_pointercancel"],["mouseover","_pointerover"],["wheel","_wheel"],["contextmenu","_contextmenu"],["pointerdown","_pointerdown"],["pointermove","_pointermove"],["pointerup","_pointerup"],["pointercancel","_pointercancel"],["lostpointercapture","_lostpointercapture"]];const X={mouse:{pointerout:"mouseout",pointerleave:"mouseleave",pointerover:"mouseover",pointerenter:"mouseenter",pointermove:"mousemove",pointerdown:"mousedown",pointerup:"mouseup",pointercancel:"mousecancel",pointerclick:"click",pointerdblclick:"dblclick"},touch:{pointerout:"touchout",pointerleave:"touchleave",pointerover:"touchover",pointerenter:"touchenter",pointermove:"touchmove",pointerdown:"touchstart",pointerup:"touchend",pointercancel:"touchcancel",pointerclick:"tap",pointerdblclick:"dbltap"},pointer:{pointerout:"pointerout",pointerleave:"pointerleave",pointerover:"pointerover",pointerenter:"pointerenter",pointermove:"pointermove",pointerdown:"pointerdown",pointerup:"pointerup",pointercancel:"pointercancel",pointerclick:"pointerclick",pointerdblclick:"pointerdblclick"}},$=e=>e.indexOf("pointer")>=0?"pointer":e.indexOf("touch")>=0?"touch":"mouse",K=e=>{const t=$(e);return"pointer"===t?s.pointerEventsEnabled&&X.pointer:"touch"===t?X.touch:"mouse"===t?X.mouse:void 0};function J(e={}){return(e.clipFunc||e.clipWidth||e.clipHeight)&&m.warn("Stage does not support clipping. Please use clip for Layers or Groups."),e}const Z=[];class ee extends W{constructor(e){super(J(e)),this._pointerPositions=[],this._changedPointerPositions=[],this._buildDOM(),this._bindContentEvents(),Z.push(this),this.on("widthChange.konva heightChange.konva",this._resizeDOM),this.on("visibleChange.konva",this._checkVisibility),this.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva",(()=>{J(this.attrs)})),this._checkVisibility()}_validateAdd(e){const t="Layer"===e.getType(),n="FastLayer"===e.getType();t||n||m.throw("You may only add layers to the stage.")}_checkVisibility(){if(!this.content)return;const e=this.visible()?"":"none";this.content.style.display=e}setContainer(e){if("string"==typeof e){if("."===e.charAt(0)){var t=e.slice(1);e=document.getElementsByClassName(t)[0]}else{var n;n="#"!==e.charAt(0)?e:e.slice(1),e=document.getElementById(n)}if(!e)throw"Can not find container in document with id "+n}return this._setAttr("container",e),this.content&&(this.content.parentElement&&this.content.parentElement.removeChild(this.content),e.appendChild(this.content)),this}shouldDrawHit(){return!0}clear(){var e,t=this.children,n=t.length;for(e=0;e<n;e++)t[e].clear();return this}clone(e){return e||(e={}),e.container="undefined"!=typeof document&&document.createElement("div"),W.prototype.clone.call(this,e)}destroy(){super.destroy();var e=this.content;e&&m._isInDocument(e)&&this.container().removeChild(e);var t=Z.indexOf(this);return t>-1&&Z.splice(t,1),this}getPointerPosition(){const e=this._pointerPositions[0]||this._changedPointerPositions[0];return e?{x:e.x,y:e.y}:(m.warn("Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);"),null)}_getPointerById(e){return this._pointerPositions.find((t=>t.id===e))}getPointersPositions(){return this._pointerPositions}getStage(){return this}getContent(){return this.content}_toKonvaCanvas(e){(e=e||{}).x=e.x||0,e.y=e.y||0,e.width=e.width||this.width(),e.height=e.height||this.height();var t=new L({width:e.width,height:e.height,pixelRatio:e.pixelRatio||1}),n=t.getContext()._context,r=this.children;return(e.x||e.y)&&n.translate(-1*e.x,-1*e.y),r.forEach((function(t){if(t.isVisible()){var r=t._toKonvaCanvas(e);n.drawImage(r._canvas,e.x,e.y,r.getWidth()/r.getPixelRatio(),r.getHeight()/r.getPixelRatio())}})),t}getIntersection(e){if(!e)return null;var t,n=this.children;for(t=n.length-1;t>=0;t--){const r=n[t].getIntersection(e);if(r)return r}return null}_resizeDOM(){var e=this.width(),t=this.height();this.content&&(this.content.style.width=e+"px",this.content.style.height=t+"px"),this.bufferCanvas.setSize(e,t),this.bufferHitCanvas.setSize(e,t),this.children.forEach((n=>{n.setSize({width:e,height:t}),n.draw()}))}add(e,...t){if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}super.add(e);var r=this.children.length;return r>5&&m.warn("The stage has "+r+" layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."),e.setSize({width:this.width(),height:this.height()}),e.draw(),s.isBrowser&&this.content.appendChild(e.canvas._canvas),this}getParent(){return null}getLayer(){return null}hasPointerCapture(e){return Y(e,this)}setPointerCapture(e){q(e,this)}releaseCapture(e){Q(e)}getLayers(){return this.children}_bindContentEvents(){s.isBrowser&&V.forEach((([e,t])=>{this.content.addEventListener(e,(e=>{this[t](e)}))}))}_pointerenter(e){this.setPointersPositions(e);const t=K(e.type);this._fire(t.pointerenter,{evt:e,target:this,currentTarget:this})}_pointerover(e){this.setPointersPositions(e);const t=K(e.type);this._fire(t.pointerover,{evt:e,target:this,currentTarget:this})}_getTargetShape(e){let t=this[e+"targetShape"];return t&&!t.getStage()&&(t=null),t}_pointerleave(e){const t=K(e.type),n=$(e.type);if(t){this.setPointersPositions(e);var r=this._getTargetShape(n),i=!D.isDragging||s.hitOnDragEnabled;r&&i?(r._fireAndBubble(t.pointerout,{evt:e}),r._fireAndBubble(t.pointerleave,{evt:e}),this._fire(t.pointerleave,{evt:e,target:this,currentTarget:this}),this[n+"targetShape"]=null):i&&(this._fire(t.pointerleave,{evt:e,target:this,currentTarget:this}),this._fire(t.pointerout,{evt:e,target:this,currentTarget:this})),this.pointerPos=void 0,this._pointerPositions=[]}}_pointerdown(e){const t=K(e.type),n=$(e.type);if(t){this.setPointersPositions(e);var r=!1;this._changedPointerPositions.forEach((i=>{var a=this.getIntersection(i);D.justDragged=!1,s["_"+n+"ListenClick"]=!0;if(!(a&&a.isListening()))return;s.capturePointerEventsEnabled&&a.setPointerCapture(i.id),this[n+"ClickStartShape"]=a,a._fireAndBubble(t.pointerdown,{evt:e,pointerId:i.id}),r=!0;const o=e.type.indexOf("touch")>=0;a.preventDefault()&&e.cancelable&&o&&e.preventDefault()})),r||this._fire(t.pointerdown,{evt:e,target:this,currentTarget:this,pointerId:this._pointerPositions[0].id})}}_pointermove(e){const t=K(e.type),n=$(e.type);if(!t)return;if(D.isDragging&&D.node.preventDefault()&&e.cancelable&&e.preventDefault(),this.setPointersPositions(e),!(!D.isDragging||s.hitOnDragEnabled))return;var r={};let i=!1;var a=this._getTargetShape(n);this._changedPointerPositions.forEach((o=>{const s=j(o.id)||this.getIntersection(o),l=o.id,u={evt:e,pointerId:l};var c=a!==s;if(c&&a&&(a._fireAndBubble(t.pointerout,Object.assign({},u),s),a._fireAndBubble(t.pointerleave,Object.assign({},u),s)),s){if(r[s._id])return;r[s._id]=!0}s&&s.isListening()?(i=!0,c&&(s._fireAndBubble(t.pointerover,Object.assign({},u),a),s._fireAndBubble(t.pointerenter,Object.assign({},u),a),this[n+"targetShape"]=s),s._fireAndBubble(t.pointermove,Object.assign({},u))):a&&(this._fire(t.pointerover,{evt:e,target:this,currentTarget:this,pointerId:l}),this[n+"targetShape"]=null)})),i||this._fire(t.pointermove,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id})}_pointerup(e){const t=K(e.type),n=$(e.type);if(!t)return;this.setPointersPositions(e);const r=this[n+"ClickStartShape"],i=this[n+"ClickEndShape"];var a={};let o=!1;this._changedPointerPositions.forEach((l=>{const u=j(l.id)||this.getIntersection(l);if(u){if(u.releaseCapture(l.id),a[u._id])return;a[u._id]=!0}const c=l.id,d={evt:e,pointerId:c};let h=!1;s["_"+n+"InDblClickWindow"]?(h=!0,clearTimeout(this[n+"DblTimeout"])):D.justDragged||(s["_"+n+"InDblClickWindow"]=!0,clearTimeout(this[n+"DblTimeout"])),this[n+"DblTimeout"]=setTimeout((function(){s["_"+n+"InDblClickWindow"]=!1}),s.dblClickWindow),u&&u.isListening()?(o=!0,this[n+"ClickEndShape"]=u,u._fireAndBubble(t.pointerup,Object.assign({},d)),s["_"+n+"ListenClick"]&&r&&r===u&&(u._fireAndBubble(t.pointerclick,Object.assign({},d)),h&&i&&i===u&&u._fireAndBubble(t.pointerdblclick,Object.assign({},d)))):(this[n+"ClickEndShape"]=null,s["_"+n+"ListenClick"]&&this._fire(t.pointerclick,{evt:e,target:this,currentTarget:this,pointerId:c}),h&&this._fire(t.pointerdblclick,{evt:e,target:this,currentTarget:this,pointerId:c}))})),o||this._fire(t.pointerup,{evt:e,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),s["_"+n+"ListenClick"]=!1,e.cancelable&&e.preventDefault()}_contextmenu(e){this.setPointersPositions(e);var t=this.getIntersection(this.getPointerPosition());t&&t.isListening()?t._fireAndBubble("contextmenu",{evt:e}):this._fire("contextmenu",{evt:e,target:this,currentTarget:this})}_wheel(e){this.setPointersPositions(e);var t=this.getIntersection(this.getPointerPosition());t&&t.isListening()?t._fireAndBubble("wheel",{evt:e}):this._fire("wheel",{evt:e,target:this,currentTarget:this})}_pointercancel(e){this.setPointersPositions(e);const t=j(e.pointerId)||this.getIntersection(this.getPointerPosition());t&&t._fireAndBubble("pointerup",H(e)),Q(e.pointerId)}_lostpointercapture(e){Q(e.pointerId)}setPointersPositions(e){var t=this._getContentPosition(),n=null,r=null;void 0!==(e=e||window.event).touches?(this._pointerPositions=[],this._changedPointerPositions=[],Array.prototype.forEach.call(e.touches,(e=>{this._pointerPositions.push({id:e.identifier,x:(e.clientX-t.left)/t.scaleX,y:(e.clientY-t.top)/t.scaleY})})),Array.prototype.forEach.call(e.changedTouches||e.touches,(e=>{this._changedPointerPositions.push({id:e.identifier,x:(e.clientX-t.left)/t.scaleX,y:(e.clientY-t.top)/t.scaleY})}))):(n=(e.clientX-t.left)/t.scaleX,r=(e.clientY-t.top)/t.scaleY,this.pointerPos={x:n,y:r},this._pointerPositions=[{x:n,y:r,id:m._getFirstPointerId(e)}],this._changedPointerPositions=[{x:n,y:r,id:m._getFirstPointerId(e)}])}_setPointerPosition(e){m.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'),this.setPointersPositions(e)}_getContentPosition(){if(!this.content||!this.content.getBoundingClientRect)return{top:0,left:0,scaleX:1,scaleY:1};var e=this.content.getBoundingClientRect();return{top:e.top,left:e.left,scaleX:e.width/this.content.clientWidth||1,scaleY:e.height/this.content.clientHeight||1}}_buildDOM(){if(this.bufferCanvas=new L({width:this.width(),height:this.height()}),this.bufferHitCanvas=new M({pixelRatio:1,width:this.width(),height:this.height()}),s.isBrowser){var e=this.container();if(!e)throw"Stage has no container. A container is required.";e.innerHTML="",this.content=document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),e.appendChild(this.content),this._resizeDOM()}}cache(){return m.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."),this}clearCache(){return this}batchDraw(){return this.getChildren().forEach((function(e){e.batchDraw()})),this}}ee.prototype.nodeType="Stage",l(ee),k.addGetterSetter(ee,"container");let te;function ne(){return te||(te=m.createCanvasElement().getContext("2d"),te)}const re={};class ie extends U{constructor(e){let t;for(super(e);t=m.getRandomColor(),!t||t in re;);this.colorKey=t,re[t]=this}getContext(){return m.warn("shape.getContext() method is deprecated. Please do not use it."),this.getLayer().getContext()}getCanvas(){return m.warn("shape.getCanvas() method is deprecated. Please do not use it."),this.getLayer().getCanvas()}getSceneFunc(){return this.attrs.sceneFunc||this._sceneFunc}getHitFunc(){return this.attrs.hitFunc||this._hitFunc}hasShadow(){return this._getCache("hasShadow",this._hasShadow)}_hasShadow(){return this.shadowEnabled()&&0!==this.shadowOpacity()&&!!(this.shadowColor()||this.shadowBlur()||this.shadowOffsetX()||this.shadowOffsetY())}_getFillPattern(){return this._getCache("patternImage",this.__getFillPattern)}__getFillPattern(){if(this.fillPatternImage()){const e=ne().createPattern(this.fillPatternImage(),this.fillPatternRepeat()||"repeat");if(e&&e.setTransform){const t=new u;t.translate(this.fillPatternX(),this.fillPatternY()),t.rotate(s.getAngle(this.fillPatternRotation())),t.scale(this.fillPatternScaleX(),this.fillPatternScaleY()),t.translate(-1*this.fillPatternOffsetX(),-1*this.fillPatternOffsetY());const n=t.getMatrix();e.setTransform({a:n[0],b:n[1],c:n[2],d:n[3],e:n[4],f:n[5]})}return e}}_getLinearGradient(){return this._getCache("linearGradient",this.__getLinearGradient)}__getLinearGradient(){var e=this.fillLinearGradientColorStops();if(e){for(var t=ne(),n=this.fillLinearGradientStartPoint(),r=this.fillLinearGradientEndPoint(),i=t.createLinearGradient(n.x,n.y,r.x,r.y),a=0;a<e.length;a+=2)i.addColorStop(e[a],e[a+1]);return i}}_getRadialGradient(){return this._getCache("radialGradient",this.__getRadialGradient)}__getRadialGradient(){var e=this.fillRadialGradientColorStops();if(e){for(var t=ne(),n=this.fillRadialGradientStartPoint(),r=this.fillRadialGradientEndPoint(),i=t.createRadialGradient(n.x,n.y,this.fillRadialGradientStartRadius(),r.x,r.y,this.fillRadialGradientEndRadius()),a=0;a<e.length;a+=2)i.addColorStop(e[a],e[a+1]);return i}}getShadowRGBA(){return this._getCache("shadowRGBA",this._getShadowRGBA)}_getShadowRGBA(){if(this.hasShadow()){var e=m.colorToRGBA(this.shadowColor());return"rgba("+e.r+","+e.g+","+e.b+","+e.a*(this.shadowOpacity()||1)+")"}}hasFill(){return this._calculate("hasFill",["fillEnabled","fill","fillPatternImage","fillLinearGradientColorStops","fillRadialGradientColorStops"],(()=>this.fillEnabled()&&!!(this.fill()||this.fillPatternImage()||this.fillLinearGradientColorStops()||this.fillRadialGradientColorStops())))}hasStroke(){return this._calculate("hasStroke",["strokeEnabled","strokeWidth","stroke","strokeLinearGradientColorStops"],(()=>this.strokeEnabled()&&this.strokeWidth()&&!(!this.stroke()&&!this.strokeLinearGradientColorStops())))}hasHitStroke(){const e=this.hitStrokeWidth();return"auto"===e?this.hasStroke():this.strokeEnabled()&&!!e}intersects(e){var t=this.getStage().bufferHitCanvas;return t.getContext().clear(),this.drawHit(t,null,!0),t.context.getImageData(Math.round(e.x),Math.round(e.y),1,1).data[3]>0}destroy(){return U.prototype.destroy.call(this),delete re[this.colorKey],delete this.colorKey,this}_useBufferCanvas(e){var t;if(!this.getStage())return!1;if(!(null===(t=this.attrs.perfectDrawEnabled)||void 0===t||t))return!1;const n=e||this.hasFill(),r=this.hasStroke(),i=1!==this.getAbsoluteOpacity();if(n&&r&&i)return!0;const a=this.hasShadow(),o=this.shadowForStrokeEnabled();return!!(n&&r&&a&&o)}setStrokeHitEnabled(e){m.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."),e?this.hitStrokeWidth("auto"):this.hitStrokeWidth(0)}getStrokeHitEnabled(){return 0!==this.hitStrokeWidth()}getSelfRect(){var e=this.size();return{x:this._centroid?-e.width/2:0,y:this._centroid?-e.height/2:0,width:e.width,height:e.height}}getClientRect(e={}){const t=e.skipTransform,n=e.relativeTo,r=this.getSelfRect(),i=!e.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,a=r.width+i,o=r.height+i,s=!e.skipShadow&&this.hasShadow(),l=s?this.shadowOffsetX():0,u=s?this.shadowOffsetY():0,c=a+Math.abs(l),d=o+Math.abs(u),h=s&&this.shadowBlur()||0,f=c+2*h,p=d+2*h;let g=0;Math.round(i/2)!==i/2&&(g=1);const m={width:f+g,height:p+g,x:-Math.round(i/2+h)+Math.min(l,0)+r.x,y:-Math.round(i/2+h)+Math.min(u,0)+r.y};return t?m:this._transformedRect(m,n)}drawScene(e,t){var n,r,i=this.getLayer(),a=e||i.getCanvas(),o=a.getContext(),s=this._getCanvasCache(),l=this.getSceneFunc(),u=this.hasShadow(),c=a.isCache,d=t===this;if(!this.isVisible()&&!d)return this;if(s){o.save();var h=this.getAbsoluteTransform(t).getMatrix();return o.transform(h[0],h[1],h[2],h[3],h[4],h[5]),this._drawCachedSceneCanvas(o),o.restore(),this}if(!l)return this;if(o.save(),this._useBufferCanvas()&&!c){(r=(n=this.getStage().bufferCanvas).getContext()).clear(),r.save(),r._applyLineJoin(this);var f=this.getAbsoluteTransform(t).getMatrix();r.transform(f[0],f[1],f[2],f[3],f[4],f[5]),l.call(this,r,this),r.restore();var p=n.pixelRatio;u&&o._applyShadow(this),o._applyOpacity(this),o._applyGlobalCompositeOperation(this),o.drawImage(n._canvas,0,0,n.width/p,n.height/p)}else{if(o._applyLineJoin(this),!d){f=this.getAbsoluteTransform(t).getMatrix();o.transform(f[0],f[1],f[2],f[3],f[4],f[5]),o._applyOpacity(this),o._applyGlobalCompositeOperation(this)}u&&o._applyShadow(this),l.call(this,o,this)}return o.restore(),this}drawHit(e,t,n=!1){if(!this.shouldDrawHit(t,n))return this;var r=this.getLayer(),i=e||r.hitCanvas,a=i&&i.getContext(),o=this.hitFunc()||this.sceneFunc(),s=this._getCanvasCache(),l=s&&s.hit;if(this.colorKey||m.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. If you want to reuse shape you should call remove() instead of destroy()"),l){a.save();var u=this.getAbsoluteTransform(t).getMatrix();return a.transform(u[0],u[1],u[2],u[3],u[4],u[5]),this._drawCachedHitCanvas(a),a.restore(),this}if(!o)return this;a.save(),a._applyLineJoin(this);if(!(this===t)){var c=this.getAbsoluteTransform(t).getMatrix();a.transform(c[0],c[1],c[2],c[3],c[4],c[5])}return o.call(this,a,this),a.restore(),this}drawHitFromCache(e=0){var t,n,r,i,a,o=this._getCanvasCache(),s=this._getCachedSceneCanvas(),l=o.hit,u=l.getContext(),c=l.getWidth(),d=l.getHeight();u.clear(),u.drawImage(s._canvas,0,0,c,d);try{for(r=(n=(t=u.getImageData(0,0,c,d)).data).length,i=m._hexToRgb(this.colorKey),a=0;a<r;a+=4)n[a+3]>e?(n[a]=i.r,n[a+1]=i.g,n[a+2]=i.b,n[a+3]=255):n[a+3]=0;u.putImageData(t,0,0)}catch(e){m.error("Unable to draw hit graph from cached scene canvas. "+e.message)}return this}hasPointerCapture(e){return Y(e,this)}setPointerCapture(e){q(e,this)}releaseCapture(e){Q(e)}}ie.prototype._fillFunc=function(e){e.fill()},ie.prototype._strokeFunc=function(e){e.stroke()},ie.prototype._fillFuncHit=function(e){e.fill()},ie.prototype._strokeFuncHit=function(e){e.stroke()},ie.prototype._centroid=!1,ie.prototype.nodeType="Shape",l(ie),ie.prototype.eventListeners={},ie.prototype.on.call(ie.prototype,"shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache("hasShadow")})),ie.prototype.on.call(ie.prototype,"shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache("shadowRGBA")})),ie.prototype.on.call(ie.prototype,"fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva fillPatternOffsetXChange.konva fillPatternOffsetYChange.konva fillPatternXChange.konva fillPatternYChange.konva fillPatternRotationChange.konva",(function(){this._clearCache("patternImage")})),ie.prototype.on.call(ie.prototype,"fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva",(function(){this._clearCache("linearGradient")})),ie.prototype.on.call(ie.prototype,"fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva",(function(){this._clearCache("radialGradient")})),k.addGetterSetter(ie,"stroke",void 0,S()),k.addGetterSetter(ie,"strokeWidth",2,b()),k.addGetterSetter(ie,"fillAfterStrokeEnabled",!1),k.addGetterSetter(ie,"hitStrokeWidth","auto",x()),k.addGetterSetter(ie,"strokeHitEnabled",!0,C()),k.addGetterSetter(ie,"perfectDrawEnabled",!0,C()),k.addGetterSetter(ie,"shadowForStrokeEnabled",!0,C()),k.addGetterSetter(ie,"lineJoin"),k.addGetterSetter(ie,"lineCap"),k.addGetterSetter(ie,"sceneFunc"),k.addGetterSetter(ie,"hitFunc"),k.addGetterSetter(ie,"dash"),k.addGetterSetter(ie,"dashOffset",0,b()),k.addGetterSetter(ie,"shadowColor",void 0,_()),k.addGetterSetter(ie,"shadowBlur",0,b()),k.addGetterSetter(ie,"shadowOpacity",1,b()),k.addComponentsGetterSetter(ie,"shadowOffset",["x","y"]),k.addGetterSetter(ie,"shadowOffsetX",0,b()),k.addGetterSetter(ie,"shadowOffsetY",0,b()),k.addGetterSetter(ie,"fillPatternImage"),k.addGetterSetter(ie,"fill",void 0,S()),k.addGetterSetter(ie,"fillPatternX",0,b()),k.addGetterSetter(ie,"fillPatternY",0,b()),k.addGetterSetter(ie,"fillLinearGradientColorStops"),k.addGetterSetter(ie,"strokeLinearGradientColorStops"),k.addGetterSetter(ie,"fillRadialGradientStartRadius",0),k.addGetterSetter(ie,"fillRadialGradientEndRadius",0),k.addGetterSetter(ie,"fillRadialGradientColorStops"),k.addGetterSetter(ie,"fillPatternRepeat","repeat"),k.addGetterSetter(ie,"fillEnabled",!0),k.addGetterSetter(ie,"strokeEnabled",!0),k.addGetterSetter(ie,"shadowEnabled",!0),k.addGetterSetter(ie,"dashEnabled",!0),k.addGetterSetter(ie,"strokeScaleEnabled",!0),k.addGetterSetter(ie,"fillPriority","color"),k.addComponentsGetterSetter(ie,"fillPatternOffset",["x","y"]),k.addGetterSetter(ie,"fillPatternOffsetX",0,b()),k.addGetterSetter(ie,"fillPatternOffsetY",0,b()),k.addComponentsGetterSetter(ie,"fillPatternScale",["x","y"]),k.addGetterSetter(ie,"fillPatternScaleX",1,b()),k.addGetterSetter(ie,"fillPatternScaleY",1,b()),k.addComponentsGetterSetter(ie,"fillLinearGradientStartPoint",["x","y"]),k.addComponentsGetterSetter(ie,"strokeLinearGradientStartPoint",["x","y"]),k.addGetterSetter(ie,"fillLinearGradientStartPointX",0),k.addGetterSetter(ie,"strokeLinearGradientStartPointX",0),k.addGetterSetter(ie,"fillLinearGradientStartPointY",0),k.addGetterSetter(ie,"strokeLinearGradientStartPointY",0),k.addComponentsGetterSetter(ie,"fillLinearGradientEndPoint",["x","y"]),k.addComponentsGetterSetter(ie,"strokeLinearGradientEndPoint",["x","y"]),k.addGetterSetter(ie,"fillLinearGradientEndPointX",0),k.addGetterSetter(ie,"strokeLinearGradientEndPointX",0),k.addGetterSetter(ie,"fillLinearGradientEndPointY",0),k.addGetterSetter(ie,"strokeLinearGradientEndPointY",0),k.addComponentsGetterSetter(ie,"fillRadialGradientStartPoint",["x","y"]),k.addGetterSetter(ie,"fillRadialGradientStartPointX",0),k.addGetterSetter(ie,"fillRadialGradientStartPointY",0),k.addComponentsGetterSetter(ie,"fillRadialGradientEndPoint",["x","y"]),k.addGetterSetter(ie,"fillRadialGradientEndPointX",0),k.addGetterSetter(ie,"fillRadialGradientEndPointY",0),k.addGetterSetter(ie,"fillPatternRotation",0),k.backCompat(ie,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"});var ae=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],oe=ae.length;class se extends W{constructor(e){super(e),this.canvas=new L,this.hitCanvas=new M({pixelRatio:1}),this._waitingForDraw=!1,this.on("visibleChange.konva",this._checkVisibility),this._checkVisibility(),this.on("imageSmoothingEnabledChange.konva",this._setSmoothEnabled),this._setSmoothEnabled()}createPNGStream(){return this.canvas._canvas.createPNGStream()}getCanvas(){return this.canvas}getNativeCanvasElement(){return this.canvas._canvas}getHitCanvas(){return this.hitCanvas}getContext(){return this.getCanvas().getContext()}clear(e){return this.getContext().clear(e),this.getHitCanvas().getContext().clear(e),this}setZIndex(e){super.setZIndex(e);var t=this.getStage();return t&&t.content&&(t.content.removeChild(this.getNativeCanvasElement()),e<t.children.length-1?t.content.insertBefore(this.getNativeCanvasElement(),t.children[e+1].getCanvas()._canvas):t.content.appendChild(this.getNativeCanvasElement())),this}moveToTop(){U.prototype.moveToTop.call(this);var e=this.getStage();return e&&e.content&&(e.content.removeChild(this.getNativeCanvasElement()),e.content.appendChild(this.getNativeCanvasElement())),!0}moveUp(){if(!U.prototype.moveUp.call(this))return!1;var e=this.getStage();return!(!e||!e.content)&&(e.content.removeChild(this.getNativeCanvasElement()),this.index<e.children.length-1?e.content.insertBefore(this.getNativeCanvasElement(),e.children[this.index+1].getCanvas()._canvas):e.content.appendChild(this.getNativeCanvasElement()),!0)}moveDown(){if(U.prototype.moveDown.call(this)){var e=this.getStage();if(e){var t=e.children;e.content&&(e.content.removeChild(this.getNativeCanvasElement()),e.content.insertBefore(this.getNativeCanvasElement(),t[this.index+1].getCanvas()._canvas))}return!0}return!1}moveToBottom(){if(U.prototype.moveToBottom.call(this)){var e=this.getStage();if(e){var t=e.children;e.content&&(e.content.removeChild(this.getNativeCanvasElement()),e.content.insertBefore(this.getNativeCanvasElement(),t[1].getCanvas()._canvas))}return!0}return!1}getLayer(){return this}remove(){var e=this.getNativeCanvasElement();return U.prototype.remove.call(this),e&&e.parentNode&&m._isInDocument(e)&&e.parentNode.removeChild(e),this}getStage(){return this.parent}setSize({width:e,height:t}){return this.canvas.setSize(e,t),this.hitCanvas.setSize(e,t),this._setSmoothEnabled(),this}_validateAdd(e){var t=e.getType();"Group"!==t&&"Shape"!==t&&m.throw("You may only add groups and shapes to a layer.")}_toKonvaCanvas(e){return(e=e||{}).width=e.width||this.getWidth(),e.height=e.height||this.getHeight(),e.x=void 0!==e.x?e.x:this.x(),e.y=void 0!==e.y?e.y:this.y(),U.prototype._toKonvaCanvas.call(this,e)}_checkVisibility(){const e=this.visible();this.canvas._canvas.style.display=e?"block":"none"}_setSmoothEnabled(){this.getContext()._context.imageSmoothingEnabled=this.imageSmoothingEnabled()}getWidth(){if(this.parent)return this.parent.width()}setWidth(){m.warn('Can not change width of layer. Use "stage.width(value)" function instead.')}getHeight(){if(this.parent)return this.parent.height()}setHeight(){m.warn('Can not change height of layer. Use "stage.height(value)" function instead.')}batchDraw(){return this._waitingForDraw||(this._waitingForDraw=!0,m.requestAnimFrame((()=>{this.draw(),this._waitingForDraw=!1}))),this}getIntersection(e){if(!this.isListening()||!this.isVisible())return null;for(var t=1,n=!1;;){for(let r=0;r<oe;r++){const i=ae[r],a=this._getIntersection({x:e.x+i.x*t,y:e.y+i.y*t}),o=a.shape;if(o)return o;if(n=!!a.antialiased,!a.antialiased)break}if(!n)return null;t+=1}}_getIntersection(e){const t=this.hitCanvas.pixelRatio,n=this.hitCanvas.context.getImageData(Math.round(e.x*t),Math.round(e.y*t),1,1).data,r=n[3];if(255===r){const e=m._rgbToHex(n[0],n[1],n[2]),t=re["#"+e];return t?{shape:t}:{antialiased:!0}}return r>0?{antialiased:!0}:{}}drawScene(e,t){var n=this.getLayer(),r=e||n&&n.getCanvas();return this._fire("beforeDraw",{node:this}),this.clearBeforeDraw()&&r.getContext().clear(),W.prototype.drawScene.call(this,r,t),this._fire("draw",{node:this}),this}drawHit(e,t){var n=this.getLayer(),r=e||n&&n.hitCanvas;return n&&n.clearBeforeDraw()&&n.getHitCanvas().getContext().clear(),W.prototype.drawHit.call(this,r,t),this}enableHitGraph(){return this.hitGraphEnabled(!0),this}disableHitGraph(){return this.hitGraphEnabled(!1),this}setHitGraphEnabled(e){m.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening(e)}getHitGraphEnabled(e){return m.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening()}toggleHitCanvas(){if(this.parent&&this.parent.content){var e=this.parent;!!this.hitCanvas._canvas.parentNode?e.content.removeChild(this.hitCanvas._canvas):e.content.appendChild(this.hitCanvas._canvas)}}}se.prototype.nodeType="Layer",l(se),k.addGetterSetter(se,"imageSmoothingEnabled",!0),k.addGetterSetter(se,"clearBeforeDraw",!0),k.addGetterSetter(se,"hitGraphEnabled",!0,C());class le extends se{constructor(e){super(e),this.listening(!1),m.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.')}}le.prototype.nodeType="FastLayer",l(le);class ue extends W{_validateAdd(e){var t=e.getType();"Group"!==t&&"Shape"!==t&&m.throw("You may only add groups and shapes to groups.")}}ue.prototype.nodeType="Group",l(ue);var ce=o.performance&&o.performance.now?function(){return o.performance.now()}:function(){return(new Date).getTime()};class de{constructor(e,t){this.id=de.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:ce(),frameRate:0},this.func=e,this.setLayers(t)}setLayers(e){var t=[];return t=e?e.length>0?e:[e]:[],this.layers=t,this}getLayers(){return this.layers}addLayer(e){var t,n=this.layers,r=n.length;for(t=0;t<r;t++)if(n[t]._id===e._id)return!1;return this.layers.push(e),!0}isRunning(){var e,t=de.animations,n=t.length;for(e=0;e<n;e++)if(t[e].id===this.id)return!0;return!1}start(){return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=ce(),de._addAnimation(this),this}stop(){return de._removeAnimation(this),this}_updateFrameObject(e){this.frame.timeDiff=e-this.frame.lastTime,this.frame.lastTime=e,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}static _addAnimation(e){this.animations.push(e),this._handleAnimation()}static _removeAnimation(e){var t,n=e.id,r=this.animations,i=r.length;for(t=0;t<i;t++)if(r[t].id===n){this.animations.splice(t,1);break}}static _runFrames(){var e,t,n,r,i,a,o,s,l={},u=this.animations;for(r=0;r<u.length;r++)if(t=(e=u[r]).layers,n=e.func,e._updateFrameObject(ce()),a=t.length,!n||!1!==n.call(e,e.frame))for(i=0;i<a;i++)void 0!==(o=t[i])._id&&(l[o._id]=o);for(s in l)l.hasOwnProperty(s)&&l[s].batchDraw()}static _animationLoop(){var e=de;e.animations.length?(e._runFrames(),m.requestAnimFrame(e._animationLoop)):e.animRunning=!1}static _handleAnimation(){this.animRunning||(this.animRunning=!0,m.requestAnimFrame(this._animationLoop))}}de.animations=[],de.animIdCounter=0,de.animRunning=!1;var he={node:1,duration:1,easing:1,onFinish:1,yoyo:1},fe=0,pe=["fill","stroke","shadowColor"];class ge{constructor(e,t,n,r,i,a,o){this.prop=e,this.propFunc=t,this.begin=r,this._pos=r,this.duration=a,this._change=0,this.prevPos=0,this.yoyo=o,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=n,this._change=i-this.begin,this.pause()}fire(e){var t=this[e];t&&t()}setTime(e){e>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():e<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=e,this.update())}getTime(){return this._time}setPosition(e){this.prevPos=this._pos,this.propFunc(e),this._pos=e}getPosition(e){return void 0===e&&(e=this._time),this.func(e,this.begin,this._change,this.duration)}play(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")}reverse(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")}seek(e){this.pause(),this._time=e,this.update(),this.fire("onSeek")}reset(){this.pause(),this._time=0,this.update(),this.fire("onReset")}finish(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")}update(){this.setPosition(this.getPosition(this._time)),this.fire("onUpdate")}onEnterFrame(){var e=this.getTimer()-this._startTime;2===this.state?this.setTime(e):3===this.state&&this.setTime(this.duration-e)}pause(){this.state=1,this.fire("onPause")}getTimer(){return(new Date).getTime()}}class me{constructor(e){var t,n,r=this,i=e.node,a=i._id,o=e.easing||ve.Linear,l=!!e.yoyo;t=void 0===e.duration?.3:0===e.duration?.001:e.duration,this.node=i,this._id=fe++;var u=i.getLayer()||(i instanceof s.Stage?i.getLayers():null);for(n in u||m.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new de((function(){r.tween.onEnterFrame()}),u),this.tween=new ge(n,(function(e){r._tweenFunc(e)}),o,0,1,1e3*t,l),this._addListeners(),me.attrs[a]||(me.attrs[a]={}),me.attrs[a][this._id]||(me.attrs[a][this._id]={}),me.tweens[a]||(me.tweens[a]={}),e)void 0===he[n]&&this._addAttr(n,e[n]);this.reset(),this.onFinish=e.onFinish,this.onReset=e.onReset,this.onUpdate=e.onUpdate}_addAttr(e,t){var n,r,i,a,o,s,l,u,c=this.node,d=c._id;if((i=me.tweens[d][e])&&delete me.attrs[d][i][e],n=c.getAttr(e),m._isArray(t))if(r=[],o=Math.max(t.length,n.length),"points"===e&&t.length!==n.length&&(t.length>n.length?(l=n,n=m._prepareArrayForTween(n,t,c.closed())):(s=t,t=m._prepareArrayForTween(t,n,c.closed()))),0===e.indexOf("fill"))for(a=0;a<o;a++)if(a%2==0)r.push(t[a]-n[a]);else{var h=m.colorToRGBA(n[a]);u=m.colorToRGBA(t[a]),n[a]=h,r.push({r:u.r-h.r,g:u.g-h.g,b:u.b-h.b,a:u.a-h.a})}else for(a=0;a<o;a++)r.push(t[a]-n[a]);else-1!==pe.indexOf(e)?(n=m.colorToRGBA(n),r={r:(u=m.colorToRGBA(t)).r-n.r,g:u.g-n.g,b:u.b-n.b,a:u.a-n.a}):r=t-n;me.attrs[d][this._id][e]={start:n,diff:r,end:t,trueEnd:s,trueStart:l},me.tweens[d][e]=this._id}_tweenFunc(e){var t,n,r,i,a,o,s,l,u=this.node,c=me.attrs[u._id][this._id];for(t in c){if(r=(n=c[t]).start,i=n.diff,l=n.end,m._isArray(r))if(a=[],s=Math.max(r.length,l.length),0===t.indexOf("fill"))for(o=0;o<s;o++)o%2==0?a.push((r[o]||0)+i[o]*e):a.push("rgba("+Math.round(r[o].r+i[o].r*e)+","+Math.round(r[o].g+i[o].g*e)+","+Math.round(r[o].b+i[o].b*e)+","+(r[o].a+i[o].a*e)+")");else for(o=0;o<s;o++)a.push((r[o]||0)+i[o]*e);else a=-1!==pe.indexOf(t)?"rgba("+Math.round(r.r+i.r*e)+","+Math.round(r.g+i.g*e)+","+Math.round(r.b+i.b*e)+","+(r.a+i.a*e)+")":r+i*e;u.setAttr(t,a)}}_addListeners(){this.tween.onPlay=()=>{this.anim.start()},this.tween.onReverse=()=>{this.anim.start()},this.tween.onPause=()=>{this.anim.stop()},this.tween.onFinish=()=>{var e=this.node,t=me.attrs[e._id][this._id];t.points&&t.points.trueEnd&&e.setAttr("points",t.points.trueEnd),this.onFinish&&this.onFinish.call(this)},this.tween.onReset=()=>{var e=this.node,t=me.attrs[e._id][this._id];t.points&&t.points.trueStart&&e.points(t.points.trueStart),this.onReset&&this.onReset()},this.tween.onUpdate=()=>{this.onUpdate&&this.onUpdate.call(this)}}play(){return this.tween.play(),this}reverse(){return this.tween.reverse(),this}reset(){return this.tween.reset(),this}seek(e){return this.tween.seek(1e3*e),this}pause(){return this.tween.pause(),this}finish(){return this.tween.finish(),this}destroy(){var e,t=this.node._id,n=this._id,r=me.tweens[t];for(e in this.pause(),r)delete me.tweens[t][e];delete me.attrs[t][n]}}me.attrs={},me.tweens={},U.prototype.to=function(e){var t=e.onFinish;e.node=this,e.onFinish=function(){this.destroy(),t&&t()},new me(e).play()};const ve={BackEaseIn(e,t,n,r){var i=1.70158;return n*(e/=r)*e*((i+1)*e-i)+t},BackEaseOut(e,t,n,r){var i=1.70158;return n*((e=e/r-1)*e*((i+1)*e+i)+1)+t},BackEaseInOut(e,t,n,r){var i=1.70158;return(e/=r/2)<1?n/2*(e*e*((1+(i*=1.525))*e-i))+t:n/2*((e-=2)*e*((1+(i*=1.525))*e+i)+2)+t},ElasticEaseIn(e,t,n,r,i,a){var o=0;return 0===e?t:1==(e/=r)?t+n:(a||(a=.3*r),!i||i<Math.abs(n)?(i=n,o=a/4):o=a/(2*Math.PI)*Math.asin(n/i),-i*Math.pow(2,10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI)/a)+t)},ElasticEaseOut(e,t,n,r,i,a){var o=0;return 0===e?t:1==(e/=r)?t+n:(a||(a=.3*r),!i||i<Math.abs(n)?(i=n,o=a/4):o=a/(2*Math.PI)*Math.asin(n/i),i*Math.pow(2,-10*e)*Math.sin((e*r-o)*(2*Math.PI)/a)+n+t)},ElasticEaseInOut(e,t,n,r,i,a){var o=0;return 0===e?t:2==(e/=r/2)?t+n:(a||(a=r*(.3*1.5)),!i||i<Math.abs(n)?(i=n,o=a/4):o=a/(2*Math.PI)*Math.asin(n/i),e<1?i*Math.pow(2,10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI)/a)*-.5+t:i*Math.pow(2,-10*(e-=1))*Math.sin((e*r-o)*(2*Math.PI)/a)*.5+n+t)},BounceEaseOut:(e,t,n,r)=>(e/=r)<1/2.75?n*(7.5625*e*e)+t:e<2/2.75?n*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?n*(7.5625*(e-=2.25/2.75)*e+.9375)+t:n*(7.5625*(e-=2.625/2.75)*e+.984375)+t,BounceEaseIn:(e,t,n,r)=>n-ve.BounceEaseOut(r-e,0,n,r)+t,BounceEaseInOut:(e,t,n,r)=>e<r/2?.5*ve.BounceEaseIn(2*e,0,n,r)+t:.5*ve.BounceEaseOut(2*e-r,0,n,r)+.5*n+t,EaseIn:(e,t,n,r)=>n*(e/=r)*e+t,EaseOut:(e,t,n,r)=>-n*(e/=r)*(e-2)+t,EaseInOut:(e,t,n,r)=>(e/=r/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t,StrongEaseIn:(e,t,n,r)=>n*(e/=r)*e*e*e*e+t,StrongEaseOut:(e,t,n,r)=>n*((e=e/r-1)*e*e*e*e+1)+t,StrongEaseInOut:(e,t,n,r)=>(e/=r/2)<1?n/2*e*e*e*e*e+t:n/2*((e-=2)*e*e*e*e+2)+t,Linear:(e,t,n,r)=>n*e/r+t},ye=m._assign(s,{Util:m,Transform:u,Node:U,Container:W,Stage:ee,stages:Z,Layer:se,FastLayer:le,Group:ue,DD:D,Shape:ie,shapes:re,Animation:de,Tween:me,Easings:ve,Context:T,Canvas:A});class be extends ie{_sceneFunc(e){var t=s.getAngle(this.angle()),n=this.clockwise();e.beginPath(),e.arc(0,0,this.outerRadius(),0,t,n),e.arc(0,0,this.innerRadius(),t,0,!n),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.outerRadius()}getHeight(){return 2*this.outerRadius()}setWidth(e){this.outerRadius(e/2)}setHeight(e){this.outerRadius(e/2)}getSelfRect(){const e=this.outerRadius(),t=Math.PI/180,n=1*t;let r=this.angle()*t+n;this.clockwise()&&(r=360);const i=[],a=[];for(let e=0;e<r;e+=n)i.push(Math.cos(e)),a.push(Math.sin(e));const o=Math.round(e*Math.min(...i)),s=Math.round(e*Math.max(...i)),l=Math.round(e*Math.min(...a));return{x:o||0,y:l||0,width:s-o,height:Math.round(e*Math.max(...a))-l}}}function we(e,t,n,r,i,a,o){var s=Math.sqrt(Math.pow(n-e,2)+Math.pow(r-t,2)),l=Math.sqrt(Math.pow(i-n,2)+Math.pow(a-r,2)),u=o*s/(s+l),c=o*l/(s+l);return[n-u*(i-e),r-u*(a-t),n+c*(i-e),r+c*(a-t)]}function xe(e,t){var n,r,i=e.length,a=[];for(n=2;n<i-2;n+=2)r=we(e[n-2],e[n-1],e[n],e[n+1],e[n+2],e[n+3],t),isNaN(r[0])||(a.push(r[0]),a.push(r[1]),a.push(e[n]),a.push(e[n+1]),a.push(r[2]),a.push(r[3]));return a}be.prototype._centroid=!0,be.prototype.className="Arc",be.prototype._attrsAffectingSize=["innerRadius","outerRadius"],l(be),k.addGetterSetter(be,"innerRadius",0,b()),k.addGetterSetter(be,"outerRadius",0,b()),k.addGetterSetter(be,"angle",0,b()),k.addGetterSetter(be,"clockwise",!1,C());class _e extends ie{constructor(e){super(e),this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",(function(){this._clearCache("tensionPoints")}))}_sceneFunc(e){var t,n,r,i=this.points(),a=i.length,o=this.tension(),s=this.closed(),l=this.bezier();if(a){if(e.beginPath(),e.moveTo(i[0],i[1]),0!==o&&a>4){for(n=(t=this.getTensionPoints()).length,r=s?0:4,s||e.quadraticCurveTo(t[0],t[1],t[2],t[3]);r<n-2;)e.bezierCurveTo(t[r++],t[r++],t[r++],t[r++],t[r++],t[r++]);s||e.quadraticCurveTo(t[n-2],t[n-1],i[a-2],i[a-1])}else if(l)for(r=2;r<a;)e.bezierCurveTo(i[r++],i[r++],i[r++],i[r++],i[r++],i[r++]);else for(r=2;r<a;r+=2)e.lineTo(i[r],i[r+1]);s?(e.closePath(),e.fillStrokeShape(this)):e.strokeShape(this)}}getTensionPoints(){return this._getCache("tensionPoints",this._getTensionPoints)}_getTensionPoints(){return this.closed()?this._getTensionPointsClosed():xe(this.points(),this.tension())}_getTensionPointsClosed(){var e=this.points(),t=e.length,n=this.tension(),r=we(e[t-2],e[t-1],e[0],e[1],e[2],e[3],n),i=we(e[t-4],e[t-3],e[t-2],e[t-1],e[0],e[1],n),a=xe(e,n);return[r[2],r[3]].concat(a).concat([i[0],i[1],e[t-2],e[t-1],i[2],i[3],r[0],r[1],e[0],e[1]])}getWidth(){return this.getSelfRect().width}getHeight(){return this.getSelfRect().height}getSelfRect(){var e=this.points();if(e.length<4)return{x:e[0]||0,y:e[1]||0,width:0,height:0};for(var t,n,r=(e=0!==this.tension()?[e[0],e[1],...this._getTensionPoints(),e[e.length-2],e[e.length-1]]:this.points())[0],i=e[0],a=e[1],o=e[1],s=0;s<e.length/2;s++)t=e[2*s],n=e[2*s+1],r=Math.min(r,t),i=Math.max(i,t),a=Math.min(a,n),o=Math.max(o,n);return{x:r,y:a,width:i-r,height:o-a}}}_e.prototype.className="Line",_e.prototype._attrsAffectingSize=["points","bezier","tension"],l(_e),k.addGetterSetter(_e,"closed",!1),k.addGetterSetter(_e,"bezier",!1),k.addGetterSetter(_e,"tension",0,b()),k.addGetterSetter(_e,"points",[],function(){if(s.isUnminified)return function(e,t){return m._isArray(e)?e.forEach((function(e){m._isNumber(e)||m.warn('"'+t+'" attribute has non numeric element '+e+". Make sure that all elements are numbers.")})):m.warn(v(e)+' is a not valid value for "'+t+'" attribute. The value should be a array of numbers.'),e}}());class Se extends ie{constructor(e){super(e),this.dataArray=[],this.pathLength=0,this.dataArray=Se.parsePathData(this.data()),this.pathLength=0;for(var t=0;t<this.dataArray.length;++t)this.pathLength+=this.dataArray[t].pathLength;this.on("dataChange.konva",(function(){this.dataArray=Se.parsePathData(this.data()),this.pathLength=0;for(var e=0;e<this.dataArray.length;++e)this.pathLength+=this.dataArray[e].pathLength}))}_sceneFunc(e){var t=this.dataArray;e.beginPath();for(var n=!1,r=0;r<t.length;r++){var i=t[r].command,a=t[r].points;switch(i){case"L":e.lineTo(a[0],a[1]);break;case"M":e.moveTo(a[0],a[1]);break;case"C":e.bezierCurveTo(a[0],a[1],a[2],a[3],a[4],a[5]);break;case"Q":e.quadraticCurveTo(a[0],a[1],a[2],a[3]);break;case"A":var o=a[0],s=a[1],l=a[2],u=a[3],c=a[4],d=a[5],h=a[6],f=a[7],p=l>u?l:u,g=l>u?1:l/u,m=l>u?u/l:1;e.translate(o,s),e.rotate(h),e.scale(g,m),e.arc(0,0,p,c,c+d,1-f),e.scale(1/g,1/m),e.rotate(-h),e.translate(-o,-s);break;case"z":n=!0,e.closePath()}}n||this.hasFill()?e.fillStrokeShape(this):e.strokeShape(this)}getSelfRect(){var e=[];this.dataArray.forEach((function(t){if("A"===t.command){var n=t.points[4],r=t.points[5],i=t.points[4]+r,a=Math.PI/180;if(Math.abs(n-i)<a&&(a=Math.abs(n-i)),r<0)for(let r=n-a;r>i;r-=a){const n=Se.getPointOnEllipticalArc(t.points[0],t.points[1],t.points[2],t.points[3],r,0);e.push(n.x,n.y)}else for(let r=n+a;r<i;r+=a){const n=Se.getPointOnEllipticalArc(t.points[0],t.points[1],t.points[2],t.points[3],r,0);e.push(n.x,n.y)}}else if("C"===t.command)for(let n=0;n<=1;n+=.01){const r=Se.getPointOnCubicBezier(n,t.start.x,t.start.y,t.points[0],t.points[1],t.points[2],t.points[3],t.points[4],t.points[5]);e.push(r.x,r.y)}else e=e.concat(t.points)}));for(var t,n,r=e[0],i=e[0],a=e[1],o=e[1],s=0;s<e.length/2;s++)t=e[2*s],n=e[2*s+1],isNaN(t)||(r=Math.min(r,t),i=Math.max(i,t)),isNaN(n)||(a=Math.min(a,n),o=Math.max(o,n));return{x:Math.round(r),y:Math.round(a),width:Math.round(i-r),height:Math.round(o-a)}}getLength(){return this.pathLength}getPointAtLength(e){var t,n=0,r=this.dataArray.length;if(!r)return null;for(;n<r&&e>this.dataArray[n].pathLength;)e-=this.dataArray[n].pathLength,++n;if(n===r)return{x:(t=this.dataArray[n-1].points.slice(-2))[0],y:t[1]};if(e<.01)return{x:(t=this.dataArray[n].points.slice(0,2))[0],y:t[1]};var i=this.dataArray[n],a=i.points;switch(i.command){case"L":return Se.getPointOnLine(e,i.start.x,i.start.y,a[0],a[1]);case"C":return Se.getPointOnCubicBezier(e/i.pathLength,i.start.x,i.start.y,a[0],a[1],a[2],a[3],a[4],a[5]);case"Q":return Se.getPointOnQuadraticBezier(e/i.pathLength,i.start.x,i.start.y,a[0],a[1],a[2],a[3]);case"A":var o=a[0],s=a[1],l=a[2],u=a[3],c=a[4],d=a[5],h=a[6];return c+=d*e/i.pathLength,Se.getPointOnEllipticalArc(o,s,l,u,c,h)}return null}static getLineLength(e,t,n,r){return Math.sqrt((n-e)*(n-e)+(r-t)*(r-t))}static getPointOnLine(e,t,n,r,i,a,o){void 0===a&&(a=t),void 0===o&&(o=n);var s=(i-n)/(r-t+1e-8),l=Math.sqrt(e*e/(1+s*s));r<t&&(l*=-1);var u,c=s*l;if(r===t)u={x:a,y:o+c};else if((o-n)/(a-t+1e-8)===s)u={x:a+l,y:o+c};else{var d,h,f=this.getLineLength(t,n,r,i),p=(a-t)*(r-t)+(o-n)*(i-n);d=t+(p/=f*f)*(r-t),h=n+p*(i-n);var g=this.getLineLength(a,o,d,h),m=Math.sqrt(e*e-g*g);l=Math.sqrt(m*m/(1+s*s)),r<t&&(l*=-1),u={x:d+l,y:h+(c=s*l)}}return u}static getPointOnCubicBezier(e,t,n,r,i,a,o,s,l){function u(e){return e*e*e}function c(e){return 3*e*e*(1-e)}function d(e){return 3*e*(1-e)*(1-e)}function h(e){return(1-e)*(1-e)*(1-e)}return{x:s*u(e)+a*c(e)+r*d(e)+t*h(e),y:l*u(e)+o*c(e)+i*d(e)+n*h(e)}}static getPointOnQuadraticBezier(e,t,n,r,i,a,o){function s(e){return e*e}function l(e){return 2*e*(1-e)}function u(e){return(1-e)*(1-e)}return{x:a*s(e)+r*l(e)+t*u(e),y:o*s(e)+i*l(e)+n*u(e)}}static getPointOnEllipticalArc(e,t,n,r,i,a){var o=Math.cos(a),s=Math.sin(a),l=n*Math.cos(i),u=r*Math.sin(i);return{x:e+(l*o-u*s),y:t+(l*s+u*o)}}static parsePathData(e){if(!e)return[];var t=e,n=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];t=t.replace(new RegExp(" ","g"),",");for(var r=0;r<n.length;r++)t=t.replace(new RegExp(n[r],"g"),"|"+n[r]);var i,a=t.split("|"),o=[],s=[],l=0,u=0,c=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(r=1;r<a.length;r++){var d=a[r],h=d.charAt(0);for(d=d.slice(1),s.length=0;i=c.exec(d);)s.push(i[0]);for(var f=[],p=0,g=s.length;p<g;p++)if("00"!==s[p]){var m=parseFloat(s[p]);isNaN(m)?f.push(0):f.push(m)}else f.push(0,0);for(;f.length>0&&!isNaN(f[0]);){var v,y,b,w,x,_,S,C,k,P,E=null,T=[],R=l,I=u;switch(h){case"l":l+=f.shift(),u+=f.shift(),E="L",T.push(l,u);break;case"L":l=f.shift(),u=f.shift(),T.push(l,u);break;case"m":var z=f.shift(),A=f.shift();if(l+=z,u+=A,E="M",o.length>2&&"z"===o[o.length-1].command)for(var L=o.length-2;L>=0;L--)if("M"===o[L].command){l=o[L].points[0]+z,u=o[L].points[1]+A;break}T.push(l,u),h="l";break;case"M":l=f.shift(),u=f.shift(),E="M",T.push(l,u),h="L";break;case"h":l+=f.shift(),E="L",T.push(l,u);break;case"H":l=f.shift(),E="L",T.push(l,u);break;case"v":u+=f.shift(),E="L",T.push(l,u);break;case"V":u=f.shift(),E="L",T.push(l,u);break;case"C":T.push(f.shift(),f.shift(),f.shift(),f.shift()),l=f.shift(),u=f.shift(),T.push(l,u);break;case"c":T.push(l+f.shift(),u+f.shift(),l+f.shift(),u+f.shift()),l+=f.shift(),u+=f.shift(),E="C",T.push(l,u);break;case"S":y=l,b=u,"C"===(v=o[o.length-1]).command&&(y=l+(l-v.points[2]),b=u+(u-v.points[3])),T.push(y,b,f.shift(),f.shift()),l=f.shift(),u=f.shift(),E="C",T.push(l,u);break;case"s":y=l,b=u,"C"===(v=o[o.length-1]).command&&(y=l+(l-v.points[2]),b=u+(u-v.points[3])),T.push(y,b,l+f.shift(),u+f.shift()),l+=f.shift(),u+=f.shift(),E="C",T.push(l,u);break;case"Q":T.push(f.shift(),f.shift()),l=f.shift(),u=f.shift(),T.push(l,u);break;case"q":T.push(l+f.shift(),u+f.shift()),l+=f.shift(),u+=f.shift(),E="Q",T.push(l,u);break;case"T":y=l,b=u,"Q"===(v=o[o.length-1]).command&&(y=l+(l-v.points[0]),b=u+(u-v.points[1])),l=f.shift(),u=f.shift(),E="Q",T.push(y,b,l,u);break;case"t":y=l,b=u,"Q"===(v=o[o.length-1]).command&&(y=l+(l-v.points[0]),b=u+(u-v.points[1])),l+=f.shift(),u+=f.shift(),E="Q",T.push(y,b,l,u);break;case"A":w=f.shift(),x=f.shift(),_=f.shift(),S=f.shift(),C=f.shift(),k=l,P=u,l=f.shift(),u=f.shift(),E="A",T=this.convertEndpointToCenterParameterization(k,P,l,u,S,C,w,x,_);break;case"a":w=f.shift(),x=f.shift(),_=f.shift(),S=f.shift(),C=f.shift(),k=l,P=u,l+=f.shift(),u+=f.shift(),E="A",T=this.convertEndpointToCenterParameterization(k,P,l,u,S,C,w,x,_)}o.push({command:E||h,points:T,start:{x:R,y:I},pathLength:this.calcLength(R,I,E||h,T)})}"z"!==h&&"Z"!==h||o.push({command:"z",points:[],start:void 0,pathLength:0})}return o}static calcLength(e,t,n,r){var i,a,o,s,l=Se;switch(n){case"L":return l.getLineLength(e,t,r[0],r[1]);case"C":for(i=0,a=l.getPointOnCubicBezier(0,e,t,r[0],r[1],r[2],r[3],r[4],r[5]),s=.01;s<=1;s+=.01)o=l.getPointOnCubicBezier(s,e,t,r[0],r[1],r[2],r[3],r[4],r[5]),i+=l.getLineLength(a.x,a.y,o.x,o.y),a=o;return i;case"Q":for(i=0,a=l.getPointOnQuadraticBezier(0,e,t,r[0],r[1],r[2],r[3]),s=.01;s<=1;s+=.01)o=l.getPointOnQuadraticBezier(s,e,t,r[0],r[1],r[2],r[3]),i+=l.getLineLength(a.x,a.y,o.x,o.y),a=o;return i;case"A":i=0;var u=r[4],c=r[5],d=r[4]+c,h=Math.PI/180;if(Math.abs(u-d)<h&&(h=Math.abs(u-d)),a=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],u,0),c<0)for(s=u-h;s>d;s-=h)o=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],s,0),i+=l.getLineLength(a.x,a.y,o.x,o.y),a=o;else for(s=u+h;s<d;s+=h)o=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],s,0),i+=l.getLineLength(a.x,a.y,o.x,o.y),a=o;return o=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],d,0),i+=l.getLineLength(a.x,a.y,o.x,o.y)}return 0}static convertEndpointToCenterParameterization(e,t,n,r,i,a,o,s,l){var u=l*(Math.PI/180),c=Math.cos(u)*(e-n)/2+Math.sin(u)*(t-r)/2,d=-1*Math.sin(u)*(e-n)/2+Math.cos(u)*(t-r)/2,h=c*c/(o*o)+d*d/(s*s);h>1&&(o*=Math.sqrt(h),s*=Math.sqrt(h));var f=Math.sqrt((o*o*(s*s)-o*o*(d*d)-s*s*(c*c))/(o*o*(d*d)+s*s*(c*c)));i===a&&(f*=-1),isNaN(f)&&(f=0);var p=f*o*d/s,g=f*-s*c/o,m=(e+n)/2+Math.cos(u)*p-Math.sin(u)*g,v=(t+r)/2+Math.sin(u)*p+Math.cos(u)*g,y=function(e){return Math.sqrt(e[0]*e[0]+e[1]*e[1])},b=function(e,t){return(e[0]*t[0]+e[1]*t[1])/(y(e)*y(t))},w=function(e,t){return(e[0]*t[1]<e[1]*t[0]?-1:1)*Math.acos(b(e,t))},x=w([1,0],[(c-p)/o,(d-g)/s]),_=[(c-p)/o,(d-g)/s],S=[(-1*c-p)/o,(-1*d-g)/s],C=w(_,S);return b(_,S)<=-1&&(C=Math.PI),b(_,S)>=1&&(C=0),0===a&&C>0&&(C-=2*Math.PI),1===a&&C<0&&(C+=2*Math.PI),[m,v,o,s,x,C,u,a]}}Se.prototype.className="Path",Se.prototype._attrsAffectingSize=["data"],l(Se),k.addGetterSetter(Se,"data");class Ce extends _e{_sceneFunc(e){super._sceneFunc(e);var t=2*Math.PI,n=this.points(),r=n,i=0!==this.tension()&&n.length>4;i&&(r=this.getTensionPoints());var a,o,s=this.pointerLength(),l=n.length;if(i){const e=[r[r.length-4],r[r.length-3],r[r.length-2],r[r.length-1],n[l-2],n[l-1]],t=Se.calcLength(r[r.length-4],r[r.length-3],"C",e),i=Se.getPointOnQuadraticBezier(Math.min(1,1-s/t),e[0],e[1],e[2],e[3],e[4],e[5]);a=n[l-2]-i.x,o=n[l-1]-i.y}else a=n[l-2]-n[l-4],o=n[l-1]-n[l-3];var u=(Math.atan2(o,a)+t)%t,c=this.pointerWidth();this.pointerAtEnding()&&(e.save(),e.beginPath(),e.translate(n[l-2],n[l-1]),e.rotate(u),e.moveTo(0,0),e.lineTo(-s,c/2),e.lineTo(-s,-c/2),e.closePath(),e.restore(),this.__fillStroke(e)),this.pointerAtBeginning()&&(e.save(),e.beginPath(),e.translate(n[0],n[1]),i?(a=(r[0]+r[2])/2-n[0],o=(r[1]+r[3])/2-n[1]):(a=n[2]-n[0],o=n[3]-n[1]),e.rotate((Math.atan2(-o,-a)+t)%t),e.moveTo(0,0),e.lineTo(-s,c/2),e.lineTo(-s,-c/2),e.closePath(),e.restore(),this.__fillStroke(e))}__fillStroke(e){var t=this.dashEnabled();t&&(this.attrs.dashEnabled=!1,e.setLineDash([])),e.fillStrokeShape(this),t&&(this.attrs.dashEnabled=!0)}getSelfRect(){const e=super.getSelfRect(),t=this.pointerWidth()/2;return{x:e.x-t,y:e.y-t,width:e.width+2*t,height:e.height+2*t}}}Ce.prototype.className="Arrow",l(Ce),k.addGetterSetter(Ce,"pointerLength",10,b()),k.addGetterSetter(Ce,"pointerWidth",10,b()),k.addGetterSetter(Ce,"pointerAtBeginning",!1),k.addGetterSetter(Ce,"pointerAtEnding",!0);class ke extends ie{_sceneFunc(e){e.beginPath(),e.arc(0,0,this.attrs.radius||0,0,2*Math.PI,!1),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.radius()}getHeight(){return 2*this.radius()}setWidth(e){this.radius()!==e/2&&this.radius(e/2)}setHeight(e){this.radius()!==e/2&&this.radius(e/2)}}ke.prototype._centroid=!0,ke.prototype.className="Circle",ke.prototype._attrsAffectingSize=["radius"],l(ke),k.addGetterSetter(ke,"radius",0,b());class Pe extends ie{_sceneFunc(e){var t=this.radiusX(),n=this.radiusY();e.beginPath(),e.save(),t!==n&&e.scale(1,n/t),e.arc(0,0,t,0,2*Math.PI,!1),e.restore(),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.radiusX()}getHeight(){return 2*this.radiusY()}setWidth(e){this.radiusX(e/2)}setHeight(e){this.radiusY(e/2)}}Pe.prototype.className="Ellipse",Pe.prototype._centroid=!0,Pe.prototype._attrsAffectingSize=["radiusX","radiusY"],l(Pe),k.addComponentsGetterSetter(Pe,"radius",["x","y"]),k.addGetterSetter(Pe,"radiusX",0,b()),k.addGetterSetter(Pe,"radiusY",0,b());class Ee extends ie{constructor(e){super(e),this.on("imageChange.konva",(()=>{this._setImageLoad()})),this._setImageLoad()}_setImageLoad(){const e=this.image();e&&e.complete||e&&4===e.readyState||e&&e.addEventListener&&e.addEventListener("load",(()=>{this._requestDraw()}))}_useBufferCanvas(){return super._useBufferCanvas(!0)}_sceneFunc(e){const t=this.getWidth(),n=this.getHeight(),r=this.attrs.image;let i;if(r){const e=this.attrs.cropWidth,a=this.attrs.cropHeight;i=e&&a?[r,this.cropX(),this.cropY(),e,a,0,0,t,n]:[r,0,0,t,n]}(this.hasFill()||this.hasStroke())&&(e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)),r&&e.drawImage.apply(e,i)}_hitFunc(e){var t=this.width(),n=this.height();e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)}getWidth(){var e,t;return null!==(e=this.attrs.width)&&void 0!==e?e:null===(t=this.image())||void 0===t?void 0:t.width}getHeight(){var e,t;return null!==(e=this.attrs.height)&&void 0!==e?e:null===(t=this.image())||void 0===t?void 0:t.height}static fromURL(e,t){var n=m.createImageElement();n.onload=function(){var e=new Ee({image:n});t(e)},n.crossOrigin="Anonymous",n.src=e}}Ee.prototype.className="Image",l(Ee),k.addGetterSetter(Ee,"image"),k.addComponentsGetterSetter(Ee,"crop",["x","y","width","height"]),k.addGetterSetter(Ee,"cropX",0,b()),k.addGetterSetter(Ee,"cropY",0,b()),k.addGetterSetter(Ee,"cropWidth",0,b()),k.addGetterSetter(Ee,"cropHeight",0,b());var Te=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width","height"],Re=Te.length;class Ie extends ue{constructor(e){super(e),this.on("add.konva",(function(e){this._addListeners(e.child),this._sync()}))}getText(){return this.find("Text")[0]}getTag(){return this.find("Tag")[0]}_addListeners(e){var t,n=this,r=function(){n._sync()};for(t=0;t<Re;t++)e.on(Te[t]+"Change.konva",r)}getWidth(){return this.getText().width()}getHeight(){return this.getText().height()}_sync(){var e,t,n,r,i,a,o,s=this.getText(),l=this.getTag();if(s&&l){switch(e=s.width(),t=s.height(),n=l.pointerDirection(),r=l.pointerWidth(),o=l.pointerHeight(),i=0,a=0,n){case"up":i=e/2,a=-1*o;break;case"right":i=e+r,a=t/2;break;case"down":i=e/2,a=t+o;break;case"left":i=-1*r,a=t/2}l.setAttrs({x:-1*i,y:-1*a,width:e,height:t}),s.setAttrs({x:-1*i,y:-1*a})}}}Ie.prototype.className="Label",l(Ie);class ze extends ie{_sceneFunc(e){var t=this.width(),n=this.height(),r=this.pointerDirection(),i=this.pointerWidth(),a=this.pointerHeight(),o=this.cornerRadius();let s=0,l=0,u=0,c=0;"number"==typeof o?s=l=u=c=Math.min(o,t/2,n/2):(s=Math.min(o[0]||0,t/2,n/2),l=Math.min(o[1]||0,t/2,n/2),c=Math.min(o[2]||0,t/2,n/2),u=Math.min(o[3]||0,t/2,n/2)),e.beginPath(),e.moveTo(s,0),"up"===r&&(e.lineTo((t-i)/2,0),e.lineTo(t/2,-1*a),e.lineTo((t+i)/2,0)),e.lineTo(t-l,0),e.arc(t-l,l,l,3*Math.PI/2,0,!1),"right"===r&&(e.lineTo(t,(n-a)/2),e.lineTo(t+i,n/2),e.lineTo(t,(n+a)/2)),e.lineTo(t,n-c),e.arc(t-c,n-c,c,0,Math.PI/2,!1),"down"===r&&(e.lineTo((t+i)/2,n),e.lineTo(t/2,n+a),e.lineTo((t-i)/2,n)),e.lineTo(u,n),e.arc(u,n-u,u,Math.PI/2,Math.PI,!1),"left"===r&&(e.lineTo(0,(n+a)/2),e.lineTo(-1*i,n/2),e.lineTo(0,(n-a)/2)),e.lineTo(0,s),e.arc(s,s,s,Math.PI,3*Math.PI/2,!1),e.closePath(),e.fillStrokeShape(this)}getSelfRect(){var e=0,t=0,n=this.pointerWidth(),r=this.pointerHeight(),i=this.pointerDirection(),a=this.width(),o=this.height();return"up"===i?(t-=r,o+=r):"down"===i?o+=r:"left"===i?(e-=1.5*n,a+=n):"right"===i&&(a+=1.5*n),{x:e,y:t,width:a,height:o}}}ze.prototype.className="Tag",l(ze),k.addGetterSetter(ze,"pointerDirection","none"),k.addGetterSetter(ze,"pointerWidth",0,b()),k.addGetterSetter(ze,"pointerHeight",0,b()),k.addGetterSetter(ze,"cornerRadius",0,w(4));class Ae extends ie{_sceneFunc(e){var t=this.cornerRadius(),n=this.width(),r=this.height();if(e.beginPath(),t){let i=0,a=0,o=0,s=0;"number"==typeof t?i=a=o=s=Math.min(t,n/2,r/2):(i=Math.min(t[0]||0,n/2,r/2),a=Math.min(t[1]||0,n/2,r/2),s=Math.min(t[2]||0,n/2,r/2),o=Math.min(t[3]||0,n/2,r/2)),e.moveTo(i,0),e.lineTo(n-a,0),e.arc(n-a,a,a,3*Math.PI/2,0,!1),e.lineTo(n,r-s),e.arc(n-s,r-s,s,0,Math.PI/2,!1),e.lineTo(o,r),e.arc(o,r-o,o,Math.PI/2,Math.PI,!1),e.lineTo(0,i),e.arc(i,i,i,Math.PI,3*Math.PI/2,!1)}else e.rect(0,0,n,r);e.closePath(),e.fillStrokeShape(this)}}Ae.prototype.className="Rect",l(Ae),k.addGetterSetter(Ae,"cornerRadius",0,w(4));class Le extends ie{_sceneFunc(e){const t=this._getPoints();e.beginPath(),e.moveTo(t[0].x,t[0].y);for(var n=1;n<t.length;n++)e.lineTo(t[n].x,t[n].y);e.closePath(),e.fillStrokeShape(this)}_getPoints(){const e=this.attrs.sides,t=this.attrs.radius||0,n=[];for(var r=0;r<e;r++)n.push({x:t*Math.sin(2*r*Math.PI/e),y:-1*t*Math.cos(2*r*Math.PI/e)});return n}getSelfRect(){const e=this._getPoints();var t=e[0].x,n=e[0].y,r=e[0].x,i=e[0].y;return e.forEach((e=>{t=Math.min(t,e.x),n=Math.max(n,e.x),r=Math.min(r,e.y),i=Math.max(i,e.y)})),{x:t,y:r,width:n-t,height:i-r}}getWidth(){return 2*this.radius()}getHeight(){return 2*this.radius()}setWidth(e){this.radius(e/2)}setHeight(e){this.radius(e/2)}}Le.prototype.className="RegularPolygon",Le.prototype._centroid=!0,Le.prototype._attrsAffectingSize=["radius"],l(Le),k.addGetterSetter(Le,"radius",0,b()),k.addGetterSetter(Le,"sides",0,b());var Me=2*Math.PI;class De extends ie{_sceneFunc(e){e.beginPath(),e.arc(0,0,this.innerRadius(),0,Me,!1),e.moveTo(this.outerRadius(),0),e.arc(0,0,this.outerRadius(),Me,0,!0),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.outerRadius()}getHeight(){return 2*this.outerRadius()}setWidth(e){this.outerRadius(e/2)}setHeight(e){this.outerRadius(e/2)}}De.prototype.className="Ring",De.prototype._centroid=!0,De.prototype._attrsAffectingSize=["innerRadius","outerRadius"],l(De),k.addGetterSetter(De,"innerRadius",0,b()),k.addGetterSetter(De,"outerRadius",0,b());class Ne extends ie{constructor(e){super(e),this._updated=!0,this.anim=new de((()=>{var e=this._updated;return this._updated=!1,e})),this.on("animationChange.konva",(function(){this.frameIndex(0)})),this.on("frameIndexChange.konva",(function(){this._updated=!0})),this.on("frameRateChange.konva",(function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())}))}_sceneFunc(e){var t=this.animation(),n=this.frameIndex(),r=4*n,i=this.animations()[t],a=this.frameOffsets(),o=i[r+0],s=i[r+1],l=i[r+2],u=i[r+3],c=this.image();if((this.hasFill()||this.hasStroke())&&(e.beginPath(),e.rect(0,0,l,u),e.closePath(),e.fillStrokeShape(this)),c)if(a){var d=a[t],h=2*n;e.drawImage(c,o,s,l,u,d[h+0],d[h+1],l,u)}else e.drawImage(c,o,s,l,u,0,0,l,u)}_hitFunc(e){var t=this.animation(),n=this.frameIndex(),r=4*n,i=this.animations()[t],a=this.frameOffsets(),o=i[r+2],s=i[r+3];if(e.beginPath(),a){var l=a[t],u=2*n;e.rect(l[u+0],l[u+1],o,s)}else e.rect(0,0,o,s);e.closePath(),e.fillShape(this)}_useBufferCanvas(){return super._useBufferCanvas(!0)}_setInterval(){var e=this;this.interval=setInterval((function(){e._updateIndex()}),1e3/this.frameRate())}start(){if(!this.isRunning()){var e=this.getLayer();this.anim.setLayers(e),this._setInterval(),this.anim.start()}}stop(){this.anim.stop(),clearInterval(this.interval)}isRunning(){return this.anim.isRunning()}_updateIndex(){var e=this.frameIndex(),t=this.animation();e<this.animations()[t].length/4-1?this.frameIndex(e+1):this.frameIndex(0)}}Ne.prototype.className="Sprite",l(Ne),k.addGetterSetter(Ne,"animation"),k.addGetterSetter(Ne,"animations"),k.addGetterSetter(Ne,"frameOffsets"),k.addGetterSetter(Ne,"image"),k.addGetterSetter(Ne,"frameIndex",0,b()),k.addGetterSetter(Ne,"frameRate",17,b()),k.backCompat(Ne,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"});class Fe extends ie{_sceneFunc(e){var t=this.innerRadius(),n=this.outerRadius(),r=this.numPoints();e.beginPath(),e.moveTo(0,0-n);for(var i=1;i<2*r;i++){var a=i%2==0?n:t,o=a*Math.sin(i*Math.PI/r),s=-1*a*Math.cos(i*Math.PI/r);e.lineTo(o,s)}e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.outerRadius()}getHeight(){return 2*this.outerRadius()}setWidth(e){this.outerRadius(e/2)}setHeight(e){this.outerRadius(e/2)}}function Ue(e){return Array.from(e)}Fe.prototype.className="Star",Fe.prototype._centroid=!0,Fe.prototype._attrsAffectingSize=["innerRadius","outerRadius"],l(Fe),k.addGetterSetter(Fe,"numPoints",5,b()),k.addGetterSetter(Fe,"innerRadius",0,b()),k.addGetterSetter(Fe,"outerRadius",0,b());var Oe,We=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],Ge=We.length;function Be(){return Oe||(Oe=m.createCanvasElement().getContext("2d"))}class je extends ie{constructor(e){super(function(e){return(e=e||{}).fillLinearGradientColorStops||e.fillRadialGradientColorStops||e.fillPatternImage||(e.fill=e.fill||"black"),e}(e)),this._partialTextX=0,this._partialTextY=0;for(var t=0;t<Ge;t++)this.on(We[t]+"Change.konva",this._setTextData);this._setTextData()}_sceneFunc(e){var t=this.textArr,n=t.length;if(this.text()){var r,i=this.padding(),a=this.fontSize(),o=this.lineHeight()*a,s=this.verticalAlign(),l=0,u=this.align(),c=this.getWidth(),d=this.letterSpacing(),h=this.fill(),f=this.textDecoration(),p=-1!==f.indexOf("underline"),g=-1!==f.indexOf("line-through"),m=0,v=(m=o/2,0),y=0;for(e.setAttr("font",this._getContextFont()),e.setAttr("textBaseline","middle"),e.setAttr("textAlign","left"),"middle"===s?l=(this.getHeight()-n*o-2*i)/2:"bottom"===s&&(l=this.getHeight()-n*o-2*i),e.translate(i,l+i),r=0;r<n;r++){v=0,y=0;var b,w,x,_=t[r],S=_.text,C=_.width,k=r!==n-1;if(e.save(),"right"===u?v+=c-C-2*i:"center"===u&&(v+=(c-C-2*i)/2),p&&(e.save(),e.beginPath(),e.moveTo(v,m+y+Math.round(a/2)),w=0===(b=S.split(" ").length-1),x="justify"===u&&k&&!w?c-2*i:C,e.lineTo(v+Math.round(x),m+y+Math.round(a/2)),e.lineWidth=a/15,e.strokeStyle=h,e.stroke(),e.restore()),g&&(e.save(),e.beginPath(),e.moveTo(v,m+y),w=0===(b=S.split(" ").length-1),x="justify"===u&&k&&!w?c-2*i:C,e.lineTo(v+Math.round(x),m+y),e.lineWidth=a/15,e.strokeStyle=h,e.stroke(),e.restore()),0!==d||"justify"===u){b=S.split(" ").length-1;for(var P=Ue(S),E=0;E<P.length;E++){var T=P[E];" "===T&&r!==n-1&&"justify"===u&&(v+=(c-2*i-C)/b),this._partialTextX=v,this._partialTextY=m+y,this._partialText=T,e.fillStrokeShape(this),v+=this.measureSize(T).width+d}}else this._partialTextX=v,this._partialTextY=m+y,this._partialText=S,e.fillStrokeShape(this);e.restore(),n>1&&(m+=o)}}}_hitFunc(e){var t=this.getWidth(),n=this.getHeight();e.beginPath(),e.rect(0,0,t,n),e.closePath(),e.fillStrokeShape(this)}setText(e){var t=m._isString(e)?e:null==e?"":e+"";return this._setAttr("text",t),this}getWidth(){return"auto"===this.attrs.width||void 0===this.attrs.width?this.getTextWidth()+2*this.padding():this.attrs.width}getHeight(){return"auto"===this.attrs.height||void 0===this.attrs.height?this.fontSize()*this.textArr.length*this.lineHeight()+2*this.padding():this.attrs.height}getTextWidth(){return this.textWidth}getTextHeight(){return m.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight}measureSize(e){var t,n=Be(),r=this.fontSize();return n.save(),n.font=this._getContextFont(),t=n.measureText(e),n.restore(),{width:t.width,height:r}}_getContextFont(){return this.fontStyle()+" "+this.fontVariant()+" "+this.fontSize()+"px "+this.fontFamily().split(",").map((e=>{const t=(e=e.trim()).indexOf(" ")>=0,n=e.indexOf('"')>=0||e.indexOf("'")>=0;return t&&!n&&(e=`"${e}"`),e})).join(", ")}_addTextLine(e){"justify"===this.align()&&(e=e.trim());var t=this._getTextWidth(e);return this.textArr.push({text:e,width:t})}_getTextWidth(e){var t=this.letterSpacing(),n=e.length;return Be().measureText(e).width+(n?t*(n-1):0)}_setTextData(){var e=this.text().split("\n"),t=+this.fontSize(),n=0,r=this.lineHeight()*t,i=this.attrs.width,a=this.attrs.height,o="auto"!==i&&void 0!==i,s="auto"!==a&&void 0!==a,l=this.padding(),u=i-2*l,c=a-2*l,d=0,h=this.wrap(),f="none"!==h,p="char"!==h&&f,g=this.ellipsis();this.textArr=[],Be().font=this._getContextFont();for(var m=g?this._getTextWidth("…"):0,v=0,y=e.length;v<y;++v){var b=e[v],w=this._getTextWidth(b);if(o&&w>u)for(;b.length>0;){for(var x=0,_=b.length,S="",C=0;x<_;){var k=x+_>>>1,P=b.slice(0,k+1),E=this._getTextWidth(P)+m;E<=u?(x=k+1,S=P,C=E):_=k}if(!S)break;if(p){var T,R=b[S.length];(T=(" "===R||"-"===R)&&C<=u?S.length:Math.max(S.lastIndexOf(" "),S.lastIndexOf("-"))+1)>0&&(x=T,S=S.slice(0,x),C=this._getTextWidth(S))}if(S=S.trimRight(),this._addTextLine(S),n=Math.max(n,C),d+=r,!f||s&&d+r>c){var I=this.textArr[this.textArr.length-1];if(I)if(g)this._getTextWidth(I.text+"…")<u||(I.text=I.text.slice(0,I.text.length-3)),this.textArr.splice(this.textArr.length-1,1),this._addTextLine(I.text+"…");break}if((b=(b=b.slice(x)).trimLeft()).length>0&&(w=this._getTextWidth(b))<=u){this._addTextLine(b),d+=r,n=Math.max(n,w);break}}else this._addTextLine(b),d+=r,n=Math.max(n,w);if(s&&d+r>c)break}this.textHeight=t,this.textWidth=n}getStrokeScaleEnabled(){return!0}}je.prototype._fillFunc=function(e){e.fillText(this._partialText,this._partialTextX,this._partialTextY)},je.prototype._strokeFunc=function(e){e.strokeText(this._partialText,this._partialTextX,this._partialTextY)},je.prototype.className="Text",je.prototype._attrsAffectingSize=["text","fontSize","padding","wrap","lineHeight","letterSpacing"],l(je),k.overWriteSetter(je,"width",x()),k.overWriteSetter(je,"height",x()),k.addGetterSetter(je,"fontFamily","Arial"),k.addGetterSetter(je,"fontSize",12,b()),k.addGetterSetter(je,"fontStyle","normal"),k.addGetterSetter(je,"fontVariant","normal"),k.addGetterSetter(je,"padding",0,b()),k.addGetterSetter(je,"align","left"),k.addGetterSetter(je,"verticalAlign","top"),k.addGetterSetter(je,"lineHeight",1,b()),k.addGetterSetter(je,"wrap","word"),k.addGetterSetter(je,"ellipsis",!1,C()),k.addGetterSetter(je,"letterSpacing",0,b()),k.addGetterSetter(je,"text","",_()),k.addGetterSetter(je,"textDecoration","");function He(e){e.fillText(this.partialText,0,0)}function Ye(e){e.strokeText(this.partialText,0,0)}class qe extends ie{constructor(e){super(e),this.dummyCanvas=m.createCanvasElement(),this.dataArray=[],this.dataArray=Se.parsePathData(this.attrs.data),this.on("dataChange.konva",(function(){this.dataArray=Se.parsePathData(this.attrs.data),this._setTextData()})),this.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva",this._setTextData),this._setTextData()}_sceneFunc(e){e.setAttr("font",this._getContextFont()),e.setAttr("textBaseline",this.textBaseline()),e.setAttr("textAlign","left"),e.save();var t=this.textDecoration(),n=this.fill(),r=this.fontSize(),i=this.glyphInfo;"underline"===t&&e.beginPath();for(var a=0;a<i.length;a++){e.save();var o=i[a].p0;e.translate(o.x,o.y),e.rotate(i[a].rotation),this.partialText=i[a].text,e.fillStrokeShape(this),"underline"===t&&(0===a&&e.moveTo(0,r/2+1),e.lineTo(r,r/2+1)),e.restore()}"underline"===t&&(e.strokeStyle=n,e.lineWidth=r/20,e.stroke()),e.restore()}_hitFunc(e){e.beginPath();var t=this.glyphInfo;if(t.length>=1){var n=t[0].p0;e.moveTo(n.x,n.y)}for(var r=0;r<t.length;r++){var i=t[r].p1;e.lineTo(i.x,i.y)}e.setAttr("lineWidth",this.fontSize()),e.setAttr("strokeStyle",this.colorKey),e.stroke()}getTextWidth(){return this.textWidth}getTextHeight(){return m.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight}setText(e){return je.prototype.setText.call(this,e)}_getContextFont(){return je.prototype._getContextFont.call(this)}_getTextSize(e){var t=this.dummyCanvas.getContext("2d");t.save(),t.font=this._getContextFont();var n=t.measureText(e);return t.restore(),{width:n.width,height:parseInt(this.attrs.fontSize,10)}}_setTextData(){var e=this,t=this._getTextSize(this.attrs.text),n=this.letterSpacing(),r=this.align(),i=this.kerningFunc();this.textWidth=t.width,this.textHeight=t.height;var a=Math.max(this.textWidth+((this.attrs.text||"").length-1)*n,0);this.glyphInfo=[];for(var o=0,s=0;s<e.dataArray.length;s++)e.dataArray[s].pathLength>0&&(o+=e.dataArray[s].pathLength);var l=0;"center"===r&&(l=Math.max(0,o/2-a/2)),"right"===r&&(l=Math.max(0,o-a));for(var u,c,d,h=Ue(this.text()),f=this.text().split(" ").length-1,p=-1,g=0,m=function(){g=0;for(var t=e.dataArray,n=p+1;n<t.length;n++){if(t[n].pathLength>0)return p=n,t[n];"M"===t[n].command&&(u={x:t[n].points[0],y:t[n].points[1]})}return{}},v=function(t){var i=e._getTextSize(t).width+n;" "===t&&"justify"===r&&(i+=(o-a)/f);var s=0,l=0;for(c=void 0;Math.abs(i-s)/i>.01&&l<20;){l++;for(var h=s;void 0===d;)(d=m())&&h+d.pathLength<i&&(h+=d.pathLength,d=void 0);if(d==={}||void 0===u)return;var p=!1;switch(d.command){case"L":Se.getLineLength(u.x,u.y,d.points[0],d.points[1])>i?c=Se.getPointOnLine(i,u.x,u.y,d.points[0],d.points[1],u.x,u.y):d=void 0;break;case"A":var v=d.points[4],y=d.points[5],b=d.points[4]+y;0===g?g=v+1e-8:i>s?g+=Math.PI/180*y/Math.abs(y):g-=Math.PI/360*y/Math.abs(y),(y<0&&g<b||y>=0&&g>b)&&(g=b,p=!0),c=Se.getPointOnEllipticalArc(d.points[0],d.points[1],d.points[2],d.points[3],g,d.points[6]);break;case"C":0===g?g=i>d.pathLength?1e-8:i/d.pathLength:i>s?g+=(i-s)/d.pathLength/2:g=Math.max(g-(s-i)/d.pathLength/2,0),g>1&&(g=1,p=!0),c=Se.getPointOnCubicBezier(g,d.start.x,d.start.y,d.points[0],d.points[1],d.points[2],d.points[3],d.points[4],d.points[5]);break;case"Q":0===g?g=i/d.pathLength:i>s?g+=(i-s)/d.pathLength:g-=(s-i)/d.pathLength,g>1&&(g=1,p=!0),c=Se.getPointOnQuadraticBezier(g,d.start.x,d.start.y,d.points[0],d.points[1],d.points[2],d.points[3])}void 0!==c&&(s=Se.getLineLength(u.x,u.y,c.x,c.y)),p&&(p=!1,d=void 0)}},y=l/(e._getTextSize("C").width+n)-1,b=0;b<y&&(v("C"),void 0!==u&&void 0!==c);b++)u=c;for(var w=0;w<h.length&&(v(h[w]),void 0!==u&&void 0!==c);w++){var x=Se.getLineLength(u.x,u.y,c.x,c.y),_=0;if(i)try{_=i(h[w-1],h[w])*this.fontSize()}catch(e){_=0}u.x+=_,c.x+=_,this.textWidth+=_;var S=Se.getPointOnLine(_+x/2,u.x,u.y,c.x,c.y),C=Math.atan2(c.y-u.y,c.x-u.x);this.glyphInfo.push({transposeX:S.x,transposeY:S.y,text:h[w],rotation:C,p0:u,p1:c}),u=c}}getSelfRect(){if(!this.glyphInfo.length)return{x:0,y:0,width:0,height:0};var e=[];this.glyphInfo.forEach((function(t){e.push(t.p0.x),e.push(t.p0.y),e.push(t.p1.x),e.push(t.p1.y)}));for(var t,n,r=e[0]||0,i=e[0]||0,a=e[1]||0,o=e[1]||0,s=0;s<e.length/2;s++)t=e[2*s],n=e[2*s+1],r=Math.min(r,t),i=Math.max(i,t),a=Math.min(a,n),o=Math.max(o,n);var l=this.fontSize();return{x:r-l/2,y:a-l/2,width:i-r+l,height:o-a+l}}}qe.prototype._fillFunc=He,qe.prototype._strokeFunc=Ye,qe.prototype._fillFuncHit=He,qe.prototype._strokeFuncHit=Ye,qe.prototype.className="TextPath",qe.prototype._attrsAffectingSize=["text","fontSize","data"],l(qe),k.addGetterSetter(qe,"data"),k.addGetterSetter(qe,"fontFamily","Arial"),k.addGetterSetter(qe,"fontSize",12,b()),k.addGetterSetter(qe,"fontStyle","normal"),k.addGetterSetter(qe,"align","left"),k.addGetterSetter(qe,"letterSpacing",0,b()),k.addGetterSetter(qe,"textBaseline","middle"),k.addGetterSetter(qe,"fontVariant","normal"),k.addGetterSetter(qe,"text",""),k.addGetterSetter(qe,"textDecoration",null),k.addGetterSetter(qe,"kerningFunc",null);var Qe=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].map((e=>e+".tr-konva")).join(" "),Ve=["widthChange","heightChange","scaleXChange","scaleYChange","skewXChange","skewYChange","rotationChange","offsetXChange","offsetYChange","transformsEnabledChange","strokeWidthChange"],Xe={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135};const $e="ontouchstart"in s._global;var Ke=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];function Je(e,t,n){const r=n.x+(e.x-n.x)*Math.cos(t)-(e.y-n.y)*Math.sin(t),i=n.y+(e.x-n.x)*Math.sin(t)+(e.y-n.y)*Math.cos(t);return Object.assign(Object.assign({},e),{rotation:e.rotation+t,x:r,y:i})}function Ze(e,t){const n=function(e){return{x:e.x+e.width/2*Math.cos(e.rotation)+e.height/2*Math.sin(-e.rotation),y:e.y+e.height/2*Math.cos(e.rotation)+e.width/2*Math.sin(e.rotation)}}(e);return Je(e,t,n)}class et extends ue{constructor(e){super(e),this._transforming=!1,this._createElements(),this._handleMouseMove=this._handleMouseMove.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this.update=this.update.bind(this),this.on(Qe,this.update),this.getNode()&&this.update()}attachTo(e){return this.setNode(e),this}setNode(e){return m.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."),this.setNodes([e])}getNode(){return this._nodes&&this._nodes[0]}_getEventNamespace(){return"tr-konva"+this._id}setNodes(e=[]){return this._nodes&&this._nodes.length&&this.detach(),this._nodes=e,1===e.length&&this.useSingleNodeRotation()?this.rotation(e[0].getAbsoluteRotation()):this.rotation(0),this._nodes.forEach((e=>{const t=()=>{1===this.nodes().length&&this.useSingleNodeRotation()&&this.rotation(this.nodes()[0].getAbsoluteRotation()),this._resetTransformCache(),this._transforming||this.isDragging()||this.update()},n=e._attrsAffectingSize.map((e=>e+"Change."+this._getEventNamespace())).join(" ");e.on(n,t),e.on(Ve.map((e=>e+`.${this._getEventNamespace()}`)).join(" "),t),e.on(`absoluteTransformChange.${this._getEventNamespace()}`,t),this._proxyDrag(e)})),this._resetTransformCache(),!!this.findOne(".top-left")&&this.update(),this}_proxyDrag(e){let t;e.on(`dragstart.${this._getEventNamespace()}`,(n=>{t=e.getAbsolutePosition(),this.isDragging()||e===this.findOne(".back")||this.startDrag(n,!1)})),e.on(`dragmove.${this._getEventNamespace()}`,(n=>{if(!t)return;const r=e.getAbsolutePosition(),i=r.x-t.x,a=r.y-t.y;this.nodes().forEach((t=>{if(t===e)return;if(t.isDragging())return;const r=t.getAbsolutePosition();t.setAbsolutePosition({x:r.x+i,y:r.y+a}),t.startDrag(n)})),t=null}))}getNodes(){return this._nodes||[]}getActiveAnchor(){return this._movingAnchorName}detach(){this._nodes&&this._nodes.forEach((e=>{e.off("."+this._getEventNamespace())})),this._nodes=[],this._resetTransformCache()}_resetTransformCache(){this._clearCache("nodesRect"),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")}_getNodeRect(){return this._getCache("nodesRect",this.__getNodeRect)}__getNodeShape(e,t=this.rotation(),n){var r=e.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),i=e.getAbsoluteScale(n),a=e.getAbsolutePosition(n),o=r.x*i.x-e.offsetX()*i.x,l=r.y*i.y-e.offsetY()*i.y;const u=(s.getAngle(e.getAbsoluteRotation())+2*Math.PI)%(2*Math.PI);return Je({x:a.x+o*Math.cos(u)+l*Math.sin(-u),y:a.y+l*Math.cos(u)+o*Math.sin(u),width:r.width*i.x,height:r.height*i.y,rotation:u},-s.getAngle(t),{x:0,y:0})}__getNodeRect(){if(!this.getNode())return{x:-1e8,y:-1e8,width:0,height:0,rotation:0};const e=[];this.nodes().map((t=>{const n=t.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()});var r=[{x:n.x,y:n.y},{x:n.x+n.width,y:n.y},{x:n.x+n.width,y:n.y+n.height},{x:n.x,y:n.y+n.height}],i=t.getAbsoluteTransform();r.forEach((function(t){var n=i.point(t);e.push(n)}))}));const t=new u;var n,r,i,a;t.rotate(-s.getAngle(this.rotation())),e.forEach((function(e){var o=t.point(e);void 0===n&&(n=i=o.x,r=a=o.y),n=Math.min(n,o.x),r=Math.min(r,o.y),i=Math.max(i,o.x),a=Math.max(a,o.y)})),t.invert();const o=t.point({x:n,y:r});return{x:o.x,y:o.y,width:i-n,height:a-r,rotation:s.getAngle(this.rotation())}}getX(){return this._getNodeRect().x}getY(){return this._getNodeRect().y}getWidth(){return this._getNodeRect().width}getHeight(){return this._getNodeRect().height}_createElements(){this._createBack(),Ke.forEach(function(e){this._createAnchor(e)}.bind(this)),this._createAnchor("rotater")}_createAnchor(e){var t=new Ae({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:e+" _anchor",dragDistance:0,draggable:!0,hitStrokeWidth:$e?10:"auto"}),n=this;t.on("mousedown touchstart",(function(e){n._handleMouseDown(e)})),t.on("dragstart",(e=>{t.stopDrag(),e.cancelBubble=!0})),t.on("dragend",(e=>{e.cancelBubble=!0})),t.on("mouseenter",(()=>{var n=s.getAngle(this.rotation()),r=function(e,t){if("rotater"===e)return"crosshair";t+=m.degToRad(Xe[e]||0);var n=(m.radToDeg(t)%360+360)%360;return m._inRange(n,337.5,360)||m._inRange(n,0,22.5)?"ns-resize":m._inRange(n,22.5,67.5)?"nesw-resize":m._inRange(n,67.5,112.5)?"ew-resize":m._inRange(n,112.5,157.5)?"nwse-resize":m._inRange(n,157.5,202.5)?"ns-resize":m._inRange(n,202.5,247.5)?"nesw-resize":m._inRange(n,247.5,292.5)?"ew-resize":m._inRange(n,292.5,337.5)?"nwse-resize":(m.error("Transformer has unknown angle for cursor detection: "+n),"pointer")}(e,n);t.getStage().content&&(t.getStage().content.style.cursor=r),this._cursorChange=!0})),t.on("mouseout",(()=>{t.getStage().content&&(t.getStage().content.style.cursor=""),this._cursorChange=!1})),this.add(t)}_createBack(){var e=new ie({name:"back",width:0,height:0,draggable:!0,sceneFunc(e){var t=this.getParent(),n=t.padding();e.beginPath(),e.rect(-n,-n,this.width()+2*n,this.height()+2*n),e.moveTo(this.width()/2,-n),t.rotateEnabled()&&e.lineTo(this.width()/2,-t.rotateAnchorOffset()*m._sign(this.height())-n),e.fillStrokeShape(this)},hitFunc:(e,t)=>{if(this.shouldOverdrawWholeArea()){var n=this.padding();e.beginPath(),e.rect(-n,-n,t.width()+2*n,t.height()+2*n),e.fillStrokeShape(t)}}});this.add(e),this._proxyDrag(e),e.on("dragstart",(e=>{e.cancelBubble=!0})),e.on("dragmove",(e=>{e.cancelBubble=!0})),e.on("dragend",(e=>{e.cancelBubble=!0})),this.on("dragmove",(e=>{this.update()}))}_handleMouseDown(e){this._movingAnchorName=e.target.name().split(" ")[0];var t=this._getNodeRect(),n=t.width,r=t.height,i=Math.sqrt(Math.pow(n,2)+Math.pow(r,2));this.sin=Math.abs(r/i),this.cos=Math.abs(n/i),"undefined"!=typeof window&&(window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0)),this._transforming=!0;var a=e.target.getAbsolutePosition(),o=e.target.getStage().getPointerPosition();this._anchorDragOffset={x:o.x-a.x,y:o.y-a.y},this._fire("transformstart",{evt:e,target:this.getNode()}),this._nodes.forEach((t=>{t._fire("transformstart",{evt:e,target:t})}))}_handleMouseMove(e){var t,n,r,i=this.findOne("."+this._movingAnchorName),a=i.getStage();a.setPointersPositions(e);const o=a.getPointerPosition();let l={x:o.x-this._anchorDragOffset.x,y:o.y-this._anchorDragOffset.y};const u=i.getAbsolutePosition();this.anchorDragBoundFunc()&&(l=this.anchorDragBoundFunc()(u,l,e)),i.setAbsolutePosition(l);const c=i.getAbsolutePosition();if(u.x!==c.x||u.y!==c.y)if("rotater"!==this._movingAnchorName){var d=this.keepRatio()||e.shiftKey,h=this.centeredScaling()||e.altKey;if("top-left"===this._movingAnchorName){if(d){var f=h?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-right").x(),y:this.findOne(".bottom-right").y()};r=Math.sqrt(Math.pow(f.x-i.x(),2)+Math.pow(f.y-i.y(),2));var p=this.findOne(".top-left").x()>f.x?-1:1,g=this.findOne(".top-left").y()>f.y?-1:1;t=r*this.cos*p,n=r*this.sin*g,this.findOne(".top-left").x(f.x-t),this.findOne(".top-left").y(f.y-n)}}else if("top-center"===this._movingAnchorName)this.findOne(".top-left").y(i.y());else if("top-right"===this._movingAnchorName){if(d){f=h?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-left").x(),y:this.findOne(".bottom-left").y()};r=Math.sqrt(Math.pow(i.x()-f.x,2)+Math.pow(f.y-i.y(),2));p=this.findOne(".top-right").x()<f.x?-1:1,g=this.findOne(".top-right").y()>f.y?-1:1;t=r*this.cos*p,n=r*this.sin*g,this.findOne(".top-right").x(f.x+t),this.findOne(".top-right").y(f.y-n)}var m=i.position();this.findOne(".top-left").y(m.y),this.findOne(".bottom-right").x(m.x)}else if("middle-left"===this._movingAnchorName)this.findOne(".top-left").x(i.x());else if("middle-right"===this._movingAnchorName)this.findOne(".bottom-right").x(i.x());else if("bottom-left"===this._movingAnchorName){if(d){f=h?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-right").x(),y:this.findOne(".top-right").y()};r=Math.sqrt(Math.pow(f.x-i.x(),2)+Math.pow(i.y()-f.y,2));p=f.x<i.x()?-1:1,g=i.y()<f.y?-1:1;t=r*this.cos*p,n=r*this.sin*g,i.x(f.x-t),i.y(f.y+n)}m=i.position(),this.findOne(".top-left").x(m.x),this.findOne(".bottom-right").y(m.y)}else if("bottom-center"===this._movingAnchorName)this.findOne(".bottom-right").y(i.y());else if("bottom-right"===this._movingAnchorName){if(d){f=h?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-left").x(),y:this.findOne(".top-left").y()};r=Math.sqrt(Math.pow(i.x()-f.x,2)+Math.pow(i.y()-f.y,2));p=this.findOne(".bottom-right").x()<f.x?-1:1,g=this.findOne(".bottom-right").y()<f.y?-1:1;t=r*this.cos*p,n=r*this.sin*g,this.findOne(".bottom-right").x(f.x+t),this.findOne(".bottom-right").y(f.y+n)}}else console.error(new Error("Wrong position argument of selection resizer: "+this._movingAnchorName));if(h=this.centeredScaling()||e.altKey){var v=this.findOne(".top-left"),y=this.findOne(".bottom-right"),b=v.x(),w=v.y(),x=this.getWidth()-y.x(),_=this.getHeight()-y.y();y.move({x:-b,y:-w}),v.move({x:x,y:_})}var S=this.findOne(".top-left").getAbsolutePosition();t=S.x,n=S.y;var C=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),k=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodesInto({x:t,y:n,width:C,height:k,rotation:s.getAngle(this.rotation())},e)}else{var P=this._getNodeRect();t=i.x()-P.width/2,n=-i.y()+P.height/2;let r=Math.atan2(-n,t)+Math.PI/2;P.height<0&&(r-=Math.PI);const a=s.getAngle(this.rotation())+r,o=s.getAngle(this.rotationSnapTolerance()),l=function(e,t,n){let r=t;for(let i=0;i<e.length;i++){const a=s.getAngle(e[i]),o=Math.abs(a-t)%(2*Math.PI);Math.min(o,2*Math.PI-o)<n&&(r=a)}return r}(this.rotationSnaps(),a,o),u=Ze(P,l-P.rotation);this._fitNodesInto(u,e)}}_handleMouseUp(e){this._removeEvents(e)}getAbsoluteTransform(){return this.getTransform()}_removeEvents(e){if(this._transforming){this._transforming=!1,"undefined"!=typeof window&&(window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0));var t=this.getNode();this._fire("transformend",{evt:e,target:t}),t&&this._nodes.forEach((t=>{t._fire("transformend",{evt:e,target:t})})),this._movingAnchorName=null}}_fitNodesInto(e,t){var n=this._getNodeRect();if(m._inRange(e.width,2*-this.padding()-1,1))return void this.update();if(m._inRange(e.height,2*-this.padding()-1,1))return void this.update();const r=this.flipEnabled();var i=new u;if(i.rotate(s.getAngle(this.rotation())),this._movingAnchorName&&e.width<0&&this._movingAnchorName.indexOf("left")>=0){const t=i.point({x:2*-this.padding(),y:0});if(e.x+=t.x,e.y+=t.y,e.width+=2*this.padding(),this._movingAnchorName=this._movingAnchorName.replace("left","right"),this._anchorDragOffset.x-=t.x,this._anchorDragOffset.y-=t.y,!r)return void this.update()}else if(this._movingAnchorName&&e.width<0&&this._movingAnchorName.indexOf("right")>=0){const t=i.point({x:2*this.padding(),y:0});if(this._movingAnchorName=this._movingAnchorName.replace("right","left"),this._anchorDragOffset.x-=t.x,this._anchorDragOffset.y-=t.y,e.width+=2*this.padding(),!r)return void this.update()}if(this._movingAnchorName&&e.height<0&&this._movingAnchorName.indexOf("top")>=0){const t=i.point({x:0,y:2*-this.padding()});if(e.x+=t.x,e.y+=t.y,this._movingAnchorName=this._movingAnchorName.replace("top","bottom"),this._anchorDragOffset.x-=t.x,this._anchorDragOffset.y-=t.y,e.height+=2*this.padding(),!r)return void this.update()}else if(this._movingAnchorName&&e.height<0&&this._movingAnchorName.indexOf("bottom")>=0){const t=i.point({x:0,y:2*this.padding()});if(this._movingAnchorName=this._movingAnchorName.replace("bottom","top"),this._anchorDragOffset.x-=t.x,this._anchorDragOffset.y-=t.y,e.height+=2*this.padding(),!r)return void this.update()}if(this.boundBoxFunc()){const t=this.boundBoxFunc()(n,e);t?e=t:m.warn("boundBoxFunc returned falsy. You should return new bound rect from it!")}const a=1e7,o=new u;o.translate(n.x,n.y),o.rotate(n.rotation),o.scale(n.width/a,n.height/a);const l=new u;l.translate(e.x,e.y),l.rotate(e.rotation),l.scale(e.width/a,e.height/a);const c=l.multiply(o.invert());this._nodes.forEach((e=>{var n;const r=e.getParent().getAbsoluteTransform(),i=e.getTransform().copy();i.translate(e.offsetX(),e.offsetY());const a=new u;a.multiply(r.copy().invert()).multiply(c).multiply(r).multiply(i);const o=a.decompose();e.setAttrs(o),this._fire("transform",{evt:t,target:e}),e._fire("transform",{evt:t,target:e}),null===(n=e.getLayer())||void 0===n||n.batchDraw()})),this.rotation(m._getRotation(e.rotation)),this._resetTransformCache(),this.update(),this.getLayer().batchDraw()}forceUpdate(){this._resetTransformCache(),this.update()}_batchChangeChild(e,t){this.findOne(e).setAttrs(t)}update(){var e,t=this._getNodeRect();this.rotation(m._getRotation(t.rotation));var n=t.width,r=t.height,i=this.enabledAnchors(),a=this.resizeEnabled(),o=this.padding(),s=this.anchorSize();this.find("._anchor").forEach((e=>{e.setAttrs({width:s,height:s,offsetX:s/2,offsetY:s/2,stroke:this.anchorStroke(),strokeWidth:this.anchorStrokeWidth(),fill:this.anchorFill(),cornerRadius:this.anchorCornerRadius()})})),this._batchChangeChild(".top-left",{x:0,y:0,offsetX:s/2+o,offsetY:s/2+o,visible:a&&i.indexOf("top-left")>=0}),this._batchChangeChild(".top-center",{x:n/2,y:0,offsetY:s/2+o,visible:a&&i.indexOf("top-center")>=0}),this._batchChangeChild(".top-right",{x:n,y:0,offsetX:s/2-o,offsetY:s/2+o,visible:a&&i.indexOf("top-right")>=0}),this._batchChangeChild(".middle-left",{x:0,y:r/2,offsetX:s/2+o,visible:a&&i.indexOf("middle-left")>=0}),this._batchChangeChild(".middle-right",{x:n,y:r/2,offsetX:s/2-o,visible:a&&i.indexOf("middle-right")>=0}),this._batchChangeChild(".bottom-left",{x:0,y:r,offsetX:s/2+o,offsetY:s/2-o,visible:a&&i.indexOf("bottom-left")>=0}),this._batchChangeChild(".bottom-center",{x:n/2,y:r,offsetY:s/2-o,visible:a&&i.indexOf("bottom-center")>=0}),this._batchChangeChild(".bottom-right",{x:n,y:r,offsetX:s/2-o,offsetY:s/2-o,visible:a&&i.indexOf("bottom-right")>=0}),this._batchChangeChild(".rotater",{x:n/2,y:-this.rotateAnchorOffset()*m._sign(r)-o,visible:this.rotateEnabled()}),this._batchChangeChild(".back",{width:n,height:r,visible:this.borderEnabled(),stroke:this.borderStroke(),strokeWidth:this.borderStrokeWidth(),dash:this.borderDash(),x:0,y:0}),null===(e=this.getLayer())||void 0===e||e.batchDraw()}isTransforming(){return this._transforming}stopTransform(){if(this._transforming){this._removeEvents();var e=this.findOne("."+this._movingAnchorName);e&&e.stopDrag()}}destroy(){return this.getStage()&&this._cursorChange&&this.getStage().content&&(this.getStage().content.style.cursor=""),ue.prototype.destroy.call(this),this.detach(),this._removeEvents(),this}toObject(){return U.prototype.toObject.call(this)}}et.prototype.className="Transformer",l(et),k.addGetterSetter(et,"enabledAnchors",Ke,(function(e){return e instanceof Array||m.warn("enabledAnchors value should be an array"),e instanceof Array&&e.forEach((function(e){-1===Ke.indexOf(e)&&m.warn("Unknown anchor name: "+e+". Available names are: "+Ke.join(", "))})),e||[]})),k.addGetterSetter(et,"flipEnabled",!0,C()),k.addGetterSetter(et,"resizeEnabled",!0),k.addGetterSetter(et,"anchorSize",10,b()),k.addGetterSetter(et,"rotateEnabled",!0),k.addGetterSetter(et,"rotationSnaps",[]),k.addGetterSetter(et,"rotateAnchorOffset",50,b()),k.addGetterSetter(et,"rotationSnapTolerance",5,b()),k.addGetterSetter(et,"borderEnabled",!0),k.addGetterSetter(et,"anchorStroke","rgb(0, 161, 255)"),k.addGetterSetter(et,"anchorStrokeWidth",1,b()),k.addGetterSetter(et,"anchorFill","white"),k.addGetterSetter(et,"anchorCornerRadius",0,b()),k.addGetterSetter(et,"borderStroke","rgb(0, 161, 255)"),k.addGetterSetter(et,"borderStrokeWidth",1,b()),k.addGetterSetter(et,"borderDash"),k.addGetterSetter(et,"keepRatio",!0),k.addGetterSetter(et,"centeredScaling",!1),k.addGetterSetter(et,"ignoreStroke",!1),k.addGetterSetter(et,"padding",0,b()),k.addGetterSetter(et,"node"),k.addGetterSetter(et,"nodes"),k.addGetterSetter(et,"boundBoxFunc"),k.addGetterSetter(et,"anchorDragBoundFunc"),k.addGetterSetter(et,"shouldOverdrawWholeArea",!1),k.addGetterSetter(et,"useSingleNodeRotation",!0),k.backCompat(et,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"});class tt extends ie{_sceneFunc(e){e.beginPath(),e.arc(0,0,this.radius(),0,s.getAngle(this.angle()),this.clockwise()),e.lineTo(0,0),e.closePath(),e.fillStrokeShape(this)}getWidth(){return 2*this.radius()}getHeight(){return 2*this.radius()}setWidth(e){this.radius(e/2)}setHeight(e){this.radius(e/2)}}function nt(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}tt.prototype.className="Wedge",tt.prototype._centroid=!0,tt.prototype._attrsAffectingSize=["radius"],l(tt),k.addGetterSetter(tt,"radius",0,b()),k.addGetterSetter(tt,"angle",0,b()),k.addGetterSetter(tt,"clockwise",!1),k.backCompat(tt,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"});var rt=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],it=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];k.addGetterSetter(U,"blurRadius",0,b(),k.afterSetFilter);k.addGetterSetter(U,"brightness",0,b(),k.afterSetFilter);k.addGetterSetter(U,"contrast",0,b(),k.afterSetFilter);function at(e,t,n,r,i){var a=n-t,o=i-r;return 0===a?r+o/2:0===o?r:o*((e-t)/a)+r}k.addGetterSetter(U,"embossStrength",.5,b(),k.afterSetFilter),k.addGetterSetter(U,"embossWhiteLevel",.5,b(),k.afterSetFilter),k.addGetterSetter(U,"embossDirection","top-left",null,k.afterSetFilter),k.addGetterSetter(U,"embossBlend",!1,null,k.afterSetFilter);k.addGetterSetter(U,"enhance",0,b(),k.afterSetFilter);k.addGetterSetter(U,"hue",0,b(),k.afterSetFilter),k.addGetterSetter(U,"saturation",0,b(),k.afterSetFilter),k.addGetterSetter(U,"luminance",0,b(),k.afterSetFilter);k.addGetterSetter(U,"hue",0,b(),k.afterSetFilter),k.addGetterSetter(U,"saturation",0,b(),k.afterSetFilter),k.addGetterSetter(U,"value",0,b(),k.afterSetFilter);function ot(e,t,n){var r=4*(n*e.width+t),i=[];return i.push(e.data[r++],e.data[r++],e.data[r++],e.data[r++]),i}function st(e,t){return Math.sqrt(Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)+Math.pow(e[2]-t[2],2))}k.addGetterSetter(U,"kaleidoscopePower",2,b(),k.afterSetFilter),k.addGetterSetter(U,"kaleidoscopeAngle",0,b(),k.afterSetFilter);k.addGetterSetter(U,"threshold",0,b(),k.afterSetFilter);k.addGetterSetter(U,"noise",.2,b(),k.afterSetFilter);k.addGetterSetter(U,"pixelSize",8,b(),k.afterSetFilter);k.addGetterSetter(U,"levels",.5,b(),k.afterSetFilter);k.addGetterSetter(U,"red",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),k.addGetterSetter(U,"green",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),k.addGetterSetter(U,"blue",0,y,k.afterSetFilter);k.addGetterSetter(U,"red",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),k.addGetterSetter(U,"green",0,(function(e){return this._filterUpToDate=!1,e>255?255:e<0?0:Math.round(e)})),k.addGetterSetter(U,"blue",0,y,k.afterSetFilter),k.addGetterSetter(U,"alpha",1,(function(e){return this._filterUpToDate=!1,e>1?1:e<0?0:e}));k.addGetterSetter(U,"threshold",.5,b(),k.afterSetFilter);const lt=ye.Util._assign(ye,{Arc:be,Arrow:Ce,Circle:ke,Ellipse:Pe,Image:Ee,Label:Ie,Tag:ze,Line:_e,Path:Se,Rect:Ae,RegularPolygon:Le,Ring:De,Sprite:Ne,Star:Fe,Text:je,TextPath:qe,Transformer:et,Wedge:tt,Filters:{Blur:function(e){var t=Math.round(this.blurRadius());t>0&&function(e,t){var n,r,i,a,o,s,l,u,c,d,h,f,p,g,m,v,y,b,w,x,_,S,C,k,P=e.data,E=e.width,T=e.height,R=t+t+1,I=E-1,z=T-1,A=t+1,L=A*(A+1)/2,M=new nt,D=null,N=M,F=null,U=null,O=rt[t],W=it[t];for(i=1;i<R;i++)N=N.next=new nt,i===A&&(D=N);for(N.next=M,l=s=0,r=0;r<T;r++){for(v=y=b=w=u=c=d=h=0,f=A*(x=P[s]),p=A*(_=P[s+1]),g=A*(S=P[s+2]),m=A*(C=P[s+3]),u+=L*x,c+=L*_,d+=L*S,h+=L*C,N=M,i=0;i<A;i++)N.r=x,N.g=_,N.b=S,N.a=C,N=N.next;for(i=1;i<A;i++)a=s+((I<i?I:i)<<2),u+=(N.r=x=P[a])*(k=A-i),c+=(N.g=_=P[a+1])*k,d+=(N.b=S=P[a+2])*k,h+=(N.a=C=P[a+3])*k,v+=x,y+=_,b+=S,w+=C,N=N.next;for(F=M,U=D,n=0;n<E;n++)P[s+3]=C=h*O>>W,0!==C?(C=255/C,P[s]=(u*O>>W)*C,P[s+1]=(c*O>>W)*C,P[s+2]=(d*O>>W)*C):P[s]=P[s+1]=P[s+2]=0,u-=f,c-=p,d-=g,h-=m,f-=F.r,p-=F.g,g-=F.b,m-=F.a,a=l+((a=n+t+1)<I?a:I)<<2,u+=v+=F.r=P[a],c+=y+=F.g=P[a+1],d+=b+=F.b=P[a+2],h+=w+=F.a=P[a+3],F=F.next,f+=x=U.r,p+=_=U.g,g+=S=U.b,m+=C=U.a,v-=x,y-=_,b-=S,w-=C,U=U.next,s+=4;l+=E}for(n=0;n<E;n++){for(y=b=w=v=c=d=h=u=0,f=A*(x=P[s=n<<2]),p=A*(_=P[s+1]),g=A*(S=P[s+2]),m=A*(C=P[s+3]),u+=L*x,c+=L*_,d+=L*S,h+=L*C,N=M,i=0;i<A;i++)N.r=x,N.g=_,N.b=S,N.a=C,N=N.next;for(o=E,i=1;i<=t;i++)s=o+n<<2,u+=(N.r=x=P[s])*(k=A-i),c+=(N.g=_=P[s+1])*k,d+=(N.b=S=P[s+2])*k,h+=(N.a=C=P[s+3])*k,v+=x,y+=_,b+=S,w+=C,N=N.next,i<z&&(o+=E);for(s=n,F=M,U=D,r=0;r<T;r++)P[3+(a=s<<2)]=C=h*O>>W,C>0?(C=255/C,P[a]=(u*O>>W)*C,P[a+1]=(c*O>>W)*C,P[a+2]=(d*O>>W)*C):P[a]=P[a+1]=P[a+2]=0,u-=f,c-=p,d-=g,h-=m,f-=F.r,p-=F.g,g-=F.b,m-=F.a,a=n+((a=r+A)<z?a:z)*E<<2,u+=v+=F.r=P[a],c+=y+=F.g=P[a+1],d+=b+=F.b=P[a+2],h+=w+=F.a=P[a+3],F=F.next,f+=x=U.r,p+=_=U.g,g+=S=U.b,m+=C=U.a,v-=x,y-=_,b-=S,w-=C,U=U.next,s+=E}}(e,t)},Brighten:function(e){var t,n=255*this.brightness(),r=e.data,i=r.length;for(t=0;t<i;t+=4)r[t]+=n,r[t+1]+=n,r[t+2]+=n},Contrast:function(e){var t,n=Math.pow((this.contrast()+100)/100,2),r=e.data,i=r.length,a=150,o=150,s=150;for(t=0;t<i;t+=4)a=r[t],o=r[t+1],s=r[t+2],a/=255,a-=.5,a*=n,a+=.5,o/=255,o-=.5,o*=n,o+=.5,s/=255,s-=.5,s*=n,s+=.5,a=(a*=255)<0?0:a>255?255:a,o=(o*=255)<0?0:o>255?255:o,s=(s*=255)<0?0:s>255?255:s,r[t]=a,r[t+1]=o,r[t+2]=s},Emboss:function(e){var t=10*this.embossStrength(),n=255*this.embossWhiteLevel(),r=this.embossDirection(),i=this.embossBlend(),a=0,o=0,s=e.data,l=e.width,u=e.height,c=4*l,d=u;switch(r){case"top-left":a=-1,o=-1;break;case"top":a=-1,o=0;break;case"top-right":a=-1,o=1;break;case"right":a=0,o=1;break;case"bottom-right":a=1,o=1;break;case"bottom":a=1,o=0;break;case"bottom-left":a=1,o=-1;break;case"left":a=0,o=-1;break;default:m.error("Unknown emboss direction: "+r)}do{var h=(d-1)*c,f=a;d+f<1&&(f=0),d+f>u&&(f=0);var p=(d-1+f)*l*4,g=l;do{var v=h+4*(g-1),y=o;g+y<1&&(y=0),g+y>l&&(y=0);var b=p+4*(g-1+y),w=s[v]-s[b],x=s[v+1]-s[b+1],_=s[v+2]-s[b+2],S=w,C=S>0?S:-S;if((x>0?x:-x)>C&&(S=x),(_>0?_:-_)>C&&(S=_),S*=t,i){var k=s[v]+S,P=s[v+1]+S,E=s[v+2]+S;s[v]=k>255?255:k<0?0:k,s[v+1]=P>255?255:P<0?0:P,s[v+2]=E>255?255:E<0?0:E}else{var T=n-S;T<0?T=0:T>255&&(T=255),s[v]=s[v+1]=s[v+2]=T}}while(--g)}while(--d)},Enhance:function(e){var t,n,r,i,a=e.data,o=a.length,s=a[0],l=s,u=a[1],c=u,d=a[2],h=d,f=this.enhance();if(0!==f){for(i=0;i<o;i+=4)(t=a[i+0])<s?s=t:t>l&&(l=t),(n=a[i+1])<u?u=n:n>c&&(c=n),(r=a[i+2])<d?d=r:r>h&&(h=r);var p,g,m,v,y,b,w,x,_;for(l===s&&(l=255,s=0),c===u&&(c=255,u=0),h===d&&(h=255,d=0),f>0?(g=l+f*(255-l),m=s-f*(s-0),y=c+f*(255-c),b=u-f*(u-0),x=h+f*(255-h),_=d-f*(d-0)):(g=l+f*(l-(p=.5*(l+s))),m=s+f*(s-p),y=c+f*(c-(v=.5*(c+u))),b=u+f*(u-v),x=h+f*(h-(w=.5*(h+d))),_=d+f*(d-w)),i=0;i<o;i+=4)a[i+0]=at(a[i+0],s,l,m,g),a[i+1]=at(a[i+1],u,c,b,y),a[i+2]=at(a[i+2],d,h,_,x)}},Grayscale:function(e){var t,n,r=e.data,i=r.length;for(t=0;t<i;t+=4)n=.34*r[t]+.5*r[t+1]+.16*r[t+2],r[t]=n,r[t+1]=n,r[t+2]=n},HSL:function(e){var t,n,r,i,a,o=e.data,s=o.length,l=Math.pow(2,this.saturation()),u=Math.abs(this.hue()+360)%360,c=127*this.luminance(),d=1*l*Math.cos(u*Math.PI/180),h=1*l*Math.sin(u*Math.PI/180),f=.299+.701*d+.167*h,p=.587-.587*d+.33*h,g=.114-.114*d-.497*h,m=.299-.299*d-.328*h,v=.587+.413*d+.035*h,y=.114-.114*d+.293*h,b=.299-.3*d+1.25*h,w=.587-.586*d-1.05*h,x=.114+.886*d-.2*h;for(t=0;t<s;t+=4)n=o[t+0],r=o[t+1],i=o[t+2],a=o[t+3],o[t+0]=f*n+p*r+g*i+c,o[t+1]=m*n+v*r+y*i+c,o[t+2]=b*n+w*r+x*i+c,o[t+3]=a},HSV:function(e){var t,n,r,i,a,o=e.data,s=o.length,l=Math.pow(2,this.value()),u=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,d=l*u*Math.cos(c*Math.PI/180),h=l*u*Math.sin(c*Math.PI/180),f=.299*l+.701*d+.167*h,p=.587*l-.587*d+.33*h,g=.114*l-.114*d-.497*h,m=.299*l-.299*d-.328*h,v=.587*l+.413*d+.035*h,y=.114*l-.114*d+.293*h,b=.299*l-.3*d+1.25*h,w=.587*l-.586*d-1.05*h,x=.114*l+.886*d-.2*h;for(t=0;t<s;t+=4)n=o[t+0],r=o[t+1],i=o[t+2],a=o[t+3],o[t+0]=f*n+p*r+g*i,o[t+1]=m*n+v*r+y*i,o[t+2]=b*n+w*r+x*i,o[t+3]=a},Invert:function(e){var t,n=e.data,r=n.length;for(t=0;t<r;t+=4)n[t]=255-n[t],n[t+1]=255-n[t+1],n[t+2]=255-n[t+2]},Kaleidoscope:function(e){var t,n,r,i,a,o,s,l,u,c=e.width,d=e.height,h=Math.round(this.kaleidoscopePower()),f=Math.round(this.kaleidoscopeAngle()),p=Math.floor(c*(f%360)/360);if(!(h<1)){var g=m.createCanvasElement();g.width=c,g.height=d;var v=g.getContext("2d").getImageData(0,0,c,d);!function(e,t,n){var r,i,a,o,s=e.data,l=t.data,u=e.width,c=e.height,d=n.polarCenterX||u/2,h=n.polarCenterY||c/2,f=0,p=0,g=0,m=0,v=Math.sqrt(d*d+h*h);i=u-d,a=c-h,v=(o=Math.sqrt(i*i+a*a))>v?o:v;var y,b,w,x,_=c,S=u,C=360/S*Math.PI/180;for(b=0;b<S;b+=1)for(w=Math.sin(b*C),x=Math.cos(b*C),y=0;y<_;y+=1)i=Math.floor(d+v*y/_*x),f=s[0+(r=4*((a=Math.floor(h+v*y/_*w))*u+i))],p=s[r+1],g=s[r+2],m=s[r+3],l[0+(r=4*(b+y*u))]=f,l[r+1]=p,l[r+2]=g,l[r+3]=m}(e,v,{polarCenterX:c/2,polarCenterY:d/2});for(var y=c/Math.pow(2,h);y<=8;)y*=2,h-=1;var b=y=Math.ceil(y),w=0,x=b,_=1;for(p+y>c&&(w=b,x=0,_=-1),n=0;n<d;n+=1)for(t=w;t!==x;t+=_)l=4*(c*n+Math.round(t+p)%c),i=v.data[l+0],a=v.data[l+1],o=v.data[l+2],s=v.data[l+3],u=4*(c*n+t),v.data[u+0]=i,v.data[u+1]=a,v.data[u+2]=o,v.data[u+3]=s;for(n=0;n<d;n+=1)for(b=Math.floor(y),r=0;r<h;r+=1){for(t=0;t<b+1;t+=1)l=4*(c*n+t),i=v.data[l+0],a=v.data[l+1],o=v.data[l+2],s=v.data[l+3],u=4*(c*n+2*b-t-1),v.data[u+0]=i,v.data[u+1]=a,v.data[u+2]=o,v.data[u+3]=s;b*=2}!function(e,t,n){var r,i,a,o,s,l,u=e.data,c=t.data,d=e.width,h=e.height,f=n.polarCenterX||d/2,p=n.polarCenterY||h/2,g=0,m=0,v=0,y=0,b=Math.sqrt(f*f+p*p);i=d-f,a=h-p,b=(l=Math.sqrt(i*i+a*a))>b?l:b;var w,x,_,S=h,C=d,k=n.polarRotation||0;for(i=0;i<d;i+=1)for(a=0;a<h;a+=1)o=i-f,s=a-p,w=Math.sqrt(o*o+s*s)*S/b,x=(x=(180*Math.atan2(s,o)/Math.PI+360+k)%360)*C/360,_=Math.floor(x),g=u[0+(r=4*(Math.floor(w)*d+_))],m=u[r+1],v=u[r+2],y=u[r+3],c[0+(r=4*(a*d+i))]=g,c[r+1]=m,c[r+2]=v,c[r+3]=y}(v,e,{polarRotation:0})}},Mask:function(e){var t=function(e,t){var n=ot(e,0,0),r=ot(e,e.width-1,0),i=ot(e,0,e.height-1),a=ot(e,e.width-1,e.height-1),o=t||10;if(st(n,r)<o&&st(r,a)<o&&st(a,i)<o&&st(i,n)<o){for(var s=function(e){for(var t=[0,0,0],n=0;n<e.length;n++)t[0]+=e[n][0],t[1]+=e[n][1],t[2]+=e[n][2];return t[0]/=e.length,t[1]/=e.length,t[2]/=e.length,t}([r,n,a,i]),l=[],u=0;u<e.width*e.height;u++){var c=st(s,[e.data[4*u],e.data[4*u+1],e.data[4*u+2]]);l[u]=c<o?0:255}return l}}(e,this.threshold());return t&&function(e,t){for(var n=0;n<e.width*e.height;n++)e.data[4*n+3]=t[n]}(e,t=function(e,t,n){for(var r=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],i=Math.round(Math.sqrt(r.length)),a=Math.floor(i/2),o=[],s=0;s<n;s++)for(var l=0;l<t;l++){for(var u=s*t+l,c=0,d=0;d<i;d++)for(var h=0;h<i;h++){var f=s+d-a,p=l+h-a;if(f>=0&&f<n&&p>=0&&p<t){var g=r[d*i+h];c+=e[f*t+p]*g}}o[u]=c}return o}(t=function(e,t,n){for(var r=[1,1,1,1,1,1,1,1,1],i=Math.round(Math.sqrt(r.length)),a=Math.floor(i/2),o=[],s=0;s<n;s++)for(var l=0;l<t;l++){for(var u=s*t+l,c=0,d=0;d<i;d++)for(var h=0;h<i;h++){var f=s+d-a,p=l+h-a;if(f>=0&&f<n&&p>=0&&p<t){var g=r[d*i+h];c+=e[f*t+p]*g}}o[u]=c>=1020?255:0}return o}(t=function(e,t,n){for(var r=[1,1,1,1,0,1,1,1,1],i=Math.round(Math.sqrt(r.length)),a=Math.floor(i/2),o=[],s=0;s<n;s++)for(var l=0;l<t;l++){for(var u=s*t+l,c=0,d=0;d<i;d++)for(var h=0;h<i;h++){var f=s+d-a,p=l+h-a;if(f>=0&&f<n&&p>=0&&p<t){var g=r[d*i+h];c+=e[f*t+p]*g}}o[u]=2040===c?255:0}return o}(t,e.width,e.height),e.width,e.height),e.width,e.height)),e},Noise:function(e){var t,n=255*this.noise(),r=e.data,i=r.length,a=n/2;for(t=0;t<i;t+=4)r[t+0]+=a-2*a*Math.random(),r[t+1]+=a-2*a*Math.random(),r[t+2]+=a-2*a*Math.random()},Pixelate:function(e){var t,n,r,i,a,o,s,l,u,c,d,h,f,p,g=Math.ceil(this.pixelSize()),v=e.width,y=e.height,b=Math.ceil(v/g),w=Math.ceil(y/g),x=e.data;if(g<=0)m.error("pixelSize value can not be <= 0");else for(h=0;h<b;h+=1)for(f=0;f<w;f+=1){for(i=0,a=0,o=0,s=0,u=(l=h*g)+g,d=(c=f*g)+g,p=0,t=l;t<u;t+=1)if(!(t>=v))for(n=c;n<d;n+=1)n>=y||(i+=x[(r=4*(v*n+t))+0],a+=x[r+1],o+=x[r+2],s+=x[r+3],p+=1);for(i/=p,a/=p,o/=p,s/=p,t=l;t<u;t+=1)if(!(t>=v))for(n=c;n<d;n+=1)n>=y||(x[(r=4*(v*n+t))+0]=i,x[r+1]=a,x[r+2]=o,x[r+3]=s)}},Posterize:function(e){var t,n=Math.round(254*this.levels())+1,r=e.data,i=r.length,a=255/n;for(t=0;t<i;t+=1)r[t]=Math.floor(r[t]/a)*a},RGB:function(e){var t,n,r=e.data,i=r.length,a=this.red(),o=this.green(),s=this.blue();for(t=0;t<i;t+=4)n=(.34*r[t]+.5*r[t+1]+.16*r[t+2])/255,r[t]=n*a,r[t+1]=n*o,r[t+2]=n*s,r[t+3]=r[t+3]},RGBA:function(e){var t,n,r=e.data,i=r.length,a=this.red(),o=this.green(),s=this.blue(),l=this.alpha();for(t=0;t<i;t+=4)n=1-l,r[t]=a*l+r[t]*n,r[t+1]=o*l+r[t+1]*n,r[t+2]=s*l+r[t+2]*n},Sepia:function(e){var t,n,r,i,a=e.data,o=a.length;for(t=0;t<o;t+=4)n=a[t+0],r=a[t+1],i=a[t+2],a[t+0]=Math.min(255,.393*n+.769*r+.189*i),a[t+1]=Math.min(255,.349*n+.686*r+.168*i),a[t+2]=Math.min(255,.272*n+.534*r+.131*i)},Solarize:function(e){var t=e.data,n=e.width,r=4*n,i=e.height;do{var a=(i-1)*r,o=n;do{var s=a+4*(o-1),l=t[s],u=t[s+1],c=t[s+2];l>127&&(l=255-l),u>127&&(u=255-u),c>127&&(c=255-c),t[s]=l,t[s+1]=u,t[s+2]=c}while(--o)}while(--i)},Threshold:function(e){var t,n=255*this.threshold(),r=e.data,i=r.length;for(t=0;t<i;t+=1)r[t]=r[t]<n?0:255}}});var ut={};const ct=ut||Object.freeze({__proto__:null,default:ut});void 0===global.document&&(lt.Util.createCanvasElement=()=>{const e=ct.createCanvas(300,300);return e.style||(e.style={}),e},lt.Util.createImageElement=()=>new ct.Image);var dt={exports:{}},ht={exports:{}},ft=Object.getOwnPropertySymbols,pt=Object.prototype.hasOwnProperty,gt=Object.prototype.propertyIsEnumerable;function mt(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}var vt=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,r,i=mt(e),a=1;a<arguments.length;a++){for(var o in n=Object(arguments[a]))pt.call(n,o)&&(i[o]=n[o]);if(ft){r=ft(n);for(var s=0;s<r.length;s++)gt.call(n,r[s])&&(i[r[s]]=n[r[s]])}}return i},yt={exports:{}},bt={};
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
!function(e){var t,n,r,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var o=Date,s=o.now();e.unstable_now=function(){return o.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,u=null,c=function(){if(null!==l)try{var t=e.unstable_now();l(!0,t),l=null}catch(e){throw setTimeout(c,0),e}};t=function(e){null!==l?setTimeout(t,0,e):(l=e,setTimeout(c,0))},n=function(e,t){u=setTimeout(e,t)},r=function(){clearTimeout(u)},e.unstable_shouldYield=function(){return!1},i=e.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var f=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof f&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var p=!1,g=null,m=-1,v=5,y=0;e.unstable_shouldYield=function(){return e.unstable_now()>=y},i=function(){},e.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):v=0<e?Math.floor(1e3/e):5};var b=new MessageChannel,w=b.port2;b.port1.onmessage=function(){if(null!==g){var t=e.unstable_now();y=t+v;try{g(!0,t)?w.postMessage(null):(p=!1,g=null)}catch(e){throw w.postMessage(null),e}}else p=!1},t=function(e){g=e,p||(p=!0,w.postMessage(null))},n=function(t,n){m=d((function(){t(e.unstable_now())}),n)},r=function(){h(m),m=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<C(i,t)))break e;e[r]=t,e[n]=i,n=r}}function _(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var a=2*(r+1)-1,o=e[a],s=a+1,l=e[s];if(void 0!==o&&0>C(o,n))void 0!==l&&0>C(l,o)?(e[r]=l,e[s]=n,r=s):(e[r]=o,e[a]=n,r=a);else{if(!(void 0!==l&&0>C(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var k=[],P=[],E=1,T=null,R=3,I=!1,z=!1,A=!1;function L(e){for(var t=_(P);null!==t;){if(null===t.callback)S(P);else{if(!(t.startTime<=e))break;S(P),t.sortIndex=t.expirationTime,x(k,t)}t=_(P)}}function M(e){if(A=!1,L(e),!z)if(null!==_(k))z=!0,t(D);else{var r=_(P);null!==r&&n(M,r.startTime-e)}}function D(t,i){z=!1,A&&(A=!1,r()),I=!0;var a=R;try{for(L(i),T=_(k);null!==T&&(!(T.expirationTime>i)||t&&!e.unstable_shouldYield());){var o=T.callback;if("function"==typeof o){T.callback=null,R=T.priorityLevel;var s=o(T.expirationTime<=i);i=e.unstable_now(),"function"==typeof s?T.callback=s:T===_(k)&&S(k),L(i)}else S(k);T=_(k)}if(null!==T)var l=!0;else{var u=_(P);null!==u&&n(M,u.startTime-i),l=!1}return l}finally{T=null,R=a,I=!1}}var N=i;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(e){e.callback=null},e.unstable_continueExecution=function(){z||I||(z=!0,t(D))},e.unstable_getCurrentPriorityLevel=function(){return R},e.unstable_getFirstCallbackNode=function(){return _(k)},e.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=N,e.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},e.unstable_scheduleCallback=function(i,a,o){var s=e.unstable_now();switch("object"==typeof o&&null!==o?o="number"==typeof(o=o.delay)&&0<o?s+o:s:o=s,i){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return i={id:E++,callback:a,priorityLevel:i,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>s?(i.sortIndex=o,x(P,i),null===_(k)&&i===_(P)&&(A?r():A=!0,n(M,o-s))):(i.sortIndex=l,x(k,i),z||I||(z=!0,t(D))),i},e.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}}(bt);var wt,xt={};
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */!function(e){"production"!==process.env.NODE_ENV&&function(){var t,n,r,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;e.unstable_now=function(){return a.now()}}else{var o=Date,s=o.now();e.unstable_now=function(){return o.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,u=null,c=function(){if(null!==l)try{var t=e.unstable_now();l(!0,t),l=null}catch(e){throw setTimeout(c,0),e}};t=function(e){null!==l?setTimeout(t,0,e):(l=e,setTimeout(c,0))},n=function(e,t){u=setTimeout(e,t)},r=function(){clearTimeout(u)},e.unstable_shouldYield=function(){return!1},i=e.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var f=window.requestAnimationFrame,p=window.cancelAnimationFrame;"function"!=typeof f&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,v=-1,y=5,b=0;e.unstable_shouldYield=function(){return e.unstable_now()>=b},i=function(){},e.unstable_forceFrameRate=function(e){e<0||e>125?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=e>0?Math.floor(1e3/e):5};var w=new MessageChannel,x=w.port2;w.port1.onmessage=function(){if(null!==m){var t=e.unstable_now();b=t+y;try{m(!0,t)?x.postMessage(null):(g=!1,m=null)}catch(e){throw x.postMessage(null),e}}else g=!1},t=function(e){m=e,g||(g=!0,x.postMessage(null))},n=function(t,n){v=d((function(){t(e.unstable_now())}),n)},r=function(){h(v),v=-1}}function _(e,t){var n=e.length;e.push(t),function(e,t,n){var r=n;for(;;){var i=r-1>>>1,a=e[i];if(!(void 0!==a&&k(a,t)>0))return;e[i]=t,e[r]=a,r=i}}(e,t,n)}function S(e){var t=e[0];return void 0===t?null:t}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();return n!==t&&(e[0]=n,function(e,t,n){var r=n,i=e.length;for(;r<i;){var a=2*(r+1)-1,o=e[a],s=a+1,l=e[s];if(void 0!==o&&k(o,t)<0)void 0!==l&&k(l,o)<0?(e[r]=l,e[s]=t,r=s):(e[r]=o,e[a]=t,r=a);else{if(!(void 0!==l&&k(l,t)<0))return;e[r]=l,e[s]=t,r=s}}}(e,n,0)),t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],E=[],T=1,R=null,I=3,z=!1,A=!1,L=!1;function M(e){for(var t=S(E);null!==t;){if(null===t.callback)C(E);else{if(!(t.startTime<=e))return;C(E),t.sortIndex=t.expirationTime,_(P,t)}t=S(E)}}function D(e){if(L=!1,M(e),!A)if(null!==S(P))A=!0,t(N);else{var r=S(E);null!==r&&n(D,r.startTime-e)}}function N(t,i){A=!1,L&&(L=!1,r()),z=!0;var a=I;try{return function(t,r){var i=r;M(i),R=S(P);for(;null!==R&&(!(R.expirationTime>i)||t&&!e.unstable_shouldYield());){var a=R.callback;if("function"==typeof a){R.callback=null,I=R.priorityLevel;var o=a(R.expirationTime<=i);i=e.unstable_now(),"function"==typeof o?R.callback=o:R===S(P)&&C(P),M(i)}else C(P);R=S(P)}if(null!==R)return!0;var s=S(E);return null!==s&&n(D,s.startTime-i),!1}(t,i)}finally{R=null,I=a,z=!1}}var F=i;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(e){e.callback=null},e.unstable_continueExecution=function(){A||z||(A=!0,t(N))},e.unstable_getCurrentPriorityLevel=function(){return I},e.unstable_getFirstCallbackNode=function(){return S(P)},e.unstable_next=function(e){var t;switch(I){case 1:case 2:case 3:t=3;break;default:t=I}var n=I;I=t;try{return e()}finally{I=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=F,e.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=I;I=e;try{return t()}finally{I=n}},e.unstable_scheduleCallback=function(i,a,o){var s,l,u=e.unstable_now();if("object"==typeof o&&null!==o){var c=o.delay;s="number"==typeof c&&c>0?u+c:u}else s=u;switch(i){case 1:l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}var d=s+l,h={id:T++,callback:a,priorityLevel:i,startTime:s,expirationTime:d,sortIndex:-1};return s>u?(h.sortIndex=s,_(E,h),null===S(P)&&h===S(E)&&(L?r():L=!0,n(D,s-u))):(h.sortIndex=d,_(P,h),A||z||(A=!0,t(N))),h},e.unstable_wrapCallback=function(e){var t=I;return function(){var n=I;I=t;try{return e.apply(this,arguments)}finally{I=n}}}}()}(xt),"production"===process.env.NODE_ENV?yt.exports=bt:yt.exports=xt
/** @license React v0.26.2
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */,(wt=ht).exports=function(e){var t={},r=vt,i=n.default,a=yt.exports;function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,l=60103,u=60106,c=60107,d=60108,h=60114,f=60109,p=60110,g=60112,m=60113,v=60120,y=60115,b=60116,w=60121,x=60129,_=60130,S=60131;if("function"==typeof Symbol&&Symbol.for){var C=Symbol.for;l=C("react.element"),u=C("react.portal"),c=C("react.fragment"),d=C("react.strict_mode"),h=C("react.profiler"),f=C("react.provider"),p=C("react.context"),g=C("react.forward_ref"),m=C("react.suspense"),v=C("react.suspense_list"),y=C("react.memo"),b=C("react.lazy"),w=C("react.block"),C("react.scope"),x=C("react.debug_trace_mode"),_=C("react.offscreen"),S=C("react.legacy_hidden")}var k="function"==typeof Symbol&&Symbol.iterator;function P(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=k&&e[k]||e["@@iterator"])?e:null}function E(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case c:return"Fragment";case u:return"Portal";case h:return"Profiler";case d:return"StrictMode";case m:return"Suspense";case v:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case p:return(e.displayName||"Context")+".Consumer";case f:return(e._context.displayName||"Context")+".Provider";case g:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case y:return E(e.type);case w:return E(e._render);case b:t=e._payload,e=e._init;try{return E(e(t))}catch(e){}}return null}function T(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function R(e){if(T(e)!==e)throw Error(o(188))}function I(e){var t=e.alternate;if(!t){if(null===(t=T(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return R(i),e;if(a===r)return R(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=a;break}if(l===r){s=!0,r=i,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=i;break}if(l===r){s=!0,r=a,n=i;break}l=l.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}function z(e){if(!(e=I(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function A(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var L,M=e.getPublicInstance,D=e.getRootHostContext,N=e.getChildHostContext,F=e.prepareForCommit,U=e.resetAfterCommit,O=e.createInstance,W=e.appendInitialChild,G=e.finalizeInitialChildren,B=e.prepareUpdate,j=e.shouldSetTextContent,H=e.createTextInstance,Y=e.scheduleTimeout,q=e.cancelTimeout,Q=e.noTimeout,V=e.isPrimaryRenderer,X=e.supportsMutation,$=e.supportsPersistence,K=e.supportsHydration,J=e.getInstanceFromNode,Z=e.makeOpaqueHydratingObject,ee=e.makeClientId,te=e.beforeActiveInstanceBlur,ne=e.afterActiveInstanceBlur,re=e.preparePortalMount,ie=e.supportsTestSelectors,ae=e.findFiberRoot,oe=e.getBoundingRect,se=e.getTextContent,le=e.isHiddenSubtree,ue=e.matchAccessibilityRole,ce=e.setFocusIfFocusable,de=e.setupIntersectionObserver,he=e.appendChild,fe=e.appendChildToContainer,pe=e.commitTextUpdate,ge=e.commitMount,me=e.commitUpdate,ve=e.insertBefore,ye=e.insertInContainerBefore,be=e.removeChild,we=e.removeChildFromContainer,xe=e.resetTextContent,_e=e.hideInstance,Se=e.hideTextInstance,Ce=e.unhideInstance,ke=e.unhideTextInstance,Pe=e.clearContainer,Ee=e.cloneInstance,Te=e.createContainerChildSet,Re=e.appendChildToContainerChildSet,Ie=e.finalizeContainerChildren,ze=e.replaceContainerChildren,Ae=e.cloneHiddenInstance,Le=e.cloneHiddenTextInstance,Me=e.canHydrateInstance,De=e.canHydrateTextInstance,Ne=e.isSuspenseInstancePending,Fe=e.isSuspenseInstanceFallback,Ue=e.getNextHydratableSibling,Oe=e.getFirstHydratableChild,We=e.hydrateInstance,Ge=e.hydrateTextInstance,Be=e.getNextHydratableInstanceAfterSuspenseInstance,je=e.commitHydratedContainer,He=e.commitHydratedSuspenseInstance;function Ye(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var qe=!1;function Qe(e,t){if(!e||qe)return"";qe=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),a=r.stack.split("\n"),o=i.length-1,s=a.length-1;1<=o&&0<=s&&i[o]!==a[s];)s--;for(;1<=o&&0<=s;o--,s--)if(i[o]!==a[s]){if(1!==o||1!==s)do{if(o--,0>--s||i[o]!==a[s])return"\n"+i[o].replace(" at new "," at ")}while(1<=o&&0<=s);break}}}finally{qe=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Ye(e):""}var Ve=[],Xe=-1;function $e(e){return{current:e}}function Ke(e){0>Xe||(e.current=Ve[Xe],Ve[Xe]=null,Xe--)}function Je(e,t){Xe++,Ve[Xe]=e.current,e.current=t}var Ze={},et=$e(Ze),tt=$e(!1),nt=Ze;function rt(e,t){var n=e.type.contextTypes;if(!n)return Ze;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in n)a[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function it(e){return null!=(e=e.childContextTypes)}function at(){Ke(tt),Ke(et)}function ot(e,t,n){if(et.current!==Ze)throw Error(o(168));Je(et,t),Je(tt,n)}function st(e,t,n){var i=e.stateNode;if(e=t.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var a in i=i.getChildContext())if(!(a in e))throw Error(o(108,E(t)||"Unknown",a));return r({},n,i)}function lt(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ze,nt=et.current,Je(et,e),Je(tt,tt.current),!0}function ut(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=st(e,t,nt),r.__reactInternalMemoizedMergedChildContext=e,Ke(tt),Ke(et),Je(et,e)):Ke(tt),Je(tt,n)}var ct=null,dt=null;(0,a.unstable_now)();var ht=0,ft=8;function pt(e){if(0!=(1&e))return ft=15,1;if(0!=(2&e))return ft=14,2;if(0!=(4&e))return ft=13,4;var t=24&e;return 0!==t?(ft=12,t):0!=(32&e)?(ft=11,32):0!=(t=192&e)?(ft=10,t):0!=(256&e)?(ft=9,256):0!=(t=3584&e)?(ft=8,t):0!=(4096&e)?(ft=7,4096):0!=(t=4186112&e)?(ft=6,t):0!=(t=62914560&e)?(ft=5,t):67108864&e?(ft=4,67108864):0!=(134217728&e)?(ft=3,134217728):0!=(t=805306368&e)?(ft=2,t):0!=(1073741824&e)?(ft=1,1073741824):(ft=8,e)}function gt(e,t){var n=e.pendingLanes;if(0===n)return ft=0;var r=0,i=0,a=e.expiredLanes,o=e.suspendedLanes,s=e.pingedLanes;if(0!==a)r=a,i=ft=15;else if(0!=(a=134217727&n)){var l=a&~o;0!==l?(r=pt(l),i=ft):0!=(s&=a)&&(r=pt(s),i=ft)}else 0!=(a=n&~o)?(r=pt(a),i=ft):0!==s&&(r=pt(s),i=ft);if(0===r)return 0;if(r=n&((0>(r=31-Ct(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&o)){if(pt(t),i<=ft)return t;ft=i}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-Ct(t)),r|=e[n],t&=~i;return r}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function bt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=xt(24&~t))?bt(10,t):e;case 10:return 0===(e=xt(192&~t))?bt(8,t):e;case 8:return 0===(e=xt(3584&~t))&&0===(e=xt(4186112&~t))&&(e=512),e;case 2:return 0===(t=xt(805306368&~t))&&(t=268435456),t}throw Error(o(358,e))}function xt(e){return e&-e}function _t(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function St(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ct(t)]=n}var Ct=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(kt(e)/Pt|0)|0},kt=Math.log,Pt=Math.LN2,Et=a.unstable_runWithPriority,Tt=a.unstable_scheduleCallback,Rt=a.unstable_cancelCallback,It=a.unstable_shouldYield,zt=a.unstable_requestPaint,At=a.unstable_now,Lt=a.unstable_getCurrentPriorityLevel,Mt=a.unstable_ImmediatePriority,Dt=a.unstable_UserBlockingPriority,Nt=a.unstable_NormalPriority,Ft=a.unstable_LowPriority,Ut=a.unstable_IdlePriority,Ot={},Wt=void 0!==zt?zt:function(){},Gt=null,Bt=null,jt=!1,Ht=At(),Yt=1e4>Ht?At:function(){return At()-Ht};function qt(){switch(Lt()){case Mt:return 99;case Dt:return 98;case Nt:return 97;case Ft:return 96;case Ut:return 95;default:throw Error(o(332))}}function Qt(e){switch(e){case 99:return Mt;case 98:return Dt;case 97:return Nt;case 96:return Ft;case 95:return Ut;default:throw Error(o(332))}}function Vt(e,t){return e=Qt(e),Et(e,t)}function Xt(e,t,n){return e=Qt(e),Tt(e,t,n)}function $t(){if(null!==Bt){var e=Bt;Bt=null,Rt(e)}Kt()}function Kt(){if(!jt&&null!==Gt){jt=!0;var e=0;try{var t=Gt;Vt(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Gt=null}catch(t){throw null!==Gt&&(Gt=Gt.slice(e+1)),Tt(Mt,$t),t}finally{jt=!1}}}var Jt=s.ReactCurrentBatchConfig,Zt="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},en=Object.prototype.hasOwnProperty;function tn(e,t){if(Zt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!en.call(t,n[r])||!Zt(e[n[r]],t[n[r]]))return!1;return!0}function nn(e){switch(e.tag){case 5:return Ye(e.type);case 16:return Ye("Lazy");case 13:return Ye("Suspense");case 19:return Ye("SuspenseList");case 0:case 2:case 15:return e=Qe(e.type,!1);case 11:return e=Qe(e.type.render,!1);case 22:return e=Qe(e.type._render,!1);case 1:return e=Qe(e.type,!0);default:return""}}function rn(e,t){if(e&&e.defaultProps){for(var n in t=r({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var an=$e(null),on=null,sn=null,ln=null;function un(){ln=sn=on=null}function cn(e,t){e=e.type._context,V?(Je(an,e._currentValue),e._currentValue=t):(Je(an,e._currentValue2),e._currentValue2=t)}function dn(e){var t=an.current;Ke(an),e=e.type._context,V?e._currentValue=t:e._currentValue2=t}function hn(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function fn(e,t){on=e,ln=sn=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Hr=!0),e.firstContext=null)}function pn(e,t){if(ln!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ln=e,t=1073741823),t={context:e,observedBits:t,next:null},null===sn){if(null===on)throw Error(o(308));sn=t,on.dependencies={lanes:0,firstContext:t,responders:null}}else sn=sn.next=t;return V?e._currentValue:e._currentValue2}var gn=!1;function mn(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function vn(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function yn(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function bn(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function wn(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?i=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?i=a=t:a=a.next=t}else i=a=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function xn(e,t,n,i){var a=e.updateQueue;gn=!1;var o=a.firstBaseUpdate,s=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?o=c:s.next=c,s=u;var d=e.alternate;if(null!==d){var h=(d=d.updateQueue).lastBaseUpdate;h!==s&&(null===h?d.firstBaseUpdate=c:h.next=c,d.lastBaseUpdate=u)}}if(null!==o){for(h=a.baseState,s=0,d=c=u=null;;){l=o.lane;var f=o.eventTime;if((i&l)===l){null!==d&&(d=d.next={eventTime:f,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var p=e,g=o;switch(l=t,f=n,g.tag){case 1:if("function"==typeof(p=g.payload)){h=p.call(f,h,l);break e}h=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(f,h,l):p))break e;h=r({},h,l);break e;case 2:gn=!0}}null!==o.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[o]:l.push(o))}else f={eventTime:f,lane:l,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===d?(c=d=f,u=h):d=d.next=f,s|=l;if(null===(o=o.next)){if(null===(l=a.shared.pending))break;o=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===d&&(u=h),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=d,fa|=s,e.lanes=s,e.memoizedState=h}}function _n(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(o(191,i));i.call(r)}}}var Sn=(new i.Component).refs;function Cn(e,t,n,i){n=null==(n=n(i,t=e.memoizedState))?t:r({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var kn={isMounted:function(e){return!!(e=e._reactInternals)&&T(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ua(),i=Oa(e),a=yn(r,i);a.payload=t,null!=n&&(a.callback=n),bn(e,a),Wa(e,i,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ua(),i=Oa(e),a=yn(r,i);a.tag=1,a.payload=t,null!=n&&(a.callback=n),bn(e,a),Wa(e,i,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ua(),r=Oa(e),i=yn(n,r);i.tag=2,null!=t&&(i.callback=t),bn(e,i),Wa(e,r,n)}};function Pn(e,t,n,r,i,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&tn(n,r)&&tn(i,a))}function En(e,t,n){var r=!1,i=Ze,a=t.contextType;return"object"==typeof a&&null!==a?a=pn(a):(i=it(t)?nt:et.current,a=(r=null!=(r=t.contextTypes))?rt(e,i):Ze),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=kn,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function Tn(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&kn.enqueueReplaceState(t,t.state,null)}function Rn(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Sn,mn(e);var a=t.contextType;"object"==typeof a&&null!==a?i.context=pn(a):(a=it(t)?nt:et.current,i.context=rt(e,a)),xn(e,n,i,r),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Cn(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&kn.enqueueReplaceState(i,i.state,null),xn(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var In=Array.isArray;function zn(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=r.refs;t===Sn&&(t=r.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function An(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ln(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Po(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function d(e,t,n,r){return null===t||6!==t.tag?((t=Io(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function h(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=zn(e,t,n),r.return=e,r):((r=Eo(n.type,n.key,n.props,null,e.mode,r)).ref=zn(e,t,n),r.return=e,r)}function f(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zo(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function p(e,t,n,r,a){return null===t||7!==t.tag?((t=To(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function g(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Io(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case l:return(n=Eo(t.type,t.key,t.props,null,e.mode,n)).ref=zn(e,null,t),n.return=e,n;case u:return(t=zo(t,e.mode,n)).return=e,t}if(In(t)||P(t))return(t=To(t,e.mode,n,null)).return=e,t;An(e,t)}return null}function m(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:d(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case l:return n.key===i?n.type===c?p(e,t,n.props.children,r,i):h(e,t,n,r):null;case u:return n.key===i?f(e,t,n,r):null}if(In(n)||P(n))return null!==i?null:p(e,t,n,r,null);An(e,n)}return null}function v(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return d(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case l:return e=e.get(null===r.key?n:r.key)||null,r.type===c?p(t,e,r.props.children,i,r.key):h(t,e,r,i);case u:return f(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(In(r)||P(r))return p(t,e=e.get(n)||null,r,i,null);An(t,r)}return null}function y(i,o,s,l){for(var u=null,c=null,d=o,h=o=0,f=null;null!==d&&h<s.length;h++){d.index>h?(f=d,d=null):f=d.sibling;var p=m(i,d,s[h],l);if(null===p){null===d&&(d=f);break}e&&d&&null===p.alternate&&t(i,d),o=a(p,o,h),null===c?u=p:c.sibling=p,c=p,d=f}if(h===s.length)return n(i,d),u;if(null===d){for(;h<s.length;h++)null!==(d=g(i,s[h],l))&&(o=a(d,o,h),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(i,d);h<s.length;h++)null!==(f=v(d,i,h,s[h],l))&&(e&&null!==f.alternate&&d.delete(null===f.key?h:f.key),o=a(f,o,h),null===c?u=f:c.sibling=f,c=f);return e&&d.forEach((function(e){return t(i,e)})),u}function b(i,s,l,u){var c=P(l);if("function"!=typeof c)throw Error(o(150));if(null==(l=c.call(l)))throw Error(o(151));for(var d=c=null,h=s,f=s=0,p=null,y=l.next();null!==h&&!y.done;f++,y=l.next()){h.index>f?(p=h,h=null):p=h.sibling;var b=m(i,h,y.value,u);if(null===b){null===h&&(h=p);break}e&&h&&null===b.alternate&&t(i,h),s=a(b,s,f),null===d?c=b:d.sibling=b,d=b,h=p}if(y.done)return n(i,h),c;if(null===h){for(;!y.done;f++,y=l.next())null!==(y=g(i,y.value,u))&&(s=a(y,s,f),null===d?c=y:d.sibling=y,d=y);return c}for(h=r(i,h);!y.done;f++,y=l.next())null!==(y=v(h,i,f,y.value,u))&&(e&&null!==y.alternate&&h.delete(null===y.key?f:y.key),s=a(y,s,f),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(i,e)})),c}return function(e,r,a,d){var h="object"==typeof a&&null!==a&&a.type===c&&null===a.key;h&&(a=a.props.children);var f="object"==typeof a&&null!==a;if(f)switch(a.$$typeof){case l:e:{for(f=a.key,h=r;null!==h;){if(h.key===f){if(7===h.tag){if(a.type===c){n(e,h.sibling),(r=i(h,a.props.children)).return=e,e=r;break e}}else if(h.elementType===a.type){n(e,h.sibling),(r=i(h,a.props)).ref=zn(e,h,a),r.return=e,e=r;break e}n(e,h);break}t(e,h),h=h.sibling}a.type===c?((r=To(a.props.children,e.mode,d,a.key)).return=e,e=r):((d=Eo(a.type,a.key,a.props,null,e.mode,d)).ref=zn(e,r,a),d.return=e,e=d)}return s(e);case u:e:{for(h=a.key;null!==r;){if(r.key===h){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=i(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=zo(a,e.mode,d)).return=e,e=r}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,a)).return=e,e=r):(n(e,r),(r=Io(a,e.mode,d)).return=e,e=r),s(e);if(In(a))return y(e,r,a,d);if(P(a))return b(e,r,a,d);if(f&&An(e,a),void 0===a&&!h)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(o(152,E(e.type)||"Component"))}return n(e,r)}}var Mn=Ln(!0),Dn=Ln(!1),Nn={},Fn=$e(Nn),Un=$e(Nn),On=$e(Nn);function Wn(e){if(e===Nn)throw Error(o(174));return e}function Gn(e,t){Je(On,t),Je(Un,e),Je(Fn,Nn),e=D(t),Ke(Fn),Je(Fn,e)}function Bn(){Ke(Fn),Ke(Un),Ke(On)}function jn(e){var t=Wn(On.current),n=Wn(Fn.current);n!==(t=N(n,e.type,t))&&(Je(Un,e),Je(Fn,t))}function Hn(e){Un.current===e&&(Ke(Fn),Ke(Un))}var Yn=$e(0);function qn(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||Ne(n)||Fe(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Qn=null,Vn=null,Xn=!1;function $n(e,t){var n=Co(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Kn(e,t){switch(e.tag){case 5:return null!==(t=Me(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=De(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function Jn(e){if(Xn){var t=Vn;if(t){var n=t;if(!Kn(e,t)){if(!(t=Ue(n))||!Kn(e,t))return e.flags=-1025&e.flags|2,Xn=!1,void(Qn=e);$n(Qn,n)}Qn=e,Vn=Oe(t)}else e.flags=-1025&e.flags|2,Xn=!1,Qn=e}}function Zn(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Qn=e}function er(e){if(!K||e!==Qn)return!1;if(!Xn)return Zn(e),Xn=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!j(t,e.memoizedProps))for(t=Vn;t;)$n(e,t),t=Ue(t);if(Zn(e),13===e.tag){if(!K)throw Error(o(316));if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));Vn=Be(e)}else Vn=Qn?Ue(e.stateNode):null;return!0}function tr(){K&&(Vn=Qn=null,Xn=!1)}var nr=[];function rr(){for(var e=0;e<nr.length;e++){var t=nr[e];V?t._workInProgressVersionPrimary=null:t._workInProgressVersionSecondary=null}nr.length=0}var ir=s.ReactCurrentDispatcher,ar=s.ReactCurrentBatchConfig,or=0,sr=null,lr=null,ur=null,cr=!1,dr=!1;function hr(){throw Error(o(321))}function fr(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Zt(e[n],t[n]))return!1;return!0}function pr(e,t,n,r,i,a){if(or=a,sr=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ir.current=null===e||null===e.memoizedState?Wr:Gr,e=n(r,i),dr){a=0;do{if(dr=!1,!(25>a))throw Error(o(301));a+=1,ur=lr=null,t.updateQueue=null,ir.current=Br,e=n(r,i)}while(dr)}if(ir.current=Or,t=null!==lr&&null!==lr.next,or=0,ur=lr=sr=null,cr=!1,t)throw Error(o(300));return e}function gr(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ur?sr.memoizedState=ur=e:ur=ur.next=e,ur}function mr(){if(null===lr){var e=sr.alternate;e=null!==e?e.memoizedState:null}else e=lr.next;var t=null===ur?sr.memoizedState:ur.next;if(null!==t)ur=t,lr=e;else{if(null===e)throw Error(o(310));e={memoizedState:(lr=e).memoizedState,baseState:lr.baseState,baseQueue:lr.baseQueue,queue:lr.queue,next:null},null===ur?sr.memoizedState=ur=e:ur=ur.next=e}return ur}function vr(e,t){return"function"==typeof t?t(e):t}function yr(e){var t=mr(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=lr,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var s=i.next;i.next=a.next,a.next=s}r.baseQueue=i=a,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=s=a=null,u=i;do{var c=u.lane;if((or&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=d,a=r):l=l.next=d,sr.lanes|=c,fa|=c}u=u.next}while(null!==u&&u!==i);null===l?a=r:l.next=s,Zt(r,t.memoizedState)||(Hr=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function br(e){var t=mr(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{a=e(a,s.action),s=s.next}while(s!==i);Zt(a,t.memoizedState)||(Hr=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function wr(e,t,n){var r=t._getVersion;r=r(t._source);var i=V?t._workInProgressVersionPrimary:t._workInProgressVersionSecondary;if(null!==i?e=i===r:(e=e.mutableReadLanes,(e=(or&e)===e)&&(V?t._workInProgressVersionPrimary=r:t._workInProgressVersionSecondary=r,nr.push(t))),e)return n(t._source);throw nr.push(t),Error(o(350))}function xr(e,t,n,r){var i=aa;if(null===i)throw Error(o(349));var a=t._getVersion,s=a(t._source),l=ir.current,u=l.useState((function(){return wr(i,t,n)})),c=u[1],d=u[0];u=ur;var h=e.memoizedState,f=h.refs,p=f.getSnapshot,g=h.source;h=h.subscribe;var m=sr;return e.memoizedState={refs:f,source:t,subscribe:r},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=c;var e=a(t._source);if(!Zt(s,e)){e=n(t._source),Zt(d,e)||(c(e),e=Oa(m),i.mutableReadLanes|=e&i.pendingLanes),e=i.mutableReadLanes,i.entangledLanes|=e;for(var r=i.entanglements,o=e;0<o;){var l=31-Ct(o),u=1<<l;r[l]|=e,o&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=f.getSnapshot,n=f.setSnapshot;try{n(e(t._source));var r=Oa(m);i.mutableReadLanes|=r&i.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),Zt(p,n)&&Zt(g,t)&&Zt(h,r)||((e={pending:null,dispatch:null,lastRenderedReducer:vr,lastRenderedState:d}).dispatch=c=Ur.bind(null,sr,e),u.queue=e,u.baseQueue=null,d=wr(i,t,n),u.memoizedState=u.baseState=d),d}function _r(e,t,n){return xr(mr(),e,t,n)}function Sr(e){var t=gr();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:vr,lastRenderedState:e}).dispatch=Ur.bind(null,sr,e),[t.memoizedState,e]}function Cr(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=sr.updateQueue)?(t={lastEffect:null},sr.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function kr(e){return e={current:e},gr().memoizedState=e}function Pr(){return mr().memoizedState}function Er(e,t,n,r){var i=gr();sr.flags|=e,i.memoizedState=Cr(1|t,n,void 0,void 0===r?null:r)}function Tr(e,t,n,r){var i=mr();r=void 0===r?null:r;var a=void 0;if(null!==lr){var o=lr.memoizedState;if(a=o.destroy,null!==r&&fr(r,o.deps))return void Cr(t,n,a,r)}sr.flags|=e,i.memoizedState=Cr(1|t,n,a,r)}function Rr(e,t){return Er(516,4,e,t)}function Ir(e,t){return Tr(516,4,e,t)}function zr(e,t){return Tr(4,2,e,t)}function Ar(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Lr(e,t,n){return n=null!=n?n.concat([e]):null,Tr(4,2,Ar.bind(null,t,e),n)}function Mr(){}function Dr(e,t){var n=mr();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&fr(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Nr(e,t){var n=mr();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&fr(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Fr(e,t){var n=qt();Vt(98>n?98:n,(function(){e(!0)})),Vt(97<n?97:n,(function(){var n=ar.transition;ar.transition=1;try{e(!1),t()}finally{ar.transition=n}}))}function Ur(e,t,n){var r=Ua(),i=Oa(e),a={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},o=t.pending;if(null===o?a.next=a:(a.next=o.next,o.next=a),t.pending=a,o=e.alternate,e===sr||null!==o&&o===sr)dr=cr=!0;else{if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=o(s,n);if(a.eagerReducer=o,a.eagerState=l,Zt(l,s))return}catch(e){}Wa(e,i,r)}}var Or={readContext:pn,useCallback:hr,useContext:hr,useEffect:hr,useImperativeHandle:hr,useLayoutEffect:hr,useMemo:hr,useReducer:hr,useRef:hr,useState:hr,useDebugValue:hr,useDeferredValue:hr,useTransition:hr,useMutableSource:hr,useOpaqueIdentifier:hr,unstable_isNewReconciler:!1},Wr={readContext:pn,useCallback:function(e,t){return gr().memoizedState=[e,void 0===t?null:t],e},useContext:pn,useEffect:Rr,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Er(4,2,Ar.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Er(4,2,e,t)},useMemo:function(e,t){var n=gr();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=gr();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ur.bind(null,sr,e),[r.memoizedState,e]},useRef:kr,useState:Sr,useDebugValue:Mr,useDeferredValue:function(e){var t=Sr(e),n=t[0],r=t[1];return Rr((function(){var t=ar.transition;ar.transition=1;try{r(e)}finally{ar.transition=t}}),[e]),n},useTransition:function(){var e=Sr(!1),t=e[0];return kr(e=Fr.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=gr();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},xr(r,e,t,n)},useOpaqueIdentifier:function(){if(Xn){var e=!1,t=Z((function(){throw e||(e=!0,n(ee())),Error(o(355))})),n=Sr(t)[1];return 0==(2&sr.mode)&&(sr.flags|=516,Cr(5,(function(){n(ee())}),void 0,null)),t}return Sr(t=ee()),t},unstable_isNewReconciler:!1},Gr={readContext:pn,useCallback:Dr,useContext:pn,useEffect:Ir,useImperativeHandle:Lr,useLayoutEffect:zr,useMemo:Nr,useReducer:yr,useRef:Pr,useState:function(){return yr(vr)},useDebugValue:Mr,useDeferredValue:function(e){var t=yr(vr),n=t[0],r=t[1];return Ir((function(){var t=ar.transition;ar.transition=1;try{r(e)}finally{ar.transition=t}}),[e]),n},useTransition:function(){var e=yr(vr)[0];return[Pr().current,e]},useMutableSource:_r,useOpaqueIdentifier:function(){return yr(vr)[0]},unstable_isNewReconciler:!1},Br={readContext:pn,useCallback:Dr,useContext:pn,useEffect:Ir,useImperativeHandle:Lr,useLayoutEffect:zr,useMemo:Nr,useReducer:br,useRef:Pr,useState:function(){return br(vr)},useDebugValue:Mr,useDeferredValue:function(e){var t=br(vr),n=t[0],r=t[1];return Ir((function(){var t=ar.transition;ar.transition=1;try{r(e)}finally{ar.transition=t}}),[e]),n},useTransition:function(){var e=br(vr)[0];return[Pr().current,e]},useMutableSource:_r,useOpaqueIdentifier:function(){return br(vr)[0]},unstable_isNewReconciler:!1},jr=s.ReactCurrentOwner,Hr=!1;function Yr(e,t,n,r){t.child=null===e?Dn(t,null,n,r):Mn(t,e.child,n,r)}function qr(e,t,n,r,i){n=n.render;var a=t.ref;return fn(t,i),r=pr(e,t,n,r,a,i),null===e||Hr?(t.flags|=1,Yr(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,fi(e,t,i))}function Qr(e,t,n,r,i,a){if(null===e){var o=n.type;return"function"!=typeof o||ko(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Eo(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Vr(e,t,o,r,i,a))}return o=e.child,0==(i&a)&&(i=o.memoizedProps,(n=null!==(n=n.compare)?n:tn)(i,r)&&e.ref===t.ref)?fi(e,t,a):(t.flags|=1,(e=Po(o,r)).ref=t.ref,e.return=t,t.child=e)}function Vr(e,t,n,r,i,a){if(null!==e&&tn(e.memoizedProps,r)&&e.ref===t.ref){if(Hr=!1,0==(a&i))return t.lanes=e.lanes,fi(e,t,a);0!=(16384&e.flags)&&(Hr=!0)}return Kr(e,t,n,r,a)}function Xr(e,t,n){var r=t.pendingProps,i=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},Va(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},Va(0,e),null;t.memoizedState={baseLanes:0},Va(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Va(0,r);return Yr(e,t,i,n),t.child}function $r(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Kr(e,t,n,r,i){var a=it(n)?nt:et.current;return a=rt(t,a),fn(t,i),n=pr(e,t,n,r,a,i),null===e||Hr?(t.flags|=1,Yr(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,fi(e,t,i))}function Jr(e,t,n,r,i){if(it(n)){var a=!0;lt(t)}else a=!1;if(fn(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),En(t,n,r),Rn(t,n,r,i),r=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var l=o.context,u=n.contextType;u="object"==typeof u&&null!==u?pn(u):rt(t,u=it(n)?nt:et.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||l!==u)&&Tn(t,o,r,u),gn=!1;var h=t.memoizedState;o.state=h,xn(t,r,o,i),l=t.memoizedState,s!==r||h!==l||tt.current||gn?("function"==typeof c&&(Cn(t,n,c,r),l=t.memoizedState),(s=gn||Pn(t,n,s,r,h,l,u))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4)):("function"==typeof o.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),o.props=r,o.state=l,o.context=u,r=s):("function"==typeof o.componentDidMount&&(t.flags|=4),r=!1)}else{o=t.stateNode,vn(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:rn(t.type,s),o.props=u,d=t.pendingProps,h=o.context,l="object"==typeof(l=n.contextType)&&null!==l?pn(l):rt(t,l=it(n)?nt:et.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==d||h!==l)&&Tn(t,o,r,l),gn=!1,h=t.memoizedState,o.state=h,xn(t,r,o,i);var p=t.memoizedState;s!==d||h!==p||tt.current||gn?("function"==typeof f&&(Cn(t,n,f,r),p=t.memoizedState),(u=gn||Pn(t,n,u,r,h,p,l))?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=l,r=u):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),r=!1)}return Zr(e,t,n,r,a,i)}function Zr(e,t,n,r,i,a){$r(e,t);var o=0!=(64&t.flags);if(!r&&!o)return i&&ut(t,n,!1),fi(e,t,a);r=t.stateNode,jr.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=Mn(t,e.child,null,a),t.child=Mn(t,null,s,a)):Yr(e,t,s,a),t.memoizedState=r.state,i&&ut(t,n,!0),t.child}function ei(e){var t=e.stateNode;t.pendingContext?ot(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ot(0,t.context,!1),Gn(e,t.containerInfo)}var ti,ni,ri,ii,ai={dehydrated:null,retryLane:0};function oi(e,t,n){var r,i=t.pendingProps,a=Yn.current,o=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(o=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),Je(Yn,1&a),null===e?(void 0!==i.fallback&&Jn(t),e=i.children,a=i.fallback,o?(e=si(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ai,e):"number"==typeof i.unstable_expectedLoadTime?(e=si(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=ai,t.lanes=33554432,e):((n=Ro({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,o?(i=ui(e,t,i.children,i.fallback,n),o=t.child,a=e.child.memoizedState,o.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},o.childLanes=e.childLanes&~n,t.memoizedState=ai,i):(n=li(e,t,i.children,n),t.memoizedState=null,n))}function si(e,t,n,r){var i=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&i)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Ro(t,i,0,null),n=To(n,i,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function li(e,t,n,r){var i=e.child;return e=i.sibling,n=Po(i,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function ui(e,t,n,r,i){var a=t.mode,o=e.child;e=o.sibling;var s={mode:"hidden",children:n};return 0==(2&a)&&t.child!==o?((n=t.child).childLanes=0,n.pendingProps=s,null!==(o=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=o,o.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Po(o,s),null!==e?r=Po(e,r):(r=To(r,a,i,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function ci(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),hn(e.return,t)}function di(e,t,n,r,i,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i,o.lastEffect=a)}function hi(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(Yr(e,t,r.children,n),0!=(2&(r=Yn.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ci(e,n);else if(19===e.tag)ci(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Je(Yn,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===qn(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),di(t,!1,i,n,a,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===qn(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}di(t,!0,n,null,a,t.lastEffect);break;case"together":di(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function fi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),fa|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Po(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Po(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function pi(e){e.flags|=4}if(X)ti=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)W(e,n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ni=function(){},ri=function(e,t,n,r,i){if((e=e.memoizedProps)!==r){var a=t.stateNode,o=Wn(Fn.current);n=B(a,n,e,r,i,o),(t.updateQueue=n)&&pi(t)}},ii=function(e,t,n,r){n!==r&&pi(t)};else if($){ti=function(e,t,n,r){for(var i=t.child;null!==i;){if(5===i.tag){var a=i.stateNode;n&&r&&(a=Ae(a,i.type,i.memoizedProps,i)),W(e,a)}else if(6===i.tag)a=i.stateNode,n&&r&&(a=Le(a,i.memoizedProps,i)),W(e,a);else if(4!==i.tag){if(13===i.tag&&0!=(4&i.flags)&&(a=null!==i.memoizedState)){var o=i.child;if(null!==o&&(null!==o.child&&(o.child.return=o,ti(e,o,!0,a)),null!==(a=o.sibling))){a.return=i,i=a;continue}}if(null!==i.child){i.child.return=i,i=i.child;continue}}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}};var gi=function(e,t,n,r){for(var i=t.child;null!==i;){if(5===i.tag){var a=i.stateNode;n&&r&&(a=Ae(a,i.type,i.memoizedProps,i)),Re(e,a)}else if(6===i.tag)a=i.stateNode,n&&r&&(a=Le(a,i.memoizedProps,i)),Re(e,a);else if(4!==i.tag){if(13===i.tag&&0!=(4&i.flags)&&(a=null!==i.memoizedState)){var o=i.child;if(null!==o&&(null!==o.child&&(o.child.return=o,gi(e,o,!0,a)),null!==(a=o.sibling))){a.return=i,i=a;continue}}if(null!==i.child){i.child.return=i,i=i.child;continue}}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}};ni=function(e){var t=e.stateNode;if(null!==e.firstEffect){var n=t.containerInfo,r=Te(n);gi(r,e,!1,!1),t.pendingChildren=r,pi(e),Ie(n,r)}},ri=function(e,t,n,r,i){var a=e.stateNode,o=e.memoizedProps;if((e=null===t.firstEffect)&&o===r)t.stateNode=a;else{var s=t.stateNode,l=Wn(Fn.current),u=null;o!==r&&(u=B(s,n,o,r,i,l)),e&&null===u?t.stateNode=a:(a=Ee(a,u,n,o,r,t,e,s),G(a,n,r,i,l)&&pi(t),t.stateNode=a,e?pi(t):ti(a,t,!1,!1))}},ii=function(e,t,n,r){n!==r?(e=Wn(On.current),n=Wn(Fn.current),t.stateNode=H(r,e,n,t),pi(t)):t.stateNode=e.stateNode}}else ni=function(){},ri=function(){},ii=function(){};function mi(e,t){if(!Xn)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function vi(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return it(t.type)&&at(),null;case 3:return Bn(),Ke(tt),Ke(et),rr(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(er(t)?pi(t):r.hydrate||(t.flags|=256)),ni(t),null;case 5:Hn(t);var i=Wn(On.current);if(n=t.type,null!==e&&null!=t.stateNode)ri(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=Wn(Fn.current),er(t)){if(!K)throw Error(o(175));e=We(t.stateNode,t.type,t.memoizedProps,i,e,t),t.updateQueue=e,null!==e&&pi(t)}else{var a=O(n,r,i,e,t);ti(a,t,!1,!1),t.stateNode=a,G(a,n,r,i,e)&&pi(t)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)ii(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=Wn(On.current),i=Wn(Fn.current),er(t)){if(!K)throw Error(o(176));Ge(t.stateNode,t.memoizedProps,t)&&pi(t)}else t.stateNode=H(r,e,i,t)}return null;case 13:return Ke(Yn),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,i=!1,null===e?void 0!==t.memoizedProps.fallback&&er(t):i=null!==e.memoizedState,r&&!i&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Yn.current)?0===ca&&(ca=3):(0!==ca&&3!==ca||(ca=4),null===aa||0==(134217727&fa)&&0==(134217727&pa)||Ha(aa,sa))),$&&r&&(t.flags|=4),X&&(r||i)&&(t.flags|=4),null);case 4:return Bn(),ni(t),null===e&&re(t.stateNode.containerInfo),null;case 10:return dn(t),null;case 19:if(Ke(Yn),null===(r=t.memoizedState))return null;if(i=0!=(64&t.flags),null===(a=r.rendering))if(i)mi(r,!1);else{if(0!==ca||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(a=qn(e))){for(t.flags|=64,mi(r,!1),null!==(e=a.updateQueue)&&(t.updateQueue=e,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,e=n,r=t.child;null!==r;)n=e,(i=r).flags&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(a=i.alternate)?(i.childLanes=0,i.lanes=n,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=a.childLanes,i.lanes=a.lanes,i.child=a.child,i.memoizedProps=a.memoizedProps,i.memoizedState=a.memoizedState,i.updateQueue=a.updateQueue,i.type=a.type,n=a.dependencies,i.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),r=r.sibling;return Je(Yn,1&Yn.current|2),t.child}e=e.sibling}null!==r.tail&&Yt()>ya&&(t.flags|=64,i=!0,mi(r,!1),t.lanes=33554432)}else{if(!i)if(null!==(e=qn(a))){if(t.flags|=64,i=!0,null!==(e=e.updateQueue)&&(t.updateQueue=e,t.flags|=4),mi(r,!0),null===r.tail&&"hidden"===r.tailMode&&!a.alternate&&!Xn)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Yt()-r.renderingStartTime>ya&&1073741824!==n&&(t.flags|=64,i=!0,mi(r,!1),t.lanes=33554432);r.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=r.last)?e.sibling=a:t.child=a,r.last=a)}return null!==r.tail?(e=r.tail,r.rendering=e,r.tail=e.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Yt(),e.sibling=null,t=Yn.current,Je(Yn,i?1&t|2:1&t),e):null;case 23:case 24:return Xa(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(o(156,t.tag))}function yi(e){switch(e.tag){case 1:it(e.type)&&at();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Bn(),Ke(tt),Ke(et),rr(),0!=(64&(t=e.flags)))throw Error(o(285));return e.flags=-4097&t|64,e;case 5:return Hn(e),null;case 13:return Ke(Yn),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return Ke(Yn),null;case 4:return Bn(),null;case 10:return dn(e),null;case 23:case 24:return Xa(),null;default:return null}}function bi(e,t){try{var n="",r=t;do{n+=nn(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i}}function wi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var xi="function"==typeof WeakMap?WeakMap:Map;function _i(e,t,n){(n=yn(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){_a||(_a=!0,Sa=r),wi(0,t)},n}function Si(e,t,n){(n=yn(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return wi(0,t),r(i)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ca?Ca=new Set([this]):Ca.add(this),wi(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var Ci="function"==typeof WeakSet?WeakSet:Set;function ki(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){fo(e,t)}else t.current=null}function Pi(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:rn(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(X&&256&t.flags&&Pe(t.stateNode.containerInfo))}throw Error(o(163))}function Ei(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function Ti(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var i=e;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(uo(n,e),lo(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:rn(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&_n(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=M(n.child.stateNode);break;case 1:e=n.child.stateNode}_n(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&ge(e,n.type,n.memoizedProps,n));case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(K&&null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&He(n)))))}throw Error(o(163))}function Ri(e,t){if(X)for(var n=e;;){if(5===n.tag){var r=n.stateNode;t?_e(r):Ce(n.stateNode,n.memoizedProps)}else if(6===n.tag)r=n.stateNode,t?Se(r):ke(r,n.memoizedProps);else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Ii(e,t){if(dt&&"function"==typeof dt.onCommitFiberUnmount)try{dt.onCommitFiberUnmount(ct,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))uo(t,n);else{r=t;try{i()}catch(e){fo(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ki(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){fo(t,e)}break;case 5:ki(t);break;case 4:X?Fi(e,t):$&&$&&(t=t.stateNode.containerInfo,e=Te(t),ze(t,e))}}function zi(e,t){for(var n=t;;)if(Ii(e,n),null===n.child||X&&4===n.tag){if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}else n.child.return=n,n=n.child}function Ai(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function Li(e){return 5===e.tag||3===e.tag||4===e.tag}function Mi(e){if(X){e:{for(var t=e.return;null!==t;){if(Li(t))break e;t=t.return}throw Error(o(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.flags&&(xe(t),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Li(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?Di(e,n,t):Ni(e,n,t)}}function Di(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?ye(n,e,t):fe(n,e);else if(4!==r&&null!==(e=e.child))for(Di(e,t,n),e=e.sibling;null!==e;)Di(e,t,n),e=e.sibling}function Ni(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?ve(n,e,t):he(n,e);else if(4!==r&&null!==(e=e.child))for(Ni(e,t,n),e=e.sibling;null!==e;)Ni(e,t,n),e=e.sibling}function Fi(e,t){for(var n,r,i=t,a=!1;;){if(!a){a=i.return;e:for(;;){if(null===a)throw Error(o(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===i.tag||6===i.tag)zi(e,i),r?we(n,i.stateNode):be(n,i.stateNode);else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(Ii(e,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(a=!1)}i.sibling.return=i.return,i=i.sibling}}function Ui(e,t){if(X){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void Ei(3,t);case 1:case 12:case 17:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var i=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&me(n,a,i,e,r,t)}return;case 6:if(null===t.stateNode)throw Error(o(162));return n=t.memoizedProps,void pe(t.stateNode,null!==e?e.memoizedProps:n,n);case 3:return void(K&&(t=t.stateNode,t.hydrate&&(t.hydrate=!1,je(t.containerInfo))));case 13:return Oi(t),void Wi(t);case 19:return void Wi(t);case 23:case 24:return void Ri(t,null!==t.memoizedState)}throw Error(o(163))}switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void Ei(3,t);case 12:case 23:case 24:return;case 13:return Oi(t),void Wi(t);case 19:return void Wi(t);case 3:K&&(n=t.stateNode).hydrate&&(n.hydrate=!1,je(n.containerInfo))}e:if($){switch(t.tag){case 1:case 5:case 6:case 20:break e;case 3:case 4:t=t.stateNode,ze(t.containerInfo,t.pendingChildren);break e}throw Error(o(163))}}function Oi(e){null!==e.memoizedState&&(va=Yt(),X&&Ri(e.child,!0))}function Wi(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ci),t.forEach((function(t){var r=go.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Gi(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Bi=0,ji=1,Hi=2,Yi=3,qi=4;if("function"==typeof Symbol&&Symbol.for){var Qi=Symbol.for;Bi=Qi("selector.component"),ji=Qi("selector.has_pseudo_class"),Hi=Qi("selector.role"),Yi=Qi("selector.test_id"),qi=Qi("selector.text")}function Vi(e){var t=J(e);if(null!=t){if("string"!=typeof t.memoizedProps["data-testname"])throw Error(o(364));return t}if(null===(e=ae(e)))throw Error(o(362));return e.stateNode.current}function Xi(e,t){switch(t.$$typeof){case Bi:if(e.type===t.value)return!0;break;case ji:e:{t=t.value,e=[e,0];for(var n=0;n<e.length;){var r=e[n++],i=e[n++],a=t[i];if(5!==r.tag||!le(r)){for(;null!=a&&Xi(r,a);)a=t[++i];if(i===t.length){t=!0;break e}for(r=r.child;null!==r;)e.push(r,i),r=r.sibling}}t=!1}return t;case Hi:if(5===e.tag&&ue(e.stateNode,t.value))return!0;break;case qi:if((5===e.tag||6===e.tag)&&null!==(e=se(e))&&0<=e.indexOf(t.value))return!0;break;case Yi:if(5===e.tag&&"string"==typeof(e=e.memoizedProps["data-testname"])&&e.toLowerCase()===t.value.toLowerCase())return!0;break;default:throw Error(o(365,t))}return!1}function $i(e){switch(e.$$typeof){case Bi:return"<"+(E(e.value)||"Unknown")+">";case ji:return":has("+($i(e)||"")+")";case Hi:return'[role="'+e.value+'"]';case qi:return'"'+e.value+'"';case Yi:return'[data-testname="'+e.value+'"]';default:throw Error(o(365,e))}}function Ki(e,t){var n=[];e=[e,0];for(var r=0;r<e.length;){var i=e[r++],a=e[r++],o=t[a];if(5!==i.tag||!le(i)){for(;null!=o&&Xi(i,o);)o=t[++a];if(a===t.length)n.push(i);else for(i=i.child;null!==i;)e.push(i,a),i=i.sibling}}return n}function Ji(e,t){if(!ie)throw Error(o(363));e=Ki(e=Vi(e),t),t=[],e=Array.from(e);for(var n=0;n<e.length;){var r=e[n++];if(5===r.tag)le(r)||t.push(r.stateNode);else for(r=r.child;null!==r;)e.push(r),r=r.sibling}return t}var Zi=null,ea=Math.ceil,ta=s.ReactCurrentDispatcher,na=s.ReactCurrentOwner,ra=s.IsSomeRendererActing,ia=0,aa=null,oa=null,sa=0,la=0,ua=$e(0),ca=0,da=null,ha=0,fa=0,pa=0,ga=0,ma=null,va=0,ya=1/0;function ba(){ya=Yt()+500}var wa,xa=null,_a=!1,Sa=null,Ca=null,ka=!1,Pa=null,Ea=90,Ta=[],Ra=[],Ia=null,za=0,Aa=null,La=-1,Ma=0,Da=0,Na=null,Fa=!1;function Ua(){return 0!=(48&ia)?Yt():-1!==La?La:La=Yt()}function Oa(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===qt()?1:2;if(0===Ma&&(Ma=ha),0!==Jt.transition){0!==Da&&(Da=null!==ma?ma.pendingLanes:0),e=Ma;var t=4186112&~Da;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=qt(),e=bt(0!=(4&ia)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),Ma)}function Wa(e,t,n){if(50<za)throw za=0,Aa=null,Error(o(185));if(null===(e=Ga(e,t)))return null;St(e,t,n),e===aa&&(pa|=t,4===ca&&Ha(e,sa));var r=qt();1===t?0!=(8&ia)&&0==(48&ia)?Ya(e):(Ba(e,n),0===ia&&(ba(),$t())):(0==(4&ia)||98!==r&&99!==r||(null===Ia?Ia=new Set([e]):Ia.add(e)),Ba(e,n)),ma=e}function Ga(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Ba(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,i=e.pingedLanes,a=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Ct(s),u=1<<l,c=a[l];if(-1===c){if(0==(u&r)||0!=(u&i)){c=t,pt(u);var d=ft;a[l]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=gt(e,e===aa?sa:0),t=ft,0===r)null!==n&&(n!==Ot&&Rt(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ot&&Rt(n)}15===t?(n=Ya.bind(null,e),null===Gt?(Gt=[n],Bt=Tt(Mt,Kt)):Gt.push(n),n=Ot):14===t?n=Xt(99,Ya.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(o(358,e))}}(t),n=Xt(n,ja.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function ja(e){if(La=-1,Da=Ma=0,0!=(48&ia))throw Error(o(327));var t=e.callbackNode;if(so()&&e.callbackNode!==t)return null;var n=gt(e,e===aa?sa:0);if(0===n)return null;var r=n,i=ia;ia|=16;var a=Ja();for(aa===e&&sa===r||(ba(),$a(e,r));;)try{to();break}catch(t){Ka(e,t)}if(un(),ta.current=a,ia=i,null!==oa?r=0:(aa=null,sa=0,r=ca),0!=(ha&pa))$a(e,0);else if(0!==r){if(2===r&&(ia|=64,e.hydrate&&(e.hydrate=!1,Pe(e.containerInfo)),0!==(n=mt(e))&&(r=Za(e,n))),1===r)throw t=da,$a(e,0),Ha(e,n),Ba(e,Yt()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(o(345));case 2:case 5:io(e);break;case 3:if(Ha(e,n),(62914560&n)===n&&10<(r=va+500-Yt())){if(0!==gt(e,0))break;if(((i=e.suspendedLanes)&n)!==n){Ua(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=Y(io.bind(null,e),r);break}io(e);break;case 4:if(Ha(e,n),(4186112&n)===n)break;for(r=e.eventTimes,i=-1;0<n;){var s=31-Ct(n);a=1<<s,(s=r[s])>i&&(i=s),n&=~a}if(n=i,10<(n=(120>(n=Yt()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*ea(n/1960))-n)){e.timeoutHandle=Y(io.bind(null,e),n);break}io(e);break;default:throw Error(o(329))}}return Ba(e,Yt()),e.callbackNode===t?ja.bind(null,e):null}function Ha(e,t){for(t&=~ga,t&=~pa,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ct(t),r=1<<n;e[n]=-1,t&=~r}}function Ya(e){if(0!=(48&ia))throw Error(o(327));if(so(),e===aa&&0!=(e.expiredLanes&sa)){var t=sa,n=Za(e,t);0!=(ha&pa)&&(n=Za(e,t=gt(e,t)))}else n=Za(e,t=gt(e,0));if(0!==e.tag&&2===n&&(ia|=64,e.hydrate&&(e.hydrate=!1,Pe(e.containerInfo)),0!==(t=mt(e))&&(n=Za(e,t))),1===n)throw n=da,$a(e,0),Ha(e,t),Ba(e,Yt()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,io(e),Ba(e,Yt()),null}function qa(e,t){var n=ia;ia|=1;try{return e(t)}finally{0===(ia=n)&&(ba(),$t())}}function Qa(e,t){var n=ia;if(0!=(48&n))return e(t);ia|=1;try{if(e)return Vt(99,e.bind(null,t))}finally{ia=n,$t()}}function Va(e,t){Je(ua,la),la|=t,ha|=t}function Xa(){la=ua.current,Ke(ua)}function $a(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==Q&&(e.timeoutHandle=Q,q(n)),null!==oa)for(n=oa.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&at();break;case 3:Bn(),Ke(tt),Ke(et),rr();break;case 5:Hn(r);break;case 4:Bn();break;case 13:case 19:Ke(Yn);break;case 10:dn(r);break;case 23:case 24:Xa()}n=n.return}aa=e,oa=Po(e.current,null),sa=la=ha=t,ca=0,da=null,ga=pa=fa=0}function Ka(e,t){for(;;){var n=oa;try{if(un(),ir.current=Or,cr){for(var r=sr.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}cr=!1}if(or=0,ur=lr=sr=null,dr=!1,na.current=null,null===n||null===n.return){ca=1,da=t,oa=null;break}e:{var a=e,o=n.return,s=n,l=t;if(t=sa,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&Yn.current),h=o;do{var f;if(f=13===h.tag){var p=h.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var g=h.memoizedProps;f=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(f){var m=h.updateQueue;if(null===m){var v=new Set;v.add(u),h.updateQueue=v}else m.add(u);if(0==(2&h.mode)){if(h.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=yn(-1,1);y.tag=2,bn(s,y)}s.lanes|=1;break e}l=void 0,s=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new xi,l=new Set,b.set(u,l)):void 0===(l=b.get(u))&&(l=new Set,b.set(u,l)),!l.has(s)){l.add(s);var w=po.bind(null,a,u,s);u.then(w,w)}h.flags|=4096,h.lanes=t;break e}h=h.return}while(null!==h);l=Error((E(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==ca&&(ca=2),l=bi(l,s),h=o;do{switch(h.tag){case 3:a=l,h.flags|=4096,t&=-t,h.lanes|=t,wn(h,_i(0,a,t));break e;case 1:a=l;var x=h.type,_=h.stateNode;if(0==(64&h.flags)&&("function"==typeof x.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===Ca||!Ca.has(_)))){h.flags|=4096,t&=-t,h.lanes|=t,wn(h,Si(h,a,t));break e}}h=h.return}while(null!==h)}ro(n)}catch(e){t=e,oa===n&&null!==n&&(oa=n=n.return);continue}break}}function Ja(){var e=ta.current;return ta.current=Or,null===e?Or:e}function Za(e,t){var n=ia;ia|=16;var r=Ja();for(aa===e&&sa===t||$a(e,t);;)try{eo();break}catch(t){Ka(e,t)}if(un(),ia=n,ta.current=r,null!==oa)throw Error(o(261));return aa=null,sa=0,ca}function eo(){for(;null!==oa;)no(oa)}function to(){for(;null!==oa&&!It();)no(oa)}function no(e){var t=wa(e.alternate,e,la);e.memoizedProps=e.pendingProps,null===t?ro(e):oa=t,na.current=null}function ro(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=vi(n,t,la)))return void(oa=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&la)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=yi(t)))return n.flags&=2047,void(oa=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(oa=t);oa=t=e}while(null!==t);0===ca&&(ca=5)}function io(e){var t=qt();return Vt(99,ao.bind(null,e,t)),null}function ao(e,t){do{so()}while(null!==Pa);if(0!=(48&ia))throw Error(o(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null;var r=n.lanes|n.childLanes,i=r,a=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<a;){var u=31-Ct(a),c=1<<u;i[u]=0,s[u]=-1,l[u]=-1,a&=~c}if(null!==Ia&&0==(24&r)&&Ia.has(e)&&Ia.delete(e),e===aa&&(oa=aa=null,sa=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){i=ia,ia|=32,na.current=null,Na=F(e.containerInfo),Fa=!1,xa=r;do{try{oo()}catch(e){if(null===xa)throw Error(o(330));fo(xa,e),xa=xa.nextEffect}}while(null!==xa);Na=null,xa=r;do{try{for(s=e;null!==xa;){var d=xa.flags;if(16&d&&X&&xe(xa.stateNode),128&d){var h=xa.alternate;if(null!==h){var f=h.ref;null!==f&&("function"==typeof f?f(null):f.current=null)}}switch(1038&d){case 2:Mi(xa),xa.flags&=-3;break;case 6:Mi(xa),xa.flags&=-3,Ui(xa.alternate,xa);break;case 1024:xa.flags&=-1025;break;case 1028:xa.flags&=-1025,Ui(xa.alternate,xa);break;case 4:Ui(xa.alternate,xa);break;case 8:l=s,a=xa,X?Fi(l,a):zi(l,a);var p=a.alternate;Ai(a),null!==p&&Ai(p)}xa=xa.nextEffect}}catch(e){if(null===xa)throw Error(o(330));fo(xa,e),xa=xa.nextEffect}}while(null!==xa);Fa&&ne(),U(e.containerInfo),e.current=n,xa=r;do{try{for(d=e;null!==xa;){var g=xa.flags;if(36&g&&Ti(d,xa.alternate,xa),128&g){h=void 0;var m=xa.ref;if(null!==m){var v=xa.stateNode;h=5===xa.tag?M(v):v,"function"==typeof m?m(h):m.current=h}}xa=xa.nextEffect}}catch(e){if(null===xa)throw Error(o(330));fo(xa,e),xa=xa.nextEffect}}while(null!==xa);xa=null,Wt(),ia=i}else e.current=n;if(ka)ka=!1,Pa=e,Ea=t;else for(xa=r;null!==xa;)t=xa.nextEffect,xa.nextEffect=null,8&xa.flags&&((g=xa).sibling=null,g.stateNode=null),xa=t;if(0===(r=e.pendingLanes)&&(Ca=null),1===r?e===Aa?za++:(za=0,Aa=e):za=0,n=n.stateNode,dt&&"function"==typeof dt.onCommitFiberRoot)try{dt.onCommitFiberRoot(ct,n,void 0,64==(64&n.current.flags))}catch(e){}if(Ba(e,Yt()),_a)throw _a=!1,e=Sa,Sa=null,e;return 0!=(8&ia)||$t(),null}function oo(){for(;null!==xa;){var e=xa.alternate;Fa||null===Na||(0!=(8&xa.flags)?A(xa,Na)&&(Fa=!0,te()):13===xa.tag&&Gi(e,xa)&&A(xa,Na)&&(Fa=!0,te()));var t=xa.flags;0!=(256&t)&&Pi(e,xa),0==(512&t)||ka||(ka=!0,Xt(97,(function(){return so(),null}))),xa=xa.nextEffect}}function so(){if(90!==Ea){var e=97<Ea?97:Ea;return Ea=90,Vt(e,co)}return!1}function lo(e,t){Ta.push(t,e),ka||(ka=!0,Xt(97,(function(){return so(),null})))}function uo(e,t){Ra.push(t,e),ka||(ka=!0,Xt(97,(function(){return so(),null})))}function co(){if(null===Pa)return!1;var e=Pa;if(Pa=null,0!=(48&ia))throw Error(o(331));var t=ia;ia|=32;var n=Ra;Ra=[];for(var r=0;r<n.length;r+=2){var i=n[r],a=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===a)throw Error(o(330));fo(a,e)}}for(n=Ta,Ta=[],r=0;r<n.length;r+=2){i=n[r],a=n[r+1];try{var l=i.create;i.destroy=l()}catch(e){if(null===a)throw Error(o(330));fo(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return ia=t,$t(),!0}function ho(e,t,n){bn(e,t=_i(0,t=bi(n,t),1)),t=Ua(),null!==(e=Ga(e,1))&&(St(e,1,t),Ba(e,t))}function fo(e,t){if(3===e.tag)ho(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){ho(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ca||!Ca.has(r))){var i=Si(n,e=bi(t,e),1);if(bn(n,i),i=Ua(),null!==(n=Ga(n,1)))St(n,1,i),Ba(n,i);else if("function"==typeof r.componentDidCatch&&(null===Ca||!Ca.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function po(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Ua(),e.pingedLanes|=e.suspendedLanes&n,aa===e&&(sa&n)===n&&(4===ca||3===ca&&(62914560&sa)===sa&&500>Yt()-va?$a(e,0):ga|=n),Ba(e,t)}function go(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===qt()?1:2:(0===Ma&&(Ma=ha),0===(t=xt(62914560&~Ma))&&(t=4194304))),n=Ua(),null!==(e=Ga(e,t))&&(St(e,t,n),Ba(e,n))}wa=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||tt.current)Hr=!0;else{if(0==(n&r)){switch(Hr=!1,t.tag){case 3:ei(t),tr();break;case 5:jn(t);break;case 1:it(t.type)&&lt(t);break;case 4:Gn(t,t.stateNode.containerInfo);break;case 10:cn(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?oi(e,t,n):(Je(Yn,1&Yn.current),null!==(t=fi(e,t,n))?t.sibling:null);Je(Yn,1&Yn.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return hi(e,t,n);t.flags|=64}var i=t.memoizedState;if(null!==i&&(i.rendering=null,i.tail=null,i.lastEffect=null),Je(Yn,Yn.current),r)break;return null;case 23:case 24:return t.lanes=0,Xr(e,t,n)}return fi(e,t,n)}Hr=0!=(16384&e.flags)}else Hr=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=rt(t,et.current),fn(t,n),i=pr(null,t,r,e,i,n),t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,it(r)){var a=!0;lt(t)}else a=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,mn(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&Cn(t,r,s,e),i.updater=kn,t.stateNode=i,i._reactInternals=t,Rn(t,r,e,n),t=Zr(null,t,r,!0,a,n)}else t.tag=0,Yr(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(a=i._init)(i._payload),t.type=i,a=t.tag=function(e){if("function"==typeof e)return ko(e)?1:0;if(null!=e){if((e=e.$$typeof)===g)return 11;if(e===y)return 14}return 2}(i),e=rn(i,e),a){case 0:t=Kr(null,t,i,e,n);break e;case 1:t=Jr(null,t,i,e,n);break e;case 11:t=qr(null,t,i,e,n);break e;case 14:t=Qr(null,t,i,rn(i.type,e),r,n);break e}throw Error(o(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Kr(e,t,r,i=t.elementType===r?i:rn(r,i),n);case 1:return r=t.type,i=t.pendingProps,Jr(e,t,r,i=t.elementType===r?i:rn(r,i),n);case 3:if(ei(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,vn(e,t),xn(t,r,null,n),(r=t.memoizedState.element)===i)tr(),t=fi(e,t,n);else{if((a=(i=t.stateNode).hydrate)&&(K?(Vn=Oe(t.stateNode.containerInfo),Qn=t,a=Xn=!0):a=!1),a){if(K&&null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)a=e[i],s=e[i+1],V?a._workInProgressVersionPrimary=s:a._workInProgressVersionSecondary=s,nr.push(a);for(n=Dn(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Yr(e,t,r,n),tr();t=t.child}return t;case 5:return jn(t),null===e&&Jn(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,s=i.children,j(r,i)?s=null:null!==a&&j(r,a)&&(t.flags|=16),$r(e,t),Yr(e,t,s,n),t.child;case 6:return null===e&&Jn(t),null;case 13:return oi(e,t,n);case 4:return Gn(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Mn(t,null,r,n):Yr(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,qr(e,t,r,i=t.elementType===r?i:rn(r,i),n);case 7:return Yr(e,t,t.pendingProps,n),t.child;case 8:case 12:return Yr(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,s=t.memoizedProps,cn(t,a=i.value),null!==s){var l=s.value;if(0==(a=Zt(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(s.children===i.children&&!tt.current){t=fi(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===l.tag&&((c=yn(-1,n&-n)).tag=2,bn(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),hn(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}}Yr(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(a=t.pendingProps).children,fn(t,n),r=r(i=pn(i,a.unstable_observedBits)),t.flags|=1,Yr(e,t,r,n),t.child;case 14:return a=rn(i=t.type,t.pendingProps),Qr(e,t,i,a=rn(i.type,a),r,n);case 15:return Vr(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:rn(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,it(r)?(e=!0,lt(t)):e=!1,fn(t,n),En(t,r,i),Rn(t,r,i,n),Zr(null,t,r,!0,e,n);case 19:return hi(e,t,n);case 23:case 24:return Xr(e,t,n)}throw Error(o(156,t.tag))};var mo={current:!1},vo=a.unstable_flushAllWithoutAsserting,yo="function"==typeof vo;function bo(){if(void 0!==vo)return vo();for(var e=!1;so();)e=!0;return e}function wo(e){try{bo(),function(e){if(null===Zi)try{var t=("require"+Math.random()).slice(0,7);Zi=(wt&&wt[t]).call(wt,"timers").setImmediate}catch(e){Zi=function(e){var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}Zi(e)}((function(){bo()?wo(e):e()}))}catch(t){e(t)}}var xo=0,_o=!1;function So(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Co(e,t,n,r){return new So(e,t,n,r)}function ko(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Po(e,t){var n=e.alternate;return null===n?((n=Co(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Eo(e,t,n,r,i,a){var s=2;if(r=e,"function"==typeof e)ko(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case c:return To(n.children,i,a,t);case x:s=8,i|=16;break;case d:s=8,i|=1;break;case h:return(e=Co(12,n,t,8|i)).elementType=h,e.type=h,e.lanes=a,e;case m:return(e=Co(13,n,t,i)).type=m,e.elementType=m,e.lanes=a,e;case v:return(e=Co(19,n,t,i)).elementType=v,e.lanes=a,e;case _:return Ro(n,i,a,t);case S:return(e=Co(24,n,t,i)).elementType=S,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case f:s=10;break e;case p:s=9;break e;case g:s=11;break e;case y:s=14;break e;case b:s=16,r=null;break e;case w:s=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Co(s,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function To(e,t,n,r){return(e=Co(7,e,r,t)).lanes=n,e}function Ro(e,t,n,r){return(e=Co(23,e,r,t)).elementType=_,e.lanes=n,e}function Io(e,t,n){return(e=Co(6,e,null,t)).lanes=n,e}function zo(e,t,n){return(t=Co(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ao(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=Q,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=_t(0),this.expirationTimes=_t(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=_t(0),K&&(this.mutableSourceEagerHydrationData=null)}function Lo(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return null===(e=z(t))?null:e.stateNode}function Mo(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Do(e,t){Mo(e,t),(e=e.alternate)&&Mo(e,t)}function No(e){return null===(e=z(e))?null:e.stateNode}function Fo(){return null}return t.IsThisRendererActing=mo,t.act=function(e){function t(){xo--,ra.current=n,mo.current=r}!1===_o&&(_o=!0,console.error("act(...) is not supported in production builds of React, and might not behave as expected.")),xo++;var n=ra.current,r=mo.current;ra.current=!0,mo.current=!0;try{var i=qa(e)}catch(e){throw t(),e}if(null!==i&&"object"==typeof i&&"function"==typeof i.then)return{then:function(e,r){i.then((function(){1<xo||!0===yo&&!0===n?(t(),e()):wo((function(n){t(),n?r(n):e()}))}),(function(e){t(),r(e)}))}};try{1!==xo||!1!==yo&&!1!==n||bo(),t()}catch(e){throw t(),e}return{then:function(e){e()}}},t.attemptContinuousHydration=function(e){13===e.tag&&(Wa(e,67108864,Ua()),Do(e,67108864))},t.attemptHydrationAtCurrentPriority=function(e){if(13===e.tag){var t=Ua(),n=Oa(e);Wa(e,n,t),Do(e,n)}},t.attemptSynchronousHydration=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.hydrate){var n=pt(t.pendingLanes);t.expiredLanes|=n&t.pendingLanes,Ba(t,Yt()),0==(48&ia)&&(ba(),$t())}break;case 13:var r=Ua();Qa((function(){return Wa(e,1,r)})),Do(e,4)}},t.attemptUserBlockingHydration=function(e){13===e.tag&&(Wa(e,4,Ua()),Do(e,4))},t.batchedEventUpdates=function(e,t){var n=ia;ia|=2;try{return e(t)}finally{0===(ia=n)&&(ba(),$t())}},t.batchedUpdates=qa,t.createComponentSelector=function(e){return{$$typeof:Bi,value:e}},t.createContainer=function(e,t,n){return e=new Ao(e,t,n),t=Co(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e,mn(t),e},t.createHasPsuedoClassSelector=function(e){return{$$typeof:ji,value:e}},t.createPortal=function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:u,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}},t.createRoleSelector=function(e){return{$$typeof:Hi,value:e}},t.createTestNameSelector=function(e){return{$$typeof:Yi,value:e}},t.createTextSelector=function(e){return{$$typeof:qi,value:e}},t.deferredUpdates=function(e){return Vt(97,e)},t.discreteUpdates=function(e,t,n,r,i){var a=ia;ia|=4;try{return Vt(98,e.bind(null,t,n,r,i))}finally{0===(ia=a)&&(ba(),$t())}},t.findAllNodes=Ji,t.findBoundingRects=function(e,t){if(!ie)throw Error(o(363));t=Ji(e,t),e=[];for(var n=0;n<t.length;n++)e.push(oe(t[n]));for(t=e.length-1;0<t;t--)for(var r=(n=e[t]).x,i=r+n.width,a=n.y,s=a+n.height,l=t-1;0<=l;l--)if(t!==l){var u=e[l],c=u.x,d=c+u.width,h=u.y,f=h+u.height;if(r>=c&&a>=h&&i<=d&&s<=f){e.splice(t,1);break}if(!(r!==c||n.width!==u.width||f<a||h>s)){h>a&&(u.height+=h-a,u.y=a),f<s&&(u.height=s-h),e.splice(t,1);break}if(!(a!==h||n.height!==u.height||d<r||c>i)){c>r&&(u.width+=c-r,u.x=r),d<i&&(u.width=i-c),e.splice(t,1);break}}return e},t.findHostInstance=Lo,t.findHostInstanceWithNoPortals=function(e){return e=function(e){if(!(e=I(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e),null===e?null:20===e.tag?e.stateNode.instance:e.stateNode},t.findHostInstanceWithWarning=function(e){return Lo(e)},t.flushControlled=function(e){var t=ia;ia|=1;try{Vt(99,e)}finally{0===(ia=t)&&(ba(),$t())}},t.flushDiscreteUpdates=function(){0==(49&ia)&&(function(){if(null!==Ia){var e=Ia;Ia=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,Ba(e,Yt())}))}$t()}(),so())},t.flushPassiveEffects=so,t.flushSync=Qa,t.focusWithin=function(e,t){if(!ie)throw Error(o(363));for(t=Ki(e=Vi(e),t),t=Array.from(t),e=0;e<t.length;){var n=t[e++];if(!le(n)){if(5===n.tag&&ce(n.stateNode))return!0;for(n=n.child;null!==n;)t.push(n),n=n.sibling}}return!1},t.getCurrentUpdateLanePriority=function(){return ht},t.getFindAllNodesFailureDescription=function(e,t){if(!ie)throw Error(o(363));var n=0,r=[];e=[Vi(e),0];for(var i=0;i<e.length;){var a=e[i++],s=e[i++],l=t[s];if((5!==a.tag||!le(a))&&(Xi(a,l)&&(r.push($i(l)),++s>n&&(n=s)),s<t.length))for(a=a.child;null!==a;)e.push(a,s),a=a.sibling}if(n<t.length){for(e=[];n<t.length;n++)e.push($i(t[n]));return"findAllNodes was able to match part of the selector:\n  "+r.join(" > ")+"\n\nNo matching component was found for:\n  "+e.join(" > ")}return null},t.getPublicRootInstance=function(e){return(e=e.current).child?5===e.child.tag?M(e.child.stateNode):e.child.stateNode:null},t.injectIntoDevTools=function(e){if(e={bundleType:e.bundleType,version:e.version,rendererPackageName:e.rendererPackageName,rendererConfig:e.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:s.ReactCurrentDispatcher,findHostInstanceByFiber:No,findFiberByHostInstance:e.findFiberByHostInstance||Fo,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null},"undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)e=!1;else{var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!t.isDisabled&&t.supportsFiber)try{ct=t.inject(e),dt=t}catch(e){}e=!0}return e},t.observeVisibleRects=function(e,t,n,r){if(!ie)throw Error(o(363));e=Ji(e,t);var i=de(e,n,r).disconnect;return{disconnect:function(){i()}}},t.registerMutableSourceForHydration=function(e,t){var n=t._getVersion;n=n(t._source),null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,n]:e.mutableSourceEagerHydrationData.push(t,n)},t.runWithPriority=function(e,t){var n=ht;try{return ht=e,t()}finally{ht=n}},t.shouldSuspend=function(){return!1},t.unbatchedUpdates=function(e,t){var n=ia;ia&=-2,ia|=8;try{return e(t)}finally{0===(ia=n)&&(ba(),$t())}},t.updateContainer=function(e,t,n,r){var i=t.current,a=Ua(),s=Oa(i);e:if(n){t:{if(T(n=n._reactInternals)!==n||1!==n.tag)throw Error(o(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(it(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(o(171))}if(1===n.tag){var u=n.type;if(it(u)){n=st(n,u,l);break e}}n=l}else n=Ze;return null===t.context?t.context=n:t.pendingContext=n,(t=yn(a,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),bn(i,t),Wa(i,s,a),s},t};var _t={exports:{}},St={exports:{}},Ct={},kt=0;Ct.__interactionsRef=null,Ct.__subscriberRef=null,Ct.unstable_clear=function(e){return e()},Ct.unstable_getCurrent=function(){return null},Ct.unstable_getThreadID=function(){return++kt},Ct.unstable_subscribe=function(){},Ct.unstable_trace=function(e,t,n){return n()},Ct.unstable_unsubscribe=function(){},Ct.unstable_wrap=function(e){return e};var Pt={};
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */!function(e){"production"!==process.env.NODE_ENV&&function(){var t=0,n=0;e.__interactionsRef=null,e.__subscriberRef=null,e.__interactionsRef={current:new Set},e.__subscriberRef={current:null};var r=null;function i(e){var t=!1,n=null;if(r.forEach((function(r){try{r.onInteractionTraced(e)}catch(e){t||(t=!0,n=e)}})),t)throw n}function a(e){var t=!1,n=null;if(r.forEach((function(r){try{r.onInteractionScheduledWorkCompleted(e)}catch(e){t||(t=!0,n=e)}})),t)throw n}function o(e,t){var n=!1,i=null;if(r.forEach((function(r){try{r.onWorkScheduled(e,t)}catch(e){n||(n=!0,i=e)}})),n)throw i}function s(e,t){var n=!1,i=null;if(r.forEach((function(r){try{r.onWorkStarted(e,t)}catch(e){n||(n=!0,i=e)}})),n)throw i}function l(e,t){var n=!1,i=null;if(r.forEach((function(r){try{r.onWorkStopped(e,t)}catch(e){n||(n=!0,i=e)}})),n)throw i}function u(e,t){var n=!1,i=null;if(r.forEach((function(r){try{r.onWorkCanceled(e,t)}catch(e){n||(n=!0,i=e)}})),n)throw i}r=new Set,e.unstable_clear=function(t){var n=e.__interactionsRef.current;e.__interactionsRef.current=new Set;try{return t()}finally{e.__interactionsRef.current=n}},e.unstable_getCurrent=function(){return e.__interactionsRef.current},e.unstable_getThreadID=function(){return++n},e.unstable_subscribe=function(t){r.add(t),1===r.size&&(e.__subscriberRef.current={onInteractionScheduledWorkCompleted:a,onInteractionTraced:i,onWorkCanceled:u,onWorkScheduled:o,onWorkStarted:s,onWorkStopped:l})},e.unstable_trace=function(n,r,i){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o={__count:1,id:t++,name:n,timestamp:r},s=e.__interactionsRef.current,l=new Set(s);l.add(o),e.__interactionsRef.current=l;var u,c=e.__subscriberRef.current;try{null!==c&&c.onInteractionTraced(o)}finally{try{null!==c&&c.onWorkStarted(l,a)}finally{try{u=i()}finally{e.__interactionsRef.current=s;try{null!==c&&c.onWorkStopped(l,a)}finally{o.__count--,null!==c&&0===o.__count&&c.onInteractionScheduledWorkCompleted(o)}}}}return u},e.unstable_unsubscribe=function(t){r.delete(t),0===r.size&&(e.__subscriberRef.current=null)},e.unstable_wrap=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=e.__interactionsRef.current,i=e.__subscriberRef.current;null!==i&&i.onWorkScheduled(r,n),r.forEach((function(e){e.__count++}));var a=!1;function o(){var o=e.__interactionsRef.current;e.__interactionsRef.current=r,i=e.__subscriberRef.current;try{var s;try{null!==i&&i.onWorkStarted(r,n)}finally{try{s=t.apply(void 0,arguments)}finally{e.__interactionsRef.current=o,null!==i&&i.onWorkStopped(r,n)}}return s}finally{a||(a=!0,r.forEach((function(e){e.__count--,null!==i&&0===e.__count&&i.onInteractionScheduledWorkCompleted(e)})))}}return o.cancel=function(){i=e.__subscriberRef.current;try{null!==i&&i.onWorkCanceled(r,n)}finally{r.forEach((function(e){e.__count--,i&&0===e.__count&&i.onInteractionScheduledWorkCompleted(e)}))}},o}}()}(Pt),"production"===process.env.NODE_ENV?St.exports=Ct:St.exports=Pt
/** @license React v0.26.2
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */,function(e){"production"!==process.env.NODE_ENV&&(e.exports=function(t){var r={},i=n.default,a=vt,o=yt.exports,s=St.exports,l=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function u(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];d("warn",e,n)}function c(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];d("error",e,n)}function d(e,t,n){var r=l.ReactDebugCurrentFrame.getStackAddendum();""!==r&&(t+="%s",n=n.concat([r]));var i=n.map((function(e){return""+e}));i.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,i)}var h=10,f=11,p=12,g=13,m=14,v=15,y=17,b=19,w=20,x=22,_=23,S=24;function C(e){return e._reactInternals}var k=60103,P=60106,E=60107,T=60108,R=60114,I=60109,z=60110,A=60112,L=60113,M=60120,D=60115,N=60116,F=60121,U=60129,O=60130,W=60131;if("function"==typeof Symbol&&Symbol.for){var G=Symbol.for;k=G("react.element"),P=G("react.portal"),E=G("react.fragment"),T=G("react.strict_mode"),R=G("react.profiler"),I=G("react.provider"),z=G("react.context"),A=G("react.forward_ref"),L=G("react.suspense"),M=G("react.suspense_list"),D=G("react.memo"),N=G("react.lazy"),F=G("react.block"),G("react.server.block"),G("react.fundamental"),G("react.scope"),G("react.opaque.id"),U=G("react.debug_trace_mode"),O=G("react.offscreen"),W=G("react.legacy_hidden")}var B="function"==typeof Symbol&&Symbol.iterator;function j(e){if(null===e||"object"!=typeof e)return null;var t=B&&e[B]||e["@@iterator"];return"function"==typeof t?t:null}function H(e){return e.displayName||"Context"}function Y(e){if(null==e)return null;if("number"==typeof e.tag&&c("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."),"function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case P:return"Portal";case R:return"Profiler";case T:return"StrictMode";case L:return"Suspense";case M:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case z:return H(e)+".Consumer";case I:return H(e._context)+".Provider";case A:return i=e,a=e.render,o="ForwardRef",s=a.displayName||a.name||"",i.displayName||(""!==s?o+"("+s+")":o);case D:return Y(e.type);case F:return Y(e._render);case N:var t=e,n=t._payload,r=t._init;try{return Y(r(n))}catch(e){return null}}var i,a,o,s;return null}var q=64,Q=128,V=256,X=512,$=8192,K=1024,J=2048,Z=4096,ee=16384,te=!1,ne=l.ReactCurrentOwner;function re(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{var r=t;do{0!=(1026&(t=r).flags)&&(n=t.return),r=t.return}while(r)}return 3===t.tag?n:null}function ie(e){if(re(e)!==e)throw Error("Unable to find node on an unmounted component.")}function ae(e){var t=e.alternate;if(!t){var n=re(e);if(null===n)throw Error("Unable to find node on an unmounted component.");return n!==e?null:e}for(var r=e,i=t;;){var a=r.return;if(null===a)break;var o=a.alternate;if(null===o){var s=a.return;if(null!==s){r=i=s;continue}break}if(a.child===o.child){for(var l=a.child;l;){if(l===r)return ie(a),e;if(l===i)return ie(a),t;l=l.sibling}throw Error("Unable to find node on an unmounted component.")}if(r.return!==i.return)r=a,i=o;else{for(var u=!1,c=a.child;c;){if(c===r){u=!0,r=a,i=o;break}if(c===i){u=!0,i=a,r=o;break}c=c.sibling}if(!u){for(c=o.child;c;){if(c===r){u=!0,r=o,i=a;break}if(c===i){u=!0,i=o,r=a;break}c=c.sibling}if(!u)throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.")}}if(r.alternate!==i)throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.")}if(3!==r.tag)throw Error("Unable to find node on an unmounted component.");return r.stateNode.current===r?e:t}function oe(e){var t=ae(e);if(!t)return null;for(var n=t;;){if(5===n.tag||6===n.tag)return n;if(n.child)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}function se(e,t){for(var n=t,r=e.alternate;null!==n;){if(n===e||n===r)return!0;n=n.return}return!1}var le=t.getPublicInstance,ue=t.getRootHostContext,ce=t.getChildHostContext,de=t.prepareForCommit,he=t.resetAfterCommit,fe=t.createInstance,pe=t.appendInitialChild,ge=t.finalizeInitialChildren,me=t.prepareUpdate,ve=t.shouldSetTextContent,ye=t.createTextInstance,be=t.scheduleTimeout,we=t.cancelTimeout,xe=t.noTimeout;t.now;var _e=t.isPrimaryRenderer,Se=t.warnsIfNotActing,Ce=t.supportsMutation,ke=t.supportsPersistence,Pe=t.supportsHydration;t.getFundamentalComponentInstance,t.mountFundamentalComponent,t.shouldUpdateFundamentalComponent;var Ee=t.getInstanceFromNode;t.isOpaqueHydratingObject;var Te=t.makeOpaqueHydratingObject;t.makeClientId;var Re=t.makeClientIdInDEV,Ie=t.beforeActiveInstanceBlur,ze=t.afterActiveInstanceBlur,Ae=t.preparePortalMount;t.preparePortalMount,t.getInstanceFromScope;var Le=t.supportsTestSelectors,Me=t.findFiberRoot,De=t.getBoundingRect,Ne=t.getTextContent,Fe=t.isHiddenSubtree,Ue=t.matchAccessibilityRole,Oe=t.setFocusIfFocusable,We=t.setupIntersectionObserver,Ge=t.appendChild,Be=t.appendChildToContainer,je=t.commitTextUpdate,He=t.commitMount,Ye=t.commitUpdate,qe=t.insertBefore,Qe=t.insertInContainerBefore,Ve=t.removeChild,Xe=t.removeChildFromContainer,$e=t.resetTextContent,Ke=t.hideInstance,Je=t.hideTextInstance,Ze=t.unhideInstance,et=t.unhideTextInstance;t.updateFundamentalComponent,t.unmountFundamentalComponent;var tt=t.clearContainer,nt=t.cloneInstance,rt=t.createContainerChildSet,it=t.appendChildToContainerChildSet,at=t.finalizeContainerChildren,ot=t.replaceContainerChildren,st=t.cloneHiddenInstance,lt=t.cloneHiddenTextInstance;t.cloneInstance;var ut=t.canHydrateInstance,ct=t.canHydrateTextInstance;t.canHydrateSuspenseInstance;var dt=t.isSuspenseInstancePending,ht=t.isSuspenseInstanceFallback;t.registerSuspenseInstanceRetry;var ft=t.getNextHydratableSibling,pt=t.getFirstHydratableChild,gt=t.hydrateInstance,mt=t.hydrateTextInstance;t.hydrateSuspenseInstance;var bt=t.getNextHydratableInstanceAfterSuspenseInstance,wt=t.commitHydratedContainer,xt=t.commitHydratedSuspenseInstance;t.clearSuspenseBoundary,t.clearSuspenseBoundaryFromContainer;var _t,Ct,kt,Pt,Et,Tt,Rt,It=t.didNotMatchHydratedContainerTextInstance,zt=t.didNotMatchHydratedTextInstance,At=t.didNotHydrateContainerInstance,Lt=t.didNotHydrateInstance,Mt=t.didNotFindHydratableContainerInstance,Dt=t.didNotFindHydratableContainerTextInstance,Nt=t.didNotFindHydratableContainerSuspenseInstance,Ft=t.didNotFindHydratableInstance,Ut=t.didNotFindHydratableTextInstance,Ot=t.didNotFindHydratableSuspenseInstance,Wt=0;function Gt(){}function Bt(){if(0===Wt){_t=console.log,Ct=console.info,kt=console.warn,Pt=console.error,Et=console.group,Tt=console.groupCollapsed,Rt=console.groupEnd;var e={configurable:!0,enumerable:!0,value:Gt,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Wt++}function jt(){if(0===--Wt){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:a({},e,{value:_t}),info:a({},e,{value:Ct}),warn:a({},e,{value:kt}),error:a({},e,{value:Pt}),group:a({},e,{value:Et}),groupCollapsed:a({},e,{value:Tt}),groupEnd:a({},e,{value:Rt})})}Wt<0&&c("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}Gt.__reactDisabledLog=!0;var Ht,Yt=l.ReactCurrentDispatcher;function qt(e,t,n){if(void 0===Ht)try{throw Error()}catch(e){var r=e.stack.trim().match(/\n( *(at )?)/);Ht=r&&r[1]||""}return"\n"+Ht+e}var Qt,Vt=!1,Xt="function"==typeof WeakMap?WeakMap:Map;function $t(e,t){if(!e||Vt)return"";var n,r=Qt.get(e);if(void 0!==r)return r;Vt=!0;var i,a=Error.prepareStackTrace;Error.prepareStackTrace=void 0,i=Yt.current,Yt.current=null,Bt();try{if(t){var o=function(){throw Error()};if(Object.defineProperty(o.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(o,[])}catch(e){n=e}Reflect.construct(e,[],o)}else{try{o.call()}catch(e){n=e}e.call(o.prototype)}}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var s=t.stack.split("\n"),l=n.stack.split("\n"),u=s.length-1,c=l.length-1;u>=1&&c>=0&&s[u]!==l[c];)c--;for(;u>=1&&c>=0;u--,c--)if(s[u]!==l[c]){if(1!==u||1!==c)do{if(u--,--c<0||s[u]!==l[c]){var d="\n"+s[u].replace(" at new "," at ");return"function"==typeof e&&Qt.set(e,d),d}}while(u>=1&&c>=0);break}}}finally{Vt=!1,Yt.current=i,jt(),Error.prepareStackTrace=a}var h=e?e.displayName||e.name:"",f=h?qt(h):"";return"function"==typeof e&&Qt.set(e,f),f}function Kt(e,t,n){return $t(e,!1)}function Jt(e,t,n){if(null==e)return"";if("function"==typeof e)return $t(e,!(!(r=e.prototype)||!r.isReactComponent));var r;if("string"==typeof e)return qt(e);switch(e){case L:return qt("Suspense");case M:return qt("SuspenseList")}if("object"==typeof e)switch(e.$$typeof){case A:return Kt(e.render);case D:return Jt(e.type,t,n);case F:return Kt(e._render);case N:var i=e,a=i._payload,o=i._init;try{return Jt(o(a),t,n)}catch(e){}}return""}Qt=new Xt;var Zt={},en=l.ReactDebugCurrentFrame;function tn(e){if(e){var t=e._owner,n=Jt(e.type,e._source,t?t.type:null);en.setExtraStackFrame(n)}else en.setExtraStackFrame(null)}function nn(e,t,n,r,i){var a=Function.call.bind(Object.prototype.hasOwnProperty);for(var o in e)if(a(e,o)){var s=void 0;try{if("function"!=typeof e[o]){var l=Error((r||"React class")+": "+n+" type `"+o+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[o]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw l.name="Invariant Violation",l}s=e[o](t,o,r,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){s=e}!s||s instanceof Error||(tn(i),c("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",r||"React class",n,o,typeof s),tn(null)),s instanceof Error&&!(s.message in Zt)&&(Zt[s.message]=!0,tn(i),c("Failed %s type: %s",n,s.message),tn(null))}}var rn,an=[];rn=[];var on,sn=-1;function ln(e){return{current:e}}function un(e,t){sn<0?c("Unexpected pop."):(t!==rn[sn]&&c("Unexpected Fiber popped."),e.current=an[sn],an[sn]=null,rn[sn]=null,sn--)}function cn(e,t,n){sn++,an[sn]=e.current,rn[sn]=n,e.current=t}on={};var dn={};Object.freeze(dn);var hn=ln(dn),fn=ln(!1),pn=dn;function gn(e,t,n){return n&&bn(t)?pn:hn.current}function mn(e,t,n){var r=e.stateNode;r.__reactInternalMemoizedUnmaskedChildContext=t,r.__reactInternalMemoizedMaskedChildContext=n}function vn(e,t){var n=e.type,r=n.contextTypes;if(!r)return dn;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var a={};for(var o in r)a[o]=t[o];return nn(r,a,"context",Y(n)||"Unknown"),i&&mn(e,t,a),a}function yn(){return fn.current}function bn(e){var t=e.childContextTypes;return null!=t}function wn(e){un(fn,e),un(hn,e)}function xn(e){un(fn,e),un(hn,e)}function _n(e,t,n){if(hn.current!==dn)throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");cn(hn,t,e),cn(fn,n,e)}function Sn(e,t,n){var r=e.stateNode,i=t.childContextTypes;if("function"!=typeof r.getChildContext){var o=Y(t)||"Unknown";return on[o]||(on[o]=!0,c("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",o,o)),n}var s=r.getChildContext();for(var l in s)if(!(l in i))throw Error((Y(t)||"Unknown")+'.getChildContext(): key "'+l+'" is not defined in childContextTypes.');return nn(i,s,"child context",Y(t)||"Unknown"),a({},n,s)}function Cn(e){var t=e.stateNode,n=t&&t.__reactInternalMemoizedMergedChildContext||dn;return pn=hn.current,cn(hn,n,e),cn(fn,fn.current,e),!0}function kn(e,t,n){var r=e.stateNode;if(!r)throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");if(n){var i=Sn(e,t,pn);r.__reactInternalMemoizedMergedChildContext=i,un(fn,e),un(hn,e),cn(hn,i,e),cn(fn,n,e)}else un(fn,e),cn(fn,n,e)}function Pn(e){if(!function(e){return re(e)===e}(e)||1!==e.tag)throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");var t=e;do{switch(t.tag){case 3:return t.stateNode.context;case 1:if(bn(t.type))return t.stateNode.__reactInternalMemoizedMergedChildContext}t=t.return}while(null!==t);throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.")}var En=null,Tn=null,Rn=!1,In="undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__;function zn(e,t){if(Tn&&"function"==typeof Tn.onCommitFiberRoot)try{var n=(e.current.flags&q)===q;Tn.onCommitFiberRoot(En,e,t,n)}catch(e){Rn||(Rn=!0,c("React instrumentation encountered an error: %s",e))}}var An=o.unstable_now;if(null==s.__interactionsRef||null==s.__interactionsRef.current)throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");An();var Ln=15,Mn=10,Dn=3584,Nn=4186112,Fn=62914560,Un=33554432,On=67108864,Wn=134217727,Gn=134217728,Bn=805306368,jn=1073741824,Hn=-1,Yn=0;function qn(){return Yn}function Qn(e){Yn=e}var Vn=8;function Xn(e){if(0!=(1&e))return Vn=Ln,1;if(0!=(2&e))return Vn=14,2;if(0!=(4&e))return Vn=13,4;var t=24&e;if(0!==t)return Vn=12,t;if(0!=(32&e))return Vn=11,32;var n=192&e;if(0!==n)return Vn=Mn,n;if(0!=(256&e))return Vn=9,256;var r=Dn&e;if(0!==r)return Vn=8,r;if(0!=(4096&e))return Vn=7,4096;var i=Nn&e;if(0!==i)return Vn=6,i;var a=Fn&e;if(0!==a)return Vn=5,a;if(e&On)return Vn=4,On;if(0!=(e&Gn))return Vn=3,Gn;var o=Bn&e;return 0!==o?(Vn=2,o):0!=(jn&e)?(Vn=1,jn):(c("Should have found matching lanes. This is a bug in React."),Vn=8,e)}function $n(e,t){var n=e.pendingLanes;if(0===n)return Vn=0,0;var r=0,i=0,a=e.expiredLanes,o=e.suspendedLanes,s=e.pingedLanes;if(0!==a)r=a,i=Vn=Ln;else{var l=n&Wn;if(0!==l){var u=l&~o;if(0!==u)r=Xn(u),i=Vn;else{var c=l&s;0!==c&&(r=Xn(c),i=Vn)}}else{var d=n&~o;0!==d?(r=Xn(d),i=Vn):0!==s&&(r=Xn(s),i=Vn)}}if(0===r)return 0;if(r=n&function(e){return(function(e){var t=31-hr(e);return t<0?0:1<<t}(e)<<1)-1}(r),0!==t&&t!==r&&0==(t&o)){if(Xn(t),i<=Vn)return t;Vn=i}var h=e.entangledLanes;if(0!==h)for(var f=e.entanglements,p=r&h;p>0;){var g=rr(p),m=1<<g;r|=f[g],p&=~m}return r}function Kn(e,t){Xn(e);return Vn>=Mn?t+250:Vn>=6?t+5e3:Hn}function Jn(e){var t=-1073741825&e.pendingLanes;return 0!==t?t:t&jn?jn:0}function Zn(e){return 0!=(e&Wn)}function er(e){return(e&Fn)===e}function tr(e,t){switch(e){case 0:break;case Ln:return 1;case 14:return 2;case 12:var n=nr(24&~t);return 0===n?tr(Mn,t):n;case Mn:var r=nr(192&~t);return 0===r?tr(8,t):r;case 8:var i=nr(Dn&~t);return 0===i&&0===(i=nr(Nn&~t))&&(i=nr(Dn)),i;case 6:case 5:break;case 2:var a=nr(Bn&~t);return 0===a&&(a=nr(Bn)),a}throw Error("Invalid update priority: "+e+". This is a bug in React.")}function nr(e){return function(e){return e&-e}(e)}function rr(e){return 31-hr(e)}function ir(e,t){return 0!=(e&t)}function ar(e,t){return(e&t)===t}function or(e,t){return e|t}function sr(e,t){return e&~t}function lr(e){for(var t=[],n=0;n<31;n++)t.push(e);return t}function ur(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,e.eventTimes[rr(t)]=n}function cr(e,t,n){e.pingedLanes|=e.suspendedLanes&t}function dr(e,t){e.mutableReadLanes|=t&e.pendingLanes}var hr=Math.clz32?Math.clz32:function(e){if(0===e)return 32;return 31-(fr(e)/pr|0)|0},fr=Math.log,pr=Math.LN2;var gr=o.unstable_runWithPriority,mr=o.unstable_scheduleCallback,vr=o.unstable_cancelCallback,yr=o.unstable_shouldYield,br=o.unstable_requestPaint,wr=o.unstable_now,xr=o.unstable_getCurrentPriorityLevel,_r=o.unstable_ImmediatePriority,Sr=o.unstable_UserBlockingPriority,Cr=o.unstable_NormalPriority,kr=o.unstable_LowPriority,Pr=o.unstable_IdlePriority;if(null==s.__interactionsRef||null==s.__interactionsRef.current)throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");var Er={},Tr=99,Rr=98,Ir=97,zr=yr,Ar=void 0!==br?br:function(){},Lr=null,Mr=null,Dr=!1,Nr=wr(),Fr=Nr<1e4?wr:function(){return wr()-Nr};function Ur(){switch(xr()){case _r:return Tr;case Sr:return Rr;case Cr:return Ir;case kr:return 96;case Pr:return 95;default:throw Error("Unknown priority level.")}}function Or(e){switch(e){case Tr:return _r;case Rr:return Sr;case Ir:return Cr;case 96:return kr;case 95:return Pr;default:throw Error("Unknown priority level.")}}function Wr(e,t){var n=Or(e);return gr(n,t)}function Gr(e,t,n){var r=Or(e);return mr(r,t,n)}function Br(e){e!==Er&&vr(e)}function jr(){if(null!==Mr){var e=Mr;Mr=null,vr(e)}Hr()}function Hr(){if(!Dr&&null!==Lr){Dr=!0;var e=0;try{var t=Lr;Wr(Tr,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(true)}while(null!==n)}})),Lr=null}catch(t){throw null!==Lr&&(Lr=Lr.slice(e+1)),mr(_r,jr),t}finally{Dr=!1}}}var Yr=l.ReactCurrentBatchConfig;var qr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Qr=Object.prototype.hasOwnProperty;function Vr(e,t){if(qr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!Qr.call(t,n[i])||!qr(e[n[i]],t[n[i]]))return!1;return!0}function Xr(e){switch(e._debugOwner&&e._debugOwner.type,e._debugSource,e.tag){case 5:return qt(e.type);case 16:return qt("Lazy");case g:return qt("Suspense");case b:return qt("SuspenseList");case 0:case 2:case v:return Kt(e.type);case f:return Kt(e.type.render);case x:return Kt(e.type._render);case 1:return $t(e.type,!0);default:return""}}function $r(e){try{var t="",n=e;do{t+=Xr(n),n=n.return}while(n);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}var Kr=l.ReactDebugCurrentFrame,Jr=null,Zr=!1;function ei(){return null===Jr?"":$r(Jr)}function ti(){Kr.getCurrentStack=null,Jr=null,Zr=!1}function ni(e){Kr.getCurrentStack=ei,Jr=e,Zr=!1}function ri(e){Zr=e}var ii={recordUnsafeLifecycleWarnings:function(e,t){},flushPendingUnsafeLifecycleWarnings:function(){},recordLegacyContextWarning:function(e,t){},flushLegacyContextWarning:function(){},discardPendingWarnings:function(){}},ai=function(e){var t=[];return e.forEach((function(e){t.push(e)})),t.sort().join(", ")},oi=[],si=[],li=[],ui=[],ci=[],di=[],hi=new Set;ii.recordUnsafeLifecycleWarnings=function(e,t){hi.has(e.type)||("function"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&oi.push(e),1&e.mode&&"function"==typeof t.UNSAFE_componentWillMount&&si.push(e),"function"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&li.push(e),1&e.mode&&"function"==typeof t.UNSAFE_componentWillReceiveProps&&ui.push(e),"function"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&ci.push(e),1&e.mode&&"function"==typeof t.UNSAFE_componentWillUpdate&&di.push(e))},ii.flushPendingUnsafeLifecycleWarnings=function(){var e=new Set;oi.length>0&&(oi.forEach((function(t){e.add(Y(t.type)||"Component"),hi.add(t.type)})),oi=[]);var t=new Set;si.length>0&&(si.forEach((function(e){t.add(Y(e.type)||"Component"),hi.add(e.type)})),si=[]);var n=new Set;li.length>0&&(li.forEach((function(e){n.add(Y(e.type)||"Component"),hi.add(e.type)})),li=[]);var r=new Set;ui.length>0&&(ui.forEach((function(e){r.add(Y(e.type)||"Component"),hi.add(e.type)})),ui=[]);var i=new Set;ci.length>0&&(ci.forEach((function(e){i.add(Y(e.type)||"Component"),hi.add(e.type)})),ci=[]);var a=new Set;(di.length>0&&(di.forEach((function(e){a.add(Y(e.type)||"Component"),hi.add(e.type)})),di=[]),t.size>0)&&c("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",ai(t));r.size>0&&c("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s",ai(r));a.size>0&&c("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",ai(a));e.size>0&&u("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",ai(e));n.size>0&&u("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",ai(n));i.size>0&&u("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",ai(i))};var fi=new Map,pi=new Set;function gi(e,t){if(e&&e.defaultProps){var n=a({},t),r=e.defaultProps;for(var i in r)void 0===n[i]&&(n[i]=r[i]);return n}return t}ii.recordLegacyContextWarning=function(e,t){var n=function(e){for(var t=null,n=e;null!==n;)1&n.mode&&(t=n),n=n.return;return t}(e);if(null!==n){if(!pi.has(e.type)){var r=fi.get(n);(null!=e.type.contextTypes||null!=e.type.childContextTypes||null!==t&&"function"==typeof t.getChildContext)&&(void 0===r&&(r=[],fi.set(n,r)),r.push(e))}}else c("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.")},ii.flushLegacyContextWarning=function(){fi.forEach((function(e,t){if(0!==e.length){var n=e[0],r=new Set;e.forEach((function(e){r.add(Y(e.type)||"Component"),pi.add(e.type)}));var i=ai(r);try{ni(n),c("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context",i)}finally{ti()}}}))},ii.discardPendingWarnings=function(){oi=[],si=[],li=[],ui=[],ci=[],di=[],fi=new Map};var mi,vi=1073741823,yi=ln(null);mi={};var bi=null,wi=null,xi=null,_i=!1;function Si(){bi=null,wi=null,xi=null,_i=!1}function Ci(){_i=!0}function ki(){_i=!1}function Pi(e,t){var n=e.type._context;_e?(cn(yi,n._currentValue,e),n._currentValue=t,void 0!==n._currentRenderer&&null!==n._currentRenderer&&n._currentRenderer!==mi&&c("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),n._currentRenderer=mi):(cn(yi,n._currentValue2,e),n._currentValue2=t,void 0!==n._currentRenderer2&&null!==n._currentRenderer2&&n._currentRenderer2!==mi&&c("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),n._currentRenderer2=mi)}function Ei(e){var t=yi.current;un(yi,e);var n=e.type._context;_e?n._currentValue=t:n._currentValue2=t}function Ti(e,t){for(var n=e;null!==n;){var r=n.alternate;if(ar(n.childLanes,t)){if(null===r||ar(r.childLanes,t))break;r.childLanes=or(r.childLanes,t)}else n.childLanes=or(n.childLanes,t),null!==r&&(r.childLanes=or(r.childLanes,t));n=n.return}}function Ri(e,t){bi=e,wi=null,xi=null;var n=e.dependencies;null!==n&&(null!==n.firstContext&&(ir(n.lanes,t)&&Rl(),n.firstContext=null))}function Ii(e,t){if(_i&&c("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."),xi===e);else if(!1===t||0===t);else{var n;"number"!=typeof t||t===vi?(xi=e,n=vi):n=t;var r={context:e,observedBits:n,next:null};if(null===wi){if(null===bi)throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");wi=r,bi.dependencies={lanes:0,firstContext:r,responders:null}}else wi=wi.next=r}return _e?e._currentValue:e._currentValue2}var zi,Ai,Li=2,Mi=!1;function Di(e){var t={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null};e.updateQueue=t}function Ni(e,t){var n=t.updateQueue,r=e.updateQueue;if(n===r){var i={baseState:r.baseState,firstBaseUpdate:r.firstBaseUpdate,lastBaseUpdate:r.lastBaseUpdate,shared:r.shared,effects:r.effects};t.updateQueue=i}}function Fi(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ui(e,t){var n=e.updateQueue;if(null!==n){var r=n.shared,i=r.pending;null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Ai!==r||zi||(c("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."),zi=!0)}}function Oi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r){var i=r.updateQueue;if(n===i){var a=null,o=null,s=n.firstBaseUpdate;if(null!==s){var l=s;do{var u={eventTime:l.eventTime,lane:l.lane,tag:l.tag,payload:l.payload,callback:l.callback,next:null};null===o?a=o=u:(o.next=u,o=u),l=l.next}while(null!==l);null===o?a=o=t:(o.next=t,o=t)}else a=o=t;return n={baseState:i.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:i.shared,effects:i.effects},void(e.updateQueue=n)}}var c=n.lastBaseUpdate;null===c?n.firstBaseUpdate=t:c.next=t,n.lastBaseUpdate=t}function Wi(e,t,n,r,i,o){switch(n.tag){case 1:var s=n.payload;if("function"==typeof s){Ci();var l=s.call(o,r,i);if(1&e.mode){Bt();try{s.call(o,r,i)}finally{jt()}}return ki(),l}return s;case 3:e.flags=-4097&e.flags|q;case 0:var u,c=n.payload;if("function"==typeof c){if(Ci(),u=c.call(o,r,i),1&e.mode){Bt();try{c.call(o,r,i)}finally{jt()}}ki()}else u=c;return null==u?r:a({},r,u);case Li:return Mi=!0,r}return r}function Gi(e,t,n,r){var i=e.updateQueue;Mi=!1,Ai=i.shared;var a=i.firstBaseUpdate,o=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,u=l.next;l.next=null,null===o?a=u:o.next=u,o=l;var c=e.alternate;if(null!==c){var d=c.updateQueue,h=d.lastBaseUpdate;h!==o&&(null===h?d.firstBaseUpdate=u:h.next=u,d.lastBaseUpdate=l)}}if(null!==a){for(var f=i.baseState,p=0,g=null,m=null,v=null,y=a;;){var b=y.lane,w=y.eventTime;if(ar(r,b)){if(null!==v){var x={eventTime:w,lane:0,tag:y.tag,payload:y.payload,callback:y.callback,next:null};v=v.next=x}if(f=Wi(e,0,y,f,t,n),null!==y.callback){e.flags|=32;var _=i.effects;null===_?i.effects=[y]:_.push(y)}}else{var S={eventTime:w,lane:b,tag:y.tag,payload:y.payload,callback:y.callback,next:null};null===v?(m=v=S,g=f):v=v.next=S,p=or(p,b)}if(null===(y=y.next)){if(null===(s=i.shared.pending))break;var C=s,k=C.next;C.next=null,y=k,i.lastBaseUpdate=C,i.shared.pending=null}}null===v&&(g=f),i.baseState=g,i.firstBaseUpdate=m,i.lastBaseUpdate=v,$c(p),e.lanes=p,e.memoizedState=f}Ai=null}function Bi(e,t){if("function"!=typeof e)throw Error("Invalid argument passed as callback. Expected a function. Instead received: "+e);e.call(t)}function ji(){Mi=!1}function Hi(){return Mi}function Yi(e,t,n){var r=t.effects;if(t.effects=null,null!==r)for(var i=0;i<r.length;i++){var a=r[i],o=a.callback;null!==o&&(a.callback=null,Bi(o,n))}}zi=!1,Ai=null;var qi,Qi,Vi,Xi,$i,Ki,Ji,Zi,ea,ta,na={},ra=Array.isArray,ia=(new i.Component).refs;qi=new Set,Qi=new Set,Vi=new Set,Xi=new Set,Zi=new Set,$i=new Set,ea=new Set,ta=new Set;var aa=new Set;function oa(e,t,n,r){var i=e.memoizedState;if(1&e.mode){Bt();try{n(r,i)}finally{jt()}}var o=n(r,i);Ki(t,o);var s=null==o?i:a({},i,o);(e.memoizedState=s,0===e.lanes)&&(e.updateQueue.baseState=s)}Ji=function(e,t){if(null!==e&&"function"!=typeof e){var n=t+"_"+e;aa.has(n)||(aa.add(n),c("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e))}},Ki=function(e,t){if(void 0===t){var n=Y(e)||"Component";$i.has(n)||($i.add(n),c("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",n))}},Object.defineProperty(na,"_processChildContext",{enumerable:!1,value:function(){throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).")}}),Object.freeze(na);var sa,la,ua,ca,da,ha={isMounted:function(e){var t=ne.current;if(null!==t&&1===t.tag){var n=t,r=n.stateNode;r._warnedAboutRefsInRender||c("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",Y(n.type)||"A component"),r._warnedAboutRefsInRender=!0}var i=C(e);return!!i&&re(i)===i},enqueueSetState:function(e,t,n){var r=C(e),i=zc(),a=Ac(r),o=Fi(i,a);o.payload=t,null!=n&&(Ji(n,"setState"),o.callback=n),Ui(r,o),Mc(r,a,i)},enqueueReplaceState:function(e,t,n){var r=C(e),i=zc(),a=Ac(r),o=Fi(i,a);o.tag=1,o.payload=t,null!=n&&(Ji(n,"replaceState"),o.callback=n),Ui(r,o),Mc(r,a,i)},enqueueForceUpdate:function(e,t){var n=C(e),r=zc(),i=Ac(n),a=Fi(r,i);a.tag=Li,null!=t&&(Ji(t,"forceUpdate"),a.callback=t),Ui(n,a),Mc(n,i,r)}};function fa(e,t,n,r,i,a,o){var s=e.stateNode;if("function"==typeof s.shouldComponentUpdate){if(1&e.mode){Bt();try{s.shouldComponentUpdate(r,a,o)}finally{jt()}}var l=s.shouldComponentUpdate(r,a,o);return void 0===l&&c("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",Y(t)||"Component"),l}return!t.prototype||!t.prototype.isPureReactComponent||(!Vr(n,r)||!Vr(i,a))}function pa(e,t){var n;t.updater=ha,e.stateNode=t,n=e,t._reactInternals=n,t._reactInternalInstance=na}function ga(e,t,n){var r=!1,i=dn,a=dn,o=t.contextType;if("contextType"in t&&(!(null===o||void 0!==o&&o.$$typeof===z&&void 0===o._context)&&!ta.has(t))){ta.add(t);var s="";s=void 0===o?" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.":"object"!=typeof o?" However, it is set to a "+typeof o+".":o.$$typeof===I?" Did you accidentally pass the Context.Provider instead?":void 0!==o._context?" Did you accidentally pass the Context.Consumer instead?":" However, it is set to an object with keys {"+Object.keys(o).join(", ")+"}.",c("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",Y(t)||"Component",s)}if("object"==typeof o&&null!==o)a=Ii(o);else{i=gn(0,t,!0);var l=t.contextTypes;a=(r=null!=l)?vn(e,i):dn}if(1&e.mode){Bt();try{new t(n,a)}finally{jt()}}var u=new t(n,a),d=e.memoizedState=null!==u.state&&void 0!==u.state?u.state:null;if(pa(e,u),"function"==typeof t.getDerivedStateFromProps&&null===d){var h=Y(t)||"Component";Qi.has(h)||(Qi.add(h),c("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",h,null===u.state?"null":"undefined",h))}if("function"==typeof t.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate){var f=null,p=null,g=null;if("function"==typeof u.componentWillMount&&!0!==u.componentWillMount.__suppressDeprecationWarning?f="componentWillMount":"function"==typeof u.UNSAFE_componentWillMount&&(f="UNSAFE_componentWillMount"),"function"==typeof u.componentWillReceiveProps&&!0!==u.componentWillReceiveProps.__suppressDeprecationWarning?p="componentWillReceiveProps":"function"==typeof u.UNSAFE_componentWillReceiveProps&&(p="UNSAFE_componentWillReceiveProps"),"function"==typeof u.componentWillUpdate&&!0!==u.componentWillUpdate.__suppressDeprecationWarning?g="componentWillUpdate":"function"==typeof u.UNSAFE_componentWillUpdate&&(g="UNSAFE_componentWillUpdate"),null!==f||null!==p||null!==g){var m=Y(t)||"Component",v="function"==typeof t.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";Xi.has(m)||(Xi.add(m),c("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles",m,v,null!==f?"\n  "+f:"",null!==p?"\n  "+p:"",null!==g?"\n  "+g:""))}}return r&&mn(e,i,a),u}function ma(e,t,n,r){var i=t.state;if("function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==i){var a=Y(e.type)||"Component";qi.has(a)||(qi.add(a),c("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",a)),ha.enqueueReplaceState(t,t.state,null)}}function va(e,t,n,r){!function(e,t,n){var r=e.stateNode,i=Y(t)||"Component";r.render||(t.prototype&&"function"==typeof t.prototype.render?c("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",i):c("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",i)),!r.getInitialState||r.getInitialState.isReactClassApproved||r.state||c("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",i),r.getDefaultProps&&!r.getDefaultProps.isReactClassApproved&&c("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",i),r.propTypes&&c("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",i),r.contextType&&c("contextType was defined as an instance property on %s. Use a static property to define contextType instead.",i),r.contextTypes&&c("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",i),t.contextType&&t.contextTypes&&!ea.has(t)&&(ea.add(t),c("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.",i)),"function"==typeof r.componentShouldUpdate&&c("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",i),t.prototype&&t.prototype.isPureReactComponent&&void 0!==r.shouldComponentUpdate&&c("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",Y(t)||"A pure component"),"function"==typeof r.componentDidUnmount&&c("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",i),"function"==typeof r.componentDidReceiveProps&&c("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",i),"function"==typeof r.componentWillRecieveProps&&c("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",i),"function"==typeof r.UNSAFE_componentWillRecieveProps&&c("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",i);var a=r.props!==n;void 0!==r.props&&a&&c("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",i,i),r.defaultProps&&c("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",i,i),"function"!=typeof r.getSnapshotBeforeUpdate||"function"==typeof r.componentDidUpdate||Vi.has(t)||(Vi.add(t),c("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",Y(t))),"function"==typeof r.getDerivedStateFromProps&&c("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",i),"function"==typeof r.getDerivedStateFromError&&c("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",i),"function"==typeof t.getSnapshotBeforeUpdate&&c("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",i);var o=r.state;o&&("object"!=typeof o||ra(o))&&c("%s.state: must be set to an object or null",i),"function"==typeof r.getChildContext&&"object"!=typeof t.childContextTypes&&c("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",i)}(e,t,n);var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=ia,Di(e);var a=t.contextType;if("object"==typeof a&&null!==a)i.context=Ii(a);else{var o=gn(0,t,!0);i.context=vn(e,o)}if(i.state===n){var s=Y(t)||"Component";Zi.has(s)||(Zi.add(s),c("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",s))}1&e.mode&&ii.recordLegacyContextWarning(e,i),ii.recordUnsafeLifecycleWarnings(e,i),Gi(e,n,i,r),i.state=e.memoizedState;var l=t.getDerivedStateFromProps;"function"==typeof l&&(oa(e,t,l,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(!function(e,t){var n=t.state;"function"==typeof t.componentWillMount&&t.componentWillMount(),"function"==typeof t.UNSAFE_componentWillMount&&t.UNSAFE_componentWillMount(),n!==t.state&&(c("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",Y(e.type)||"Component"),ha.enqueueReplaceState(t,t.state,null))}(e,i),Gi(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var ya;sa=!1,la=!1,ua={},ca={},da={},ya=function(e,t){if(null!==e&&"object"==typeof e&&e._store&&!e._store.validated&&null==e.key){if("object"!=typeof e._store)throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");e._store.validated=!0;var n=Y(t.type)||"Component";ca[n]||(ca[n]=!0,c('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'))}};var ba=Array.isArray;function wa(e,t,n){var r=n.ref;if(null!==r&&"function"!=typeof r&&"object"!=typeof r){if(1&e.mode&&(!n._owner||!n._self||n._owner.stateNode===n._self)){var i=Y(e.type)||"Component";ua[i]||(c('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',r),ua[i]=!0)}if(n._owner){var a,o=n._owner;if(o){var s=o;if(1!==s.tag)throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");a=s.stateNode}if(!a)throw Error("Missing owner for string ref "+r+". This error is likely caused by a bug in React. Please file an issue.");var l=""+r;if(null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l)return t.ref;var u=function(e){var t=a.refs;t===ia&&(t=a.refs={}),null===e?delete t[l]:t[l]=e};return u._stringRef=l,u}if("string"!=typeof r)throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");if(!n._owner)throw Error("Element ref was specified as a string ("+r+") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.")}return r}function xa(e,t){if("textarea"!==e.type)throw Error("Objects are not valid as a React child (found: "+("[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}function _a(e){var t=Y(e.type)||"Component";da[t]||(da[t]=!0,c("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."))}function Sa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(var i=r;null!==i;)t(n,i),i=i.sibling;return null}function r(e,t){for(var n=new Map,r=t;null!==r;)null!==r.key?n.set(r.key,r):n.set(r.index,r),r=r.sibling;return n}function i(e,t){var n=ch(e,t);return n.index=0,n.sibling=null,n}function a(t,n,r){if(t.index=r,!e)return n;var i=t.alternate;if(null!==i){var a=i.index;return a<n?(t.flags=2,n):a}return t.flags=2,n}function o(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){if(null===t||6!==t.tag){var a=mh(n,e.mode,r);return a.return=e,a}var o=i(t,n);return o.return=e,o}function l(e,t,n,r){if(null!==t&&(t.elementType===n.type||Xd(t,n))){var a=i(t,n.props);return a.ref=wa(e,t,n),a.return=e,a._debugSource=n._source,a._debugOwner=n._owner,a}var o=fh(n,e.mode,r);return o.ref=wa(e,t,n),o.return=e,o}function u(e,t,n,r){if(null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation){var a=vh(n,e.mode,r);return a.return=e,a}var o=i(t,n.children||[]);return o.return=e,o}function d(e,t,n,r,a){if(null===t||7!==t.tag){var o=ph(n,e.mode,r,a);return o.return=e,o}var s=i(t,n);return s.return=e,s}function h(e,t,n){if("string"==typeof t||"number"==typeof t){var r=mh(""+t,e.mode,n);return r.return=e,r}if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:var i=fh(t,e.mode,n);return i.ref=wa(e,null,t),i.return=e,i;case P:var a=vh(t,e.mode,n);return a.return=e,a}if(ba(t)||j(t)){var o=ph(t,e.mode,n,null);return o.return=e,o}xa(e,t)}return"function"==typeof t&&_a(e),null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===i?n.type===E?d(e,t,n.props.children,r,i):l(e,t,n,r):null;case P:return n.key===i?u(e,t,n,r):null}if(ba(n)||j(n))return null!==i?null:d(e,t,n,r,null);xa(e,n)}return"function"==typeof n&&_a(e),null}function g(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return s(t,e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:var a=e.get(null===r.key?n:r.key)||null;return r.type===E?d(t,a,r.props.children,i,r.key):l(t,a,r,i);case P:return u(t,e.get(null===r.key?n:r.key)||null,r,i)}if(ba(r)||j(r))return d(t,e.get(n)||null,r,i,null);xa(t,r)}return"function"==typeof r&&_a(t),null}function m(e,t,n){if("object"!=typeof e||null===e)return t;switch(e.$$typeof){case k:case P:ya(e,n);var r=e.key;if("string"!=typeof r)break;if(null===t){(t=new Set).add(r);break}if(!t.has(r)){t.add(r);break}c("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.",r)}return t}return function(s,l,u,d){var y="object"==typeof u&&null!==u&&u.type===E&&null===u.key;y&&(u=u.props.children);var b="object"==typeof u&&null!==u;if(b)switch(u.$$typeof){case k:return o(function(e,r,a,o){for(var s=a.key,l=r;null!==l;){if(l.key===s){if(7===l.tag){if(a.type===E){n(e,l.sibling);var u=i(l,a.props.children);return u.return=e,u._debugSource=a._source,u._debugOwner=a._owner,u}}else if(l.elementType===a.type||Xd(l,a)){n(e,l.sibling);var c=i(l,a.props);return c.ref=wa(e,l,a),c.return=e,c._debugSource=a._source,c._debugOwner=a._owner,c}n(e,l);break}t(e,l),l=l.sibling}if(a.type===E){var d=ph(a.props.children,e.mode,o,a.key);return d.return=e,d}var h=fh(a,e.mode,o);return h.ref=wa(e,r,a),h.return=e,h}(s,l,u,d));case P:return o(function(e,r,a,o){for(var s=a.key,l=r;null!==l;){if(l.key===s){if(4===l.tag&&l.stateNode.containerInfo===a.containerInfo&&l.stateNode.implementation===a.implementation){n(e,l.sibling);var u=i(l,a.children||[]);return u.return=e,u}n(e,l);break}t(e,l),l=l.sibling}var c=vh(a,e.mode,o);return c.return=e,c}(s,l,u,d))}if("string"==typeof u||"number"==typeof u)return o(function(e,t,r,a){if(null!==t&&6===t.tag){n(e,t.sibling);var o=i(t,r);return o.return=e,o}n(e,t);var s=mh(r,e.mode,a);return s.return=e,s}(s,l,""+u,d));if(ba(u))return function(i,o,s,l){for(var u=null,c=0;c<s.length;c++)u=m(s[c],u,i);for(var d=null,f=null,v=o,y=0,b=0,w=null;null!==v&&b<s.length;b++){v.index>b?(w=v,v=null):w=v.sibling;var x=p(i,v,s[b],l);if(null===x){null===v&&(v=w);break}e&&v&&null===x.alternate&&t(i,v),y=a(x,y,b),null===f?d=x:f.sibling=x,f=x,v=w}if(b===s.length)return n(i,v),d;if(null===v){for(;b<s.length;b++){var _=h(i,s[b],l);null!==_&&(y=a(_,y,b),null===f?d=_:f.sibling=_,f=_)}return d}for(var S=r(0,v);b<s.length;b++){var C=g(S,i,b,s[b],l);null!==C&&(e&&null!==C.alternate&&S.delete(null===C.key?b:C.key),y=a(C,y,b),null===f?d=C:f.sibling=C,f=C)}return e&&S.forEach((function(e){return t(i,e)})),d}(s,l,u,d);if(j(u))return function(i,o,s,l){var u=j(s);if("function"!=typeof u)throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");"function"==typeof Symbol&&"Generator"===s[Symbol.toStringTag]&&(la||c("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."),la=!0),s.entries===u&&(sa||c("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),sa=!0);var d=u.call(s);if(d)for(var f=null,v=d.next();!v.done;v=d.next())f=m(v.value,f,i);var y=u.call(s);if(null==y)throw Error("An iterable object provided no iterator.");for(var b=null,w=null,x=o,_=0,S=0,C=null,k=y.next();null!==x&&!k.done;S++,k=y.next()){x.index>S?(C=x,x=null):C=x.sibling;var P=p(i,x,k.value,l);if(null===P){null===x&&(x=C);break}e&&x&&null===P.alternate&&t(i,x),_=a(P,_,S),null===w?b=P:w.sibling=P,w=P,x=C}if(k.done)return n(i,x),b;if(null===x){for(;!k.done;S++,k=y.next()){var E=h(i,k.value,l);null!==E&&(_=a(E,_,S),null===w?b=E:w.sibling=E,w=E)}return b}for(var T=r(0,x);!k.done;S++,k=y.next()){var R=g(T,i,S,k.value,l);null!==R&&(e&&null!==R.alternate&&T.delete(null===R.key?S:R.key),_=a(R,_,S),null===w?b=R:w.sibling=R,w=R)}return e&&T.forEach((function(e){return t(i,e)})),b}(s,l,u,d);if(b&&xa(s,u),"function"==typeof u&&_a(s),void 0===u&&!y)switch(s.tag){case 1:if(s.stateNode.render._isMockFunction)break;case x:case 0:case f:case v:throw Error((Y(s.type)||"Component")+"(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.")}return n(s,l)}}var Ca=Sa(!0),ka=Sa(!1);function Pa(e,t){for(var n=e.child;null!==n;)dh(n,t),n=n.sibling}var Ea={},Ta=ln(Ea),Ra=ln(Ea),Ia=ln(Ea);function za(e){if(e===Ea)throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");return e}function Aa(){return za(Ia.current)}function La(e,t){cn(Ia,t,e),cn(Ra,e,e),cn(Ta,Ea,e);var n=ue(t);un(Ta,e),cn(Ta,n,e)}function Ma(e){un(Ta,e),un(Ra,e),un(Ia,e)}function Da(){return za(Ta.current)}function Na(e){var t=za(Ia.current),n=za(Ta.current),r=ce(n,e.type,t);n!==r&&(cn(Ra,e,e),cn(Ta,r,e))}function Fa(e){Ra.current===e&&(un(Ta,e),un(Ra,e))}var Ua=ln(0);function Oa(e,t){return 0!=(e&t)}function Wa(e){return 1&e}function Ga(e,t){return 1&e|t}function Ba(e,t){cn(Ua,t,e)}function ja(e){un(Ua,e)}function Ha(e,t){var n=e.memoizedState;if(null!==n)return null!==n.dehydrated;var r=e.memoizedProps;return void 0!==r.fallback&&(!0!==r.unstable_avoidThisFallback||!t)}function Ya(e){for(var t=e;null!==t;){if(t.tag===g){var n=t.memoizedState;if(null!==n){var r=n.dehydrated;if(null===r||dt(r)||ht(r))return t}}else if(t.tag===b&&void 0!==t.memoizedProps.revealOrder){if(0!=(t.flags&q))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)return null;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var qa=null,Qa=null,Va=!1;function Xa(e,t){switch(e.tag){case 3:At(e.stateNode.containerInfo,t);break;case 5:Lt(e.type,e.memoizedProps,e.stateNode,t)}var n,r=((n=lh(5,null,null,0)).elementType="DELETED",n.type="DELETED",n);r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function $a(e,t){switch(t.flags=-1025&t.flags|2,e.tag){case 3:var n=e.stateNode.containerInfo;switch(t.tag){case 5:var r=t.type,i=t.pendingProps;Mt(n,r,i);break;case 6:var a=t.pendingProps;Dt(n,a);break;case g:Nt(n)}break;case 5:var o=e.type,s=e.memoizedProps,l=e.stateNode;switch(t.tag){case 5:var u=t.type,c=t.pendingProps;Ft(o,s,l,u,c);break;case 6:var d=t.pendingProps;Ut(o,s,l,d);break;case g:Ot(o,s,l)}break;default:return}}function Ka(e,t){switch(e.tag){case 5:var n=e.type,r=e.pendingProps,i=ut(t,n,r);return null!==i&&(e.stateNode=i,!0);case 6:var a=e.pendingProps,o=ct(t,a);return null!==o&&(e.stateNode=o,!0);default:return!1}}function Ja(e){if(Va){var t=Qa;if(!t)return $a(qa,e),Va=!1,void(qa=e);var n=t;if(!Ka(e,t)){if(!(t=ft(n))||!Ka(e,t))return $a(qa,e),Va=!1,void(qa=e);Xa(qa,n)}qa=e,Qa=pt(t)}}function Za(e){for(var t=e.return;null!==t&&5!==t.tag&&3!==t.tag&&t.tag!==g;)t=t.return;qa=t}function eo(e){if(!Pe)return!1;if(e!==qa)return!1;if(!Va)return Za(e),Va=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!ve(t,e.memoizedProps))for(var n=Qa;n;)Xa(e,n),n=ft(n);return Za(e),Qa=e.tag===g?function(e){if(!Pe)throw Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");var t=e.memoizedState,n=null!==t?t.dehydrated:null;if(!n)throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");return bt(n)}(e):qa?ft(e.stateNode):null,!0}function to(){Pe&&(qa=null,Qa=null,Va=!1)}function no(){return Va}var ro,io=[];function ao(){for(var e=0;e<io.length;e++){var t=io[e];_e?t._workInProgressVersionPrimary=null:t._workInProgressVersionSecondary=null}io.length=0}function oo(e,t){_e?e._workInProgressVersionPrimary=t:e._workInProgressVersionSecondary=t,io.push(e)}ro={};var so,lo,uo=l.ReactCurrentDispatcher,co=l.ReactCurrentBatchConfig;lo={},so=new Set;var ho=0,fo=null,po=null,go=null,mo=!1,vo=!1,yo=null,bo=null,wo=-1,xo=!1;function _o(){var e=yo;null===bo?bo=[e]:bo.push(e)}function So(){var e=yo;null!==bo&&(wo++,bo[wo]!==e&&function(e){var t=Y(fo.type);if(!so.has(t)&&(so.add(t),null!==bo)){for(var n="",r=30,i=0;i<=wo;i++){for(var a=bo[i],o=i===wo?e:a,s=i+1+". "+a;s.length<r;)s+=" ";n+=s+=o+"\n"}c("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",t,n)}}(e))}function Co(e){null==e||Array.isArray(e)||c("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",yo,typeof e)}function ko(){throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.")}function Po(e,t){if(xo)return!1;if(null===t)return c("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",yo),!1;e.length!==t.length&&c("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",yo,"["+t.join(", ")+"]","["+e.join(", ")+"]");for(var n=0;n<t.length&&n<e.length;n++)if(!qr(e[n],t[n]))return!1;return!0}function Eo(e,t,n,r,i,a){ho=a,fo=t,bo=null!==e?e._debugHookTypes:null,wo=-1,xo=null!==e&&e.type!==t.type,t.memoizedState=null,t.updateQueue=null,t.lanes=0,null!==e&&null!==e.memoizedState?uo.current=Ss:uo.current=null!==bo?_s:xs;var o=n(r,i);if(vo){var s=0;do{if(vo=!1,!(s<25))throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");s+=1,xo=!1,po=null,go=null,t.updateQueue=null,wo=-1,uo.current=Cs,o=n(r,i)}while(vo)}uo.current=ws,t._debugHookTypes=bo;var l=null!==po&&null!==po.next;if(ho=0,fo=null,po=null,go=null,yo=null,bo=null,wo=-1,mo=!1,l)throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");return o}function To(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes=sr(e.lanes,n)}function Ro(){if(uo.current=ws,mo){for(var e=fo.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}mo=!1}ho=0,fo=null,po=null,go=null,bo=null,wo=-1,yo=null,ps=!1,vo=!1}function Io(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===go?fo.memoizedState=go=e:go=go.next=e,go}function zo(){var e,t;if(null===po){var n=fo.alternate;e=null!==n?n.memoizedState:null}else e=po.next;if(null!==(t=null===go?fo.memoizedState:go.next))t=(go=t).next,po=e;else{if(null===e)throw Error("Rendered more hooks than during the previous render.");var r={memoizedState:(po=e).memoizedState,baseState:po.baseState,baseQueue:po.baseQueue,queue:po.queue,next:null};null===go?fo.memoizedState=go=r:go=go.next=r}return go}function Ao(e,t){return"function"==typeof t?t(e):t}function Lo(e,t,n){var r,i=Io();r=void 0!==n?n(t):t,i.memoizedState=i.baseState=r;var a=i.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:r},o=a.dispatch=bs.bind(null,fo,a);return[i.memoizedState,o]}function Mo(e,t,n){var r=zo(),i=r.queue;if(null===i)throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");i.lastRenderedReducer=e;var a=po,o=a.baseQueue,s=i.pending;if(null!==s){if(null!==o){var l=o.next,u=s.next;o.next=u,s.next=l}a.baseQueue!==o&&c("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."),a.baseQueue=o=s,i.pending=null}if(null!==o){var d=o.next,h=a.baseState,f=null,p=null,g=null,m=d;do{var v=m.lane;if(ar(ho,v)){if(null!==g){var y={lane:0,action:m.action,eagerReducer:m.eagerReducer,eagerState:m.eagerState,next:null};g=g.next=y}if(m.eagerReducer===e)h=m.eagerState;else h=e(h,m.action)}else{var b={lane:v,action:m.action,eagerReducer:m.eagerReducer,eagerState:m.eagerState,next:null};null===g?(p=g=b,f=h):g=g.next=b,fo.lanes=or(fo.lanes,v),$c(v)}m=m.next}while(null!==m&&m!==d);null===g?f=h:g.next=p,qr(h,r.memoizedState)||Rl(),r.memoizedState=h,r.baseState=f,r.baseQueue=g,i.lastRenderedState=h}var w=i.dispatch;return[r.memoizedState,w]}function Do(e,t,n){var r=zo(),i=r.queue;if(null===i)throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");i.lastRenderedReducer=e;var a=i.dispatch,o=i.pending,s=r.memoizedState;if(null!==o){i.pending=null;var l=o.next,u=l;do{s=e(s,u.action),u=u.next}while(u!==l);qr(s,r.memoizedState)||Rl(),r.memoizedState=s,null===r.baseQueue&&(r.baseState=s),i.lastRenderedState=s}return[s,a]}function No(e,t,n){var r;r=t,_e?null==r._currentPrimaryRenderer?r._currentPrimaryRenderer=ro:r._currentPrimaryRenderer!==ro&&c("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported."):null==r._currentSecondaryRenderer?r._currentSecondaryRenderer=ro:r._currentSecondaryRenderer!==ro&&c("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");var i=(0,t._getVersion)(t._source),a=!1,o=function(e){return _e?e._workInProgressVersionPrimary:e._workInProgressVersionSecondary}(t);if(null!==o?a=o===i:(a=ar(ho,e.mutableReadLanes))&&oo(t,i),a){var s=n(t._source);return"function"==typeof s&&c("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing."),s}throw function(e){io.push(e)}(t),Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.")}function Fo(e,t,n,r){var i=Vu;if(null===i)throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");var a=t._getVersion,o=a(t._source),s=uo.current,l=s.useState((function(){return No(i,t,n)})),u=l[0],d=l[1],h=u,f=go,p=e.memoizedState,g=p.refs,m=g.getSnapshot,v=p.source,y=p.subscribe,b=fo;if(e.memoizedState={refs:g,source:t,subscribe:r},s.useEffect((function(){g.getSnapshot=n,g.setSnapshot=d;var e=a(t._source);if(!qr(o,e)){var r=n(t._source);if("function"==typeof r&&c("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing."),!qr(h,r)){d(r);var s=Ac(b);dr(i,s)}!function(e,t){e.entangledLanes|=t;for(var n=e.entanglements,r=t;r>0;){var i=rr(r),a=1<<i;n[i]|=t,r&=~a}}(i,i.mutableReadLanes)}}),[n,t,r]),s.useEffect((function(){var e=r(t._source,(function(){var e=g.getSnapshot,n=g.setSnapshot;try{n(e(t._source));var r=Ac(b);dr(i,r)}catch(e){n((function(){throw e}))}}));return"function"!=typeof e&&c("Mutable source subscribe function must return an unsubscribe function."),e}),[t,r]),!qr(m,n)||!qr(v,t)||!qr(y,r)){var w={pending:null,dispatch:null,lastRenderedReducer:Ao,lastRenderedState:h};w.dispatch=d=bs.bind(null,fo,w),f.queue=w,f.baseQueue=null,h=No(i,t,n),f.memoizedState=f.baseState=h}return h}function Uo(e,t,n){var r=Io();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},Fo(r,e,t,n)}function Oo(e,t,n){return Fo(zo(),e,t,n)}function Wo(e){var t=Io();"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e;var n=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ao,lastRenderedState:e},r=n.dispatch=bs.bind(null,fo,n);return[t.memoizedState,r]}function Go(e){return Mo(Ao)}function Bo(e){return Do(Ao)}function jo(e,t,n,r){var i={tag:e,create:t,destroy:n,deps:r,next:null},a=fo.updateQueue;if(null===a)a={lastEffect:null},fo.updateQueue=a,a.lastEffect=i.next=i;else{var o=a.lastEffect;if(null===o)a.lastEffect=i.next=i;else{var s=o.next;o.next=i,i.next=s,a.lastEffect=i}}return i}function Ho(e){var t=Io(),n={current:e};return Object.seal(n),t.memoizedState=n,n}function Yo(e){return zo().memoizedState}function qo(e,t,n,r){var i=Io(),a=void 0===r?null:r;fo.flags|=e,i.memoizedState=jo(1|t,n,void 0,a)}function Qo(e,t,n,r){var i=zo(),a=void 0===r?null:r,o=void 0;if(null!==po){var s=po.memoizedState;if(o=s.destroy,null!==a)if(Po(a,s.deps))return void jo(t,n,o,a)}fo.flags|=e,i.memoizedState=jo(1|t,n,o,a)}function Vo(e,t){return"undefined"!=typeof jest&&Ed(fo),qo(516,4,e,t)}function Xo(e,t){return"undefined"!=typeof jest&&Ed(fo),Qo(516,4,e,t)}function $o(e,t){return qo(4,2,e,t)}function Ko(e,t){return Qo(4,2,e,t)}function Jo(e,t){if("function"==typeof t){var n=t,r=e();return n(r),function(){n(null)}}if(null!=t){var i=t;i.hasOwnProperty("current")||c("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.","an object with keys {"+Object.keys(i).join(", ")+"}");var a=e();return i.current=a,function(){i.current=null}}}function Zo(e,t,n){"function"!=typeof t&&c("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null");var r=null!=n?n.concat([e]):null;return qo(4,2,Jo.bind(null,t,e),r)}function es(e,t,n){"function"!=typeof t&&c("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null");var r=null!=n?n.concat([e]):null;return Qo(4,2,Jo.bind(null,t,e),r)}function ts(e,t){}var ns=ts;function rs(e,t){var n=void 0===t?null:t;return Io().memoizedState=[e,n],e}function is(e,t){var n=zo(),r=void 0===t?null:t,i=n.memoizedState;if(null!==i&&(null!==r&&Po(r,i[1])))return i[0];return n.memoizedState=[e,r],e}function as(e,t){var n=Io(),r=void 0===t?null:t,i=e();return n.memoizedState=[i,r],i}function os(e,t){var n=zo(),r=void 0===t?null:t,i=n.memoizedState;if(null!==i&&(null!==r&&Po(r,i[1])))return i[0];var a=e();return n.memoizedState=[a,r],a}function ss(e){var t=Wo(e),n=t[0],r=t[1];return Vo((function(){var t=co.transition;co.transition=1;try{r(e)}finally{co.transition=t}}),[e]),n}function ls(e){var t=Go(),n=t[0],r=t[1];return Xo((function(){var t=co.transition;co.transition=1;try{r(e)}finally{co.transition=t}}),[e]),n}function us(e){var t=Bo(),n=t[0],r=t[1];return Xo((function(){var t=co.transition;co.transition=1;try{r(e)}finally{co.transition=t}}),[e]),n}function cs(e,t){var n=Ur();Wr(n<Rr?Rr:n,(function(){e(!0)})),Wr(n>Ir?Ir:n,(function(){var n=co.transition;co.transition=1;try{e(!1),t()}finally{co.transition=n}}))}function ds(){var e=Wo(!1),t=e[0],n=e[1],r=cs.bind(null,n);return Ho(r),[r,t]}function hs(){var e=Go()[0];return[Yo().current,e]}function fs(){var e=Bo()[0];return[Yo().current,e]}var ps=!1;function gs(e){var t=Y(e.type)||"Unknown";Zr&&!lo[t]&&(c("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly."),lo[t]=!0)}function ms(){var e=Re.bind(null,gs.bind(null,fo));if(no()){var t=!1,n=fo,r=Te((function(){throw t||(t=!0,ps=!0,i(e()),ps=!1,gs(n)),Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.")})),i=Wo(r)[1];return 0==(2&fo.mode)&&(fo.flags|=516,jo(5,(function(){i(e())}),void 0,null)),r}var a=e();return Wo(a),a}function vs(){return Go()[0]}function ys(){return Bo()[0]}function bs(e,t,n){"function"==typeof arguments[3]&&c("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");var r=zc(),i=Ac(e),a={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},o=t.pending;null===o?a.next=a:(a.next=o.next,o.next=a),t.pending=a;var s=e.alternate;if(e===fo||null!==s&&s===fo)vo=mo=!0;else{if(0===e.lanes&&(null===s||0===s.lanes)){var l=t.lastRenderedReducer;if(null!==l){var u;u=uo.current,uo.current=Ps;try{var d=t.lastRenderedState,h=l(d,n);if(a.eagerReducer=l,a.eagerState=h,qr(h,d))return}catch(e){}finally{uo.current=u}}}"undefined"!=typeof jest&&(Pd(e),Td(e)),Mc(e,i,r)}}var ws={readContext:Ii,useCallback:ko,useContext:ko,useEffect:ko,useImperativeHandle:ko,useLayoutEffect:ko,useMemo:ko,useReducer:ko,useRef:ko,useState:ko,useDebugValue:ko,useDeferredValue:ko,useTransition:ko,useMutableSource:ko,useOpaqueIdentifier:ko,unstable_isNewReconciler:te},xs=null,_s=null,Ss=null,Cs=null,ks=null,Ps=null,Es=null,Ts=function(){c("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().")},Rs=function(){c("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks")};xs={readContext:function(e,t){return Ii(e,t)},useCallback:function(e,t){return yo="useCallback",_o(),Co(t),rs(e,t)},useContext:function(e,t){return yo="useContext",_o(),Ii(e,t)},useEffect:function(e,t){return yo="useEffect",_o(),Co(t),Vo(e,t)},useImperativeHandle:function(e,t,n){return yo="useImperativeHandle",_o(),Co(n),Zo(e,t,n)},useLayoutEffect:function(e,t){return yo="useLayoutEffect",_o(),Co(t),$o(e,t)},useMemo:function(e,t){yo="useMemo",_o(),Co(t);var n=uo.current;uo.current=ks;try{return as(e,t)}finally{uo.current=n}},useReducer:function(e,t,n){yo="useReducer",_o();var r=uo.current;uo.current=ks;try{return Lo(e,t,n)}finally{uo.current=r}},useRef:function(e){return yo="useRef",_o(),Ho(e)},useState:function(e){yo="useState",_o();var t=uo.current;uo.current=ks;try{return Wo(e)}finally{uo.current=t}},useDebugValue:function(e,t){yo="useDebugValue",_o()},useDeferredValue:function(e){return yo="useDeferredValue",_o(),ss(e)},useTransition:function(){return yo="useTransition",_o(),ds()},useMutableSource:function(e,t,n){return yo="useMutableSource",_o(),Uo(e,t,n)},useOpaqueIdentifier:function(){return yo="useOpaqueIdentifier",_o(),ms()},unstable_isNewReconciler:te},_s={readContext:function(e,t){return Ii(e,t)},useCallback:function(e,t){return yo="useCallback",So(),rs(e,t)},useContext:function(e,t){return yo="useContext",So(),Ii(e,t)},useEffect:function(e,t){return yo="useEffect",So(),Vo(e,t)},useImperativeHandle:function(e,t,n){return yo="useImperativeHandle",So(),Zo(e,t,n)},useLayoutEffect:function(e,t){return yo="useLayoutEffect",So(),$o(e,t)},useMemo:function(e,t){yo="useMemo",So();var n=uo.current;uo.current=ks;try{return as(e,t)}finally{uo.current=n}},useReducer:function(e,t,n){yo="useReducer",So();var r=uo.current;uo.current=ks;try{return Lo(e,t,n)}finally{uo.current=r}},useRef:function(e){return yo="useRef",So(),Ho(e)},useState:function(e){yo="useState",So();var t=uo.current;uo.current=ks;try{return Wo(e)}finally{uo.current=t}},useDebugValue:function(e,t){yo="useDebugValue",So()},useDeferredValue:function(e){return yo="useDeferredValue",So(),ss(e)},useTransition:function(){return yo="useTransition",So(),ds()},useMutableSource:function(e,t,n){return yo="useMutableSource",So(),Uo(e,t,n)},useOpaqueIdentifier:function(){return yo="useOpaqueIdentifier",So(),ms()},unstable_isNewReconciler:te},Ss={readContext:function(e,t){return Ii(e,t)},useCallback:function(e,t){return yo="useCallback",So(),is(e,t)},useContext:function(e,t){return yo="useContext",So(),Ii(e,t)},useEffect:function(e,t){return yo="useEffect",So(),Xo(e,t)},useImperativeHandle:function(e,t,n){return yo="useImperativeHandle",So(),es(e,t,n)},useLayoutEffect:function(e,t){return yo="useLayoutEffect",So(),Ko(e,t)},useMemo:function(e,t){yo="useMemo",So();var n=uo.current;uo.current=Ps;try{return os(e,t)}finally{uo.current=n}},useReducer:function(e,t,n){yo="useReducer",So();var r=uo.current;uo.current=Ps;try{return Mo(e)}finally{uo.current=r}},useRef:function(e){return yo="useRef",So(),Yo()},useState:function(e){yo="useState",So();var t=uo.current;uo.current=Ps;try{return Go()}finally{uo.current=t}},useDebugValue:function(e,t){return yo="useDebugValue",So(),ns()},useDeferredValue:function(e){return yo="useDeferredValue",So(),ls(e)},useTransition:function(){return yo="useTransition",So(),hs()},useMutableSource:function(e,t,n){return yo="useMutableSource",So(),Oo(e,t,n)},useOpaqueIdentifier:function(){return yo="useOpaqueIdentifier",So(),vs()},unstable_isNewReconciler:te},Cs={readContext:function(e,t){return Ii(e,t)},useCallback:function(e,t){return yo="useCallback",So(),is(e,t)},useContext:function(e,t){return yo="useContext",So(),Ii(e,t)},useEffect:function(e,t){return yo="useEffect",So(),Xo(e,t)},useImperativeHandle:function(e,t,n){return yo="useImperativeHandle",So(),es(e,t,n)},useLayoutEffect:function(e,t){return yo="useLayoutEffect",So(),Ko(e,t)},useMemo:function(e,t){yo="useMemo",So();var n=uo.current;uo.current=Es;try{return os(e,t)}finally{uo.current=n}},useReducer:function(e,t,n){yo="useReducer",So();var r=uo.current;uo.current=Es;try{return Do(e)}finally{uo.current=r}},useRef:function(e){return yo="useRef",So(),Yo()},useState:function(e){yo="useState",So();var t=uo.current;uo.current=Es;try{return Bo()}finally{uo.current=t}},useDebugValue:function(e,t){return yo="useDebugValue",So(),ns()},useDeferredValue:function(e){return yo="useDeferredValue",So(),us(e)},useTransition:function(){return yo="useTransition",So(),fs()},useMutableSource:function(e,t,n){return yo="useMutableSource",So(),Oo(e,t,n)},useOpaqueIdentifier:function(){return yo="useOpaqueIdentifier",So(),ys()},unstable_isNewReconciler:te},ks={readContext:function(e,t){return Ts(),Ii(e,t)},useCallback:function(e,t){return yo="useCallback",Rs(),_o(),rs(e,t)},useContext:function(e,t){return yo="useContext",Rs(),_o(),Ii(e,t)},useEffect:function(e,t){return yo="useEffect",Rs(),_o(),Vo(e,t)},useImperativeHandle:function(e,t,n){return yo="useImperativeHandle",Rs(),_o(),Zo(e,t,n)},useLayoutEffect:function(e,t){return yo="useLayoutEffect",Rs(),_o(),$o(e,t)},useMemo:function(e,t){yo="useMemo",Rs(),_o();var n=uo.current;uo.current=ks;try{return as(e,t)}finally{uo.current=n}},useReducer:function(e,t,n){yo="useReducer",Rs(),_o();var r=uo.current;uo.current=ks;try{return Lo(e,t,n)}finally{uo.current=r}},useRef:function(e){return yo="useRef",Rs(),_o(),Ho(e)},useState:function(e){yo="useState",Rs(),_o();var t=uo.current;uo.current=ks;try{return Wo(e)}finally{uo.current=t}},useDebugValue:function(e,t){yo="useDebugValue",Rs(),_o()},useDeferredValue:function(e){return yo="useDeferredValue",Rs(),_o(),ss(e)},useTransition:function(){return yo="useTransition",Rs(),_o(),ds()},useMutableSource:function(e,t,n){return yo="useMutableSource",Rs(),_o(),Uo(e,t,n)},useOpaqueIdentifier:function(){return yo="useOpaqueIdentifier",Rs(),_o(),ms()},unstable_isNewReconciler:te},Ps={readContext:function(e,t){return Ts(),Ii(e,t)},useCallback:function(e,t){return yo="useCallback",Rs(),So(),is(e,t)},useContext:function(e,t){return yo="useContext",Rs(),So(),Ii(e,t)},useEffect:function(e,t){return yo="useEffect",Rs(),So(),Xo(e,t)},useImperativeHandle:function(e,t,n){return yo="useImperativeHandle",Rs(),So(),es(e,t,n)},useLayoutEffect:function(e,t){return yo="useLayoutEffect",Rs(),So(),Ko(e,t)},useMemo:function(e,t){yo="useMemo",Rs(),So();var n=uo.current;uo.current=Ps;try{return os(e,t)}finally{uo.current=n}},useReducer:function(e,t,n){yo="useReducer",Rs(),So();var r=uo.current;uo.current=Ps;try{return Mo(e)}finally{uo.current=r}},useRef:function(e){return yo="useRef",Rs(),So(),Yo()},useState:function(e){yo="useState",Rs(),So();var t=uo.current;uo.current=Ps;try{return Go()}finally{uo.current=t}},useDebugValue:function(e,t){return yo="useDebugValue",Rs(),So(),ns()},useDeferredValue:function(e){return yo="useDeferredValue",Rs(),So(),ls(e)},useTransition:function(){return yo="useTransition",Rs(),So(),hs()},useMutableSource:function(e,t,n){return yo="useMutableSource",Rs(),So(),Oo(e,t,n)},useOpaqueIdentifier:function(){return yo="useOpaqueIdentifier",Rs(),So(),vs()},unstable_isNewReconciler:te},Es={readContext:function(e,t){return Ts(),Ii(e,t)},useCallback:function(e,t){return yo="useCallback",Rs(),So(),is(e,t)},useContext:function(e,t){return yo="useContext",Rs(),So(),Ii(e,t)},useEffect:function(e,t){return yo="useEffect",Rs(),So(),Xo(e,t)},useImperativeHandle:function(e,t,n){return yo="useImperativeHandle",Rs(),So(),es(e,t,n)},useLayoutEffect:function(e,t){return yo="useLayoutEffect",Rs(),So(),Ko(e,t)},useMemo:function(e,t){yo="useMemo",Rs(),So();var n=uo.current;uo.current=Ps;try{return os(e,t)}finally{uo.current=n}},useReducer:function(e,t,n){yo="useReducer",Rs(),So();var r=uo.current;uo.current=Ps;try{return Do(e)}finally{uo.current=r}},useRef:function(e){return yo="useRef",Rs(),So(),Yo()},useState:function(e){yo="useState",Rs(),So();var t=uo.current;uo.current=Ps;try{return Bo()}finally{uo.current=t}},useDebugValue:function(e,t){return yo="useDebugValue",Rs(),So(),ns()},useDeferredValue:function(e){return yo="useDeferredValue",Rs(),So(),us(e)},useTransition:function(){return yo="useTransition",Rs(),So(),fs()},useMutableSource:function(e,t,n){return yo="useMutableSource",Rs(),So(),Oo(e,t,n)},useOpaqueIdentifier:function(){return yo="useOpaqueIdentifier",Rs(),So(),ys()},unstable_isNewReconciler:te};var Is=o.unstable_now,zs=0,As=-1;function Ls(){return zs}function Ms(){zs=Is()}function Ds(e){As=Is(),e.actualStartTime<0&&(e.actualStartTime=Is())}function Ns(e){As=-1}function Fs(e,t){if(As>=0){var n=Is()-As;e.actualDuration+=n,t&&(e.selfBaseDuration=n),As=-1}}function Us(e){for(var t=e.child;t;)e.actualDuration+=t.actualDuration,t=t.sibling}var Os,Ws,Gs,Bs,js,Hs,Ys,qs,Qs=l.ReactCurrentOwner,Vs=!1;function Xs(e,t,n,r){t.child=null===e?ka(t,null,n,r):Ca(t,e.child,n,r)}function $s(e,t,n,r,i){if(t.type!==t.elementType){var a=n.propTypes;a&&nn(a,r,"prop",Y(n))}var o,s=n.render,l=t.ref;if(Ri(t,i),Qs.current=t,ri(!0),o=Eo(e,t,s,r,l,i),1&t.mode){Bt();try{o=Eo(e,t,s,r,l,i)}finally{jt()}}return ri(!1),null===e||Vs?(t.flags|=1,Xs(e,t,o,i),t.child):(To(e,t,i),Il(e,t,i))}function Ks(e,t,n,r,i,a){if(null===e){var o=n.type;if(function(e){return"function"==typeof e&&!uh(e)&&void 0===e.defaultProps}(o)&&null===n.compare&&void 0===n.defaultProps){var s;return s=qd(o),t.tag=v,t.type=s,ll(t,o),Js(e,t,s,r,i,a)}var l=o.propTypes;l&&nn(l,r,"prop",Y(o));var u=hh(n.type,null,r,t,t.mode,a);return u.ref=t.ref,u.return=t,t.child=u,u}var c=n.type,d=c.propTypes;d&&nn(d,r,"prop",Y(c));var h=e.child;if(!ir(i,a)){var f=h.memoizedProps,p=n.compare;if((p=null!==p?p:Vr)(f,r)&&e.ref===t.ref)return Il(e,t,a)}t.flags|=1;var g=ch(h,r);return g.ref=t.ref,g.return=t,t.child=g,g}function Js(e,t,n,r,i,a){if(t.type!==t.elementType){var o=t.elementType;if(o.$$typeof===N){var s=o,l=s._payload,u=s._init;try{o=u(l)}catch(e){o=null}var c=o&&o.propTypes;c&&nn(c,r,"prop",Y(o))}}if(null!==e&&(Vr(e.memoizedProps,r)&&e.ref===t.ref&&t.type===e.type)){if(Vs=!1,!ir(a,i))return t.lanes=e.lanes,Il(e,t,a);0!=(e.flags&ee)&&(Vs=!0)}return nl(e,t,n,r,a)}function Zs(e,t,n){var r,i=t.pendingProps,a=i.children,o=null!==e?e.memoizedState:null;if("hidden"===i.mode||"unstable-defer-without-hiding"===i.mode)if(0==(4&t.mode)){var s={baseLanes:0};t.memoizedState=s,Bc(t,n)}else{if(!ir(n,jn)){var l;if(null!==o)l=or(o.baseLanes,n);else l=n;zd(jn),t.lanes=t.childLanes=jn;var u={baseLanes:l};return t.memoizedState=u,Bc(t,l),null}var c={baseLanes:0};t.memoizedState=c,Bc(t,null!==o?o.baseLanes:n)}else null!==o?(r=or(o.baseLanes,n),t.memoizedState=null):r=n,Bc(t,r);return Xs(e,t,a,n),t.child}Os={},Ws={},Gs={},Bs={},js={},Hs=!1,Ys={},qs={};var el=Zs;function tl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=Q)}function nl(e,t,n,r,i){if(t.type!==t.elementType){var a=n.propTypes;a&&nn(a,r,"prop",Y(n))}var o,s;if(o=vn(t,gn(0,n,!0)),Ri(t,i),Qs.current=t,ri(!0),s=Eo(e,t,n,r,o,i),1&t.mode){Bt();try{s=Eo(e,t,n,r,o,i)}finally{jt()}}return ri(!1),null===e||Vs?(t.flags|=1,Xs(e,t,s,i),t.child):(To(e,t,i),Il(e,t,i))}function rl(e,t,n,r,i){if(t.type!==t.elementType){var a=n.propTypes;a&&nn(a,r,"prop",Y(n))}var o,s;bn(n)?(o=!0,Cn(t)):o=!1,Ri(t,i),null===t.stateNode?(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ga(t,n,r),va(t,n,r,i),s=!0):s=null===e?function(e,t,n,r){var i=e.stateNode,a=e.memoizedProps;i.props=a;var o=i.context,s=t.contextType,l=dn;l="object"==typeof s&&null!==s?Ii(s):vn(e,gn(0,t,!0));var u=t.getDerivedStateFromProps,c="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;c||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||a===n&&o===l||ma(e,i,n,l),ji();var d=e.memoizedState,h=i.state=d;if(Gi(e,n,i,r),h=e.memoizedState,a===n&&d===h&&!yn()&&!Hi())return"function"==typeof i.componentDidMount&&(e.flags|=4),!1;"function"==typeof u&&(oa(e,t,u,n),h=e.memoizedState);var f=Hi()||fa(e,t,a,n,d,h,l);return f?(c||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(e.flags|=4)):("function"==typeof i.componentDidMount&&(e.flags|=4),e.memoizedProps=n,e.memoizedState=h),i.props=n,i.state=h,i.context=l,f}(t,n,r,i):function(e,t,n,r,i){var a=t.stateNode;Ni(e,t);var o=t.memoizedProps,s=t.type===t.elementType?o:gi(t.type,o);a.props=s;var l=t.pendingProps,u=a.context,c=n.contextType,d=dn;d="object"==typeof c&&null!==c?Ii(c):vn(t,gn(0,n,!0));var h=n.getDerivedStateFromProps,f="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||o===l&&u===d||ma(t,a,r,d),ji();var p=t.memoizedState,g=a.state=p;if(Gi(t,r,a,i),g=t.memoizedState,o===l&&p===g&&!yn()&&!Hi())return"function"==typeof a.componentDidUpdate&&(o===e.memoizedProps&&p===e.memoizedState||(t.flags|=4)),"function"==typeof a.getSnapshotBeforeUpdate&&(o===e.memoizedProps&&p===e.memoizedState||(t.flags|=V)),!1;"function"==typeof h&&(oa(t,n,h,r),g=t.memoizedState);var m=Hi()||fa(t,n,s,r,p,g,d);return m?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,g,d),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,g,d)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=V)):("function"==typeof a.componentDidUpdate&&(o===e.memoizedProps&&p===e.memoizedState||(t.flags|=4)),"function"==typeof a.getSnapshotBeforeUpdate&&(o===e.memoizedProps&&p===e.memoizedState||(t.flags|=V)),t.memoizedProps=r,t.memoizedState=g),a.props=r,a.state=g,a.context=d,m}(e,t,n,r,i);var l=il(e,t,n,s,o,i),u=t.stateNode;return s&&u.props!==r&&(Hs||c("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",Y(t.type)||"a component"),Hs=!0),l}function il(e,t,n,r,i,a){tl(e,t);var o=0!=(t.flags&q);if(!r&&!o)return i&&kn(t,n,!1),Il(e,t,a);var s,l=t.stateNode;if(Qs.current=t,o&&"function"!=typeof n.getDerivedStateFromError)s=null,Ns();else{if(ri(!0),s=l.render(),1&t.mode){Bt();try{l.render()}finally{jt()}}ri(!1)}return t.flags|=1,null!==e&&o?function(e,t,n,r){t.child=Ca(t,e.child,null,r),t.child=Ca(t,null,n,r)}(e,t,s,a):Xs(e,t,s,a),t.memoizedState=l.state,i&&kn(t,n,!0),t.child}function al(e){var t=e.stateNode;t.pendingContext?_n(e,t.pendingContext,t.pendingContext!==t.context):t.context&&_n(e,t.context,!1),La(e,t.containerInfo)}function ol(e,t,n){al(t);var r=t.updateQueue;if(null===e||null===r)throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");var i=t.pendingProps,a=t.memoizedState,o=null!==a?a.element:null;Ni(e,t),Gi(t,i,null,n);var s=t.memoizedState.element;if(s===o)return to(),Il(e,t,n);var l=t.stateNode;if(l.hydrate&&function(e){if(!Pe)return!1;var t=e.stateNode.containerInfo;return Qa=pt(t),qa=e,Va=!0,!0}(t)){if(Pe){var u=l.mutableSourceEagerHydrationData;if(null!=u)for(var c=0;c<u.length;c+=2){oo(u[c],u[c+1])}}var d=ka(t,null,s,n);t.child=d;for(var h=d;h;)h.flags=-3&h.flags|K,h=h.sibling}else Xs(e,t,s,n),to();return t.child}function sl(e,t,n,r,i){null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2);var a=t.pendingProps,o=n,s=o._payload,l=(0,o._init)(s);t.type=l;var u=t.tag=function(e){if("function"==typeof e)return uh(e)?1:0;if(null!=e){var t=e.$$typeof;if(t===A)return f;if(t===D)return m}return 2}(l),c=gi(l,a);switch(u){case 0:return ll(t,l),t.type=l=qd(l),nl(null,t,l,c,i);case 1:return t.type=l=Qd(l),rl(null,t,l,c,i);case f:return t.type=l=Vd(l),$s(null,t,l,c,i);case m:if(t.type!==t.elementType){var d=l.propTypes;d&&nn(d,c,"prop",Y(l))}return Ks(null,t,l,gi(l.type,c),r,i)}var h="";throw null!==l&&"object"==typeof l&&l.$$typeof===N&&(h=" Did you wrap a component in React.lazy() more than once?"),Error("Element type is invalid. Received a promise that resolves to: "+l+". Lazy element type must resolve to a class or function."+h)}function ll(e,t){if(t&&t.childContextTypes&&c("%s(...): childContextTypes cannot be defined on a function component.",t.displayName||t.name||"Component"),null!==e.ref){var n="",r=function(){if(null===Jr)return null;var e=Jr._debugOwner;return null!=e?Y(e.type):null}();r&&(n+="\n\nCheck the render method of `"+r+"`.");var i=r||e._debugID||"",a=e._debugSource;a&&(i=a.fileName+":"+a.lineNumber),js[i]||(js[i]=!0,c("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s",n))}if("function"==typeof t.getDerivedStateFromProps){var o=Y(t)||"Unknown";Bs[o]||(c("%s: Function components do not support getDerivedStateFromProps.",o),Bs[o]=!0)}if("object"==typeof t.contextType&&null!==t.contextType){var s=Y(t)||"Unknown";Gs[s]||(c("%s: Function components do not support contextType.",s),Gs[s]=!0)}}var ul={dehydrated:null,retryLane:0};function cl(e){return{baseLanes:e}}function dl(e,t){return{baseLanes:or(e.baseLanes,t)}}function hl(e,t){return sr(e.childLanes,t)}function fl(e,t,n){var r=t.pendingProps;kh(t)&&(t.flags|=q);var i=Ua.current,a=!1;if(0!=(t.flags&q)||function(e,t,n,r){return(null===t||null!==t.memoizedState)&&Oa(e,2)}(i,e)?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0!==r.fallback&&!0!==r.unstable_avoidThisFallback&&(i=i|1),Ba(t,i=Wa(i)),null===e){void 0!==r.fallback&&Ja(t);var o=r.children,s=r.fallback;if(a){var l=pl(t,o,s,n);return t.child.memoizedState=cl(n),t.memoizedState=ul,l}if("number"==typeof r.unstable_expectedLoadTime){var u=pl(t,o,s,n);return t.child.memoizedState=cl(n),t.memoizedState=ul,t.lanes=Un,zd(Un),u}return function(e,t,n){var r=e.mode,i=gh({mode:"visible",children:t},r,n,null);return i.return=e,e.child=i,i}(t,o,n)}if(null!==e.memoizedState){if(a){var c=r.fallback,d=vl(e,t,r.children,c,n),h=t.child,f=e.child.memoizedState;return h.memoizedState=null===f?cl(n):dl(f,n),h.childLanes=hl(e,n),t.memoizedState=ul,d}var p=ml(e,t,r.children,n);return t.memoizedState=null,p}if(a){var g=r.fallback,m=vl(e,t,r.children,g,n),v=t.child,y=e.child.memoizedState;return v.memoizedState=null===y?cl(n):dl(y,n),v.childLanes=hl(e,n),t.memoizedState=ul,m}var b=ml(e,t,r.children,n);return t.memoizedState=null,b}function pl(e,t,n,r){var i,a,o=e.mode,s=e.child,l={mode:"hidden",children:t};return 0==(2&o)&&null!==s?((i=s).childLanes=0,i.pendingProps=l,8&e.mode&&(i.actualDuration=0,i.actualStartTime=-1,i.selfBaseDuration=0,i.treeBaseDuration=0),a=ph(n,o,r,null)):(i=gh(l,o,0,null),a=ph(n,o,r,null)),i.return=e,a.return=e,i.sibling=a,e.child=i,a}function gl(e,t){return ch(e,t)}function ml(e,t,n,r){var i=e.child,a=i.sibling,o=gl(i,{mode:"visible",children:n});return 0==(2&t.mode)&&(o.lanes=r),o.return=t,o.sibling=null,null!==a&&(a.nextEffect=null,a.flags=8,t.firstEffect=t.lastEffect=a),t.child=o,o}function vl(e,t,n,r,i){var a,o,s=t.mode,l=e.child,u=l.sibling,c={mode:"hidden",children:n};if(0==(2&s)&&t.child!==l){(a=t.child).childLanes=0,a.pendingProps=c,8&t.mode&&(a.actualDuration=0,a.actualStartTime=-1,a.selfBaseDuration=l.selfBaseDuration,a.treeBaseDuration=l.treeBaseDuration);var d=a.lastEffect;null!==d?(t.firstEffect=a.firstEffect,t.lastEffect=d,d.nextEffect=null):t.firstEffect=t.lastEffect=null}else a=gl(l,c);return null!==u?o=ch(u,r):(o=ph(r,s,i,null)).flags|=2,o.return=t,a.return=t,a.sibling=o,t.child=a,o}function yl(e,t){e.lanes=or(e.lanes,t);var n=e.alternate;null!==n&&(n.lanes=or(n.lanes,t)),Ti(e.return,t)}function bl(e,t){var n=Array.isArray(e),r=!n&&"function"==typeof j(e);if(n||r){var i=n?"array":"iterable";return c("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",i,t,i),!1}return!0}function wl(e,t,n,r,i,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i,o.lastEffect=a)}function xl(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail,o=r.children;!function(e){if(void 0!==e&&"forwards"!==e&&"backwards"!==e&&"together"!==e&&!Ys[e])if(Ys[e]=!0,"string"==typeof e)switch(e.toLowerCase()){case"together":case"forwards":case"backwards":c('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',e,e.toLowerCase());break;case"forward":case"backward":c('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',e,e.toLowerCase());break;default:c('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',e)}else c('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',e)}(i),function(e,t){void 0===e||qs[e]||("collapsed"!==e&&"hidden"!==e?(qs[e]=!0,c('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',e)):"forwards"!==t&&"backwards"!==t&&(qs[e]=!0,c('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',e)))}(a,i),function(e,t){if(("forwards"===t||"backwards"===t)&&null!=e&&!1!==e)if(Array.isArray(e)){for(var n=0;n<e.length;n++)if(!bl(e[n],n))return}else{var r=j(e);if("function"==typeof r){var i=r.call(e);if(i)for(var a=i.next(),o=0;!a.done;a=i.next()){if(!bl(a.value,o))return;o++}}else c('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',t)}}(o,i),Xs(e,t,o,n);var s=Ua.current;Oa(s,2)?(s=Ga(s,2),t.flags|=q):(null!==e&&0!=(e.flags&q)&&function(e,t,n){for(var r=t;null!==r;){if(r.tag===g)null!==r.memoizedState&&yl(r,n);else if(r.tag===b)yl(r,n);else if(null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)return;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}(t,t.child,n),s=Wa(s));if(Ba(t,s),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":var l,u=function(e){for(var t=e,n=null;null!==t;){var r=t.alternate;null!==r&&null===Ya(r)&&(n=t),t=t.sibling}return n}(t.child);null===u?(l=t.child,t.child=null):(l=u.sibling,u.sibling=null),wl(t,!1,l,u,a,t.lastEffect);break;case"backwards":var d=null,h=t.child;for(t.child=null;null!==h;){var f=h.alternate;if(null!==f&&null===Ya(f)){t.child=h;break}var p=h.sibling;h.sibling=d,d=h,h=p}wl(t,!0,d,null,a,t.lastEffect);break;case"together":wl(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}var _l=!1;function Sl(e,t,n){var r=t.type._context,i=t.pendingProps,a=t.memoizedProps,o=i.value;"value"in i||_l||(_l=!0,c("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));var s=t.type.propTypes;if(s&&nn(s,i,"prop","Context.Provider"),Pi(t,o),null!==a){var l=function(e,t,n){if(qr(n,t))return 0;var r="function"==typeof e._calculateChangedBits?e._calculateChangedBits(n,t):vi;return(r&vi)!==r&&c("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s",r),0|r}(r,o,a.value);if(0===l){if(a.children===i.children&&!yn())return Il(e,t,n)}else!function(e,t,n,r){var i=e.child;for(null!==i&&(i.return=e);null!==i;){var a=void 0,o=i.dependencies;if(null!==o){a=i.child;for(var s=o.firstContext;null!==s;){if(s.context===t&&0!=(s.observedBits&n)){if(1===i.tag){var l=Fi(Hn,nr(r));l.tag=Li,Ui(i,l)}i.lanes=or(i.lanes,r);var u=i.alternate;null!==u&&(u.lanes=or(u.lanes,r)),Ti(i.return,r),o.lanes=or(o.lanes,r);break}s=s.next}}else a=i.tag===h&&i.type===e.type?null:i.child;if(null!==a)a.return=i;else for(a=i;null!==a;){if(a===e){a=null;break}var c=a.sibling;if(null!==c){c.return=a.return,a=c;break}a=a.return}i=a}}(t,r,l,n)}return Xs(e,t,i.children,n),t.child}var Cl,kl,Pl,El,Tl=!1;function Rl(){Vs=!0}function Il(e,t,n){return null!==e&&(t.dependencies=e.dependencies),Ns(),$c(t.lanes),ir(n,t.childLanes)?(function(e,t){if(null!==e&&t.child!==e.child)throw Error("Resuming work not yet implemented.");if(null!==t.child){var n=t.child,r=ch(n,n.pendingProps);for(t.child=r,r.return=t;null!==n.sibling;)n=n.sibling,(r=r.sibling=ch(n,n.pendingProps)).return=t;r.sibling=null}}(e,t),t.child):null}function zl(e,t,n){var r=t.lanes;if(t._debugNeedsRemount&&null!==e)return function(e,t,n){var r=t.return;if(null===r)throw new Error("Cannot swap the root fiber.");if(e.alternate=null,t.alternate=null,n.index=t.index,n.sibling=t.sibling,n.return=t.return,n.ref=t.ref,t===r.child)r.child=n;else{var i=r.child;if(null===i)throw new Error("Expected parent to have a child.");for(;i.sibling!==t;)if(null===(i=i.sibling))throw new Error("Expected to find the previous sibling.");i.sibling=n}var a=r.lastEffect;return null!==a?(a.nextEffect=e,r.lastEffect=e):r.firstEffect=r.lastEffect=e,e.nextEffect=null,e.flags=8,n.flags|=2,n}(e,t,hh(t.type,t.key,t.pendingProps,t._debugOwner||null,t.mode,t.lanes));if(null!==e)if(e.memoizedProps!==t.pendingProps||yn()||t.type!==e.type)Vs=!0;else{if(!ir(n,r)){switch(Vs=!1,t.tag){case 3:al(t),to();break;case 5:Na(t);break;case 1:bn(t.type)&&Cn(t);break;case 4:La(t,t.stateNode.containerInfo);break;case h:Pi(t,t.memoizedProps.value);break;case p:ir(n,t.childLanes)&&(t.flags|=4);var i=t.stateNode;i.effectDuration=0,i.passiveEffectDuration=0;break;case g:if(null!==t.memoizedState){if(ir(n,t.child.childLanes))return fl(e,t,n);Ba(t,Wa(Ua.current));var a=Il(e,t,n);return null!==a?a.sibling:null}Ba(t,Wa(Ua.current));break;case b:var o=0!=(e.flags&q),s=ir(n,t.childLanes);if(o){if(s)return xl(e,t,n);t.flags|=q}var l=t.memoizedState;if(null!==l&&(l.rendering=null,l.tail=null,l.lastEffect=null),Ba(t,Ua.current),s)break;return null;case _:case S:return t.lanes=0,Zs(e,t,n)}return Il(e,t,n)}Vs=0!=(e.flags&ee)}else Vs=!1;switch(t.lanes=0,t.tag){case 2:return function(e,t,n,r){null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2);var i,a,o=t.pendingProps;if(i=vn(t,gn(0,n,!1)),Ri(t,r),n.prototype&&"function"==typeof n.prototype.render){var s=Y(n)||"Unknown";Os[s]||(c("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",s,s),Os[s]=!0)}if(1&t.mode&&ii.recordLegacyContextWarning(t,null),ri(!0),Qs.current=t,a=Eo(null,t,n,o,i,r),ri(!1),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){var l=Y(n)||"Unknown";Ws[l]||(c("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",l,l,l),Ws[l]=!0)}if("object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){var u=Y(n)||"Unknown";Ws[u]||(c("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",u,u,u),Ws[u]=!0),t.tag=1,t.memoizedState=null,t.updateQueue=null;var d=!1;bn(n)?(d=!0,Cn(t)):d=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Di(t);var h=n.getDerivedStateFromProps;return"function"==typeof h&&oa(t,n,h,o),pa(t,a),va(t,n,o,r),il(null,t,n,!0,d,r)}if(t.tag=0,1&t.mode){Bt();try{a=Eo(null,t,n,o,i,r)}finally{jt()}}return Xs(null,t,a,r),ll(t,n),t.child}(e,t,t.type,n);case 16:return sl(e,t,t.elementType,r,n);case 0:var u=t.type,d=t.pendingProps;return nl(e,t,u,t.elementType===u?d:gi(u,d),n);case 1:var C=t.type,k=t.pendingProps;return rl(e,t,C,t.elementType===C?k:gi(C,k),n);case 3:return ol(e,t,n);case 5:return function(e,t,n){Na(t),null===e&&Ja(t);var r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,o=i.children;return ve(r,i)?o=null:null!==a&&ve(r,a)&&(t.flags|=16),tl(e,t),Xs(e,t,o,n),t.child}(e,t,n);case 6:return function(e,t){return null===e&&Ja(t),null}(e,t);case g:return fl(e,t,n);case 4:return function(e,t,n){La(t,t.stateNode.containerInfo);var r=t.pendingProps;return null===e?t.child=Ca(t,null,r,n):Xs(e,t,r,n),t.child}(e,t,n);case f:var P=t.type,E=t.pendingProps;return $s(e,t,P,t.elementType===P?E:gi(P,E),n);case 7:return function(e,t,n){return Xs(e,t,t.pendingProps,n),t.child}(e,t,n);case 8:return function(e,t,n){return Xs(e,t,t.pendingProps.children,n),t.child}(e,t,n);case p:return function(e,t,n){t.flags|=4;var r=t.stateNode;return r.effectDuration=0,r.passiveEffectDuration=0,Xs(e,t,t.pendingProps.children,n),t.child}(e,t,n);case h:return Sl(e,t,n);case 9:return function(e,t,n){var r=t.type;void 0===r._context?r!==r.Consumer&&(Tl||(Tl=!0,c("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))):r=r._context;var i=t.pendingProps,a=i.children;"function"!=typeof a&&c("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."),Ri(t,n);var o,s=Ii(r,i.unstable_observedBits);return Qs.current=t,ri(!0),o=a(s),ri(!1),t.flags|=1,Xs(e,t,o,n),t.child}(e,t,n);case m:var T=t.type,R=gi(T,t.pendingProps);if(t.type!==t.elementType){var I=T.propTypes;I&&nn(I,R,"prop",Y(T))}return Ks(e,t,T,R=gi(T.type,R),r,n);case v:return Js(e,t,t.type,t.pendingProps,r,n);case y:var z=t.type,A=t.pendingProps;return function(e,t,n,r,i){var a;return null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,bn(n)?(a=!0,Cn(t)):a=!1,Ri(t,i),ga(t,n,r),va(t,n,r,i),il(null,t,n,!0,a,i)}(e,t,z,t.elementType===z?A:gi(z,A),n);case b:return xl(e,t,n);case w:case 21:case x:break;case _:return Zs(e,t,n);case S:return el(e,t,n)}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function Al(e){e.flags|=4}function Ll(e){e.flags|=Q}if(Ce)Cl=function(e,t,n,r){for(var i=t.child;null!==i;){if(5===i.tag||6===i.tag)pe(e,i.stateNode);else if(4===i.tag);else if(null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)return;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},kl=function(e){},Pl=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var o=t.stateNode,s=Da(),l=me(o,n,a,r,i,s);t.updateQueue=l,l&&Al(t)}},El=function(e,t,n,r){n!==r&&Al(t)};else if(ke){Cl=function(e,t,n,r){for(var i=t.child;null!==i;){if(5===i.tag){var a=i.stateNode;if(n&&r){var o=i.memoizedProps,s=i.type;a=st(a,s,o,i)}pe(e,a)}else if(6===i.tag){var l=i.stateNode;if(n&&r){var u=i.memoizedProps;l=lt(l,u,i)}pe(e,l)}else if(4===i.tag);else if(i.tag===g){if(0!=(4&i.flags)){var c=null!==i.memoizedState;if(c){var d=i.child;if(null!==d){null!==d.child&&(d.child.return=d,Cl(e,d,!0,c));var h=d.sibling;if(null!==h){h.return=i,i=h;continue}}}}if(null!==i.child){i.child.return=i,i=i.child;continue}}else if(null!==i.child){i.child.return=i,i=i.child;continue}if((i=i)===t)return;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}};var Ml=function(e,t,n,r){for(var i=t.child;null!==i;){if(5===i.tag){var a=i.stateNode;if(n&&r){var o=i.memoizedProps,s=i.type;a=st(a,s,o,i)}it(e,a)}else if(6===i.tag){var l=i.stateNode;if(n&&r){var u=i.memoizedProps;l=lt(l,u,i)}it(e,l)}else if(4===i.tag);else if(i.tag===g){if(0!=(4&i.flags)){var c=null!==i.memoizedState;if(c){var d=i.child;if(null!==d){null!==d.child&&(d.child.return=d,Ml(e,d,!0,c));var h=d.sibling;if(null!==h){h.return=i,i=h;continue}}}}if(null!==i.child){i.child.return=i,i=i.child;continue}}else if(null!==i.child){i.child.return=i,i=i.child;continue}if((i=i)===t)return;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}};kl=function(e){var t=e.stateNode;if(null===e.firstEffect);else{var n=t.containerInfo,r=rt(n);Ml(r,e,!1,!1),t.pendingChildren=r,Al(e),at(n,r)}},Pl=function(e,t,n,r,i){var a=e.stateNode,o=e.memoizedProps,s=null===t.firstEffect;if(s&&o===r)t.stateNode=a;else{var l=t.stateNode,u=Da(),c=null;if(o!==r&&(c=me(l,n,o,r,i,u)),s&&null===c)t.stateNode=a;else{var d=nt(a,c,n,o,r,t,s,l);ge(d,n,r,i,u)&&Al(t),t.stateNode=d,s?Al(t):Cl(d,t,!1,!1)}}},El=function(e,t,n,r){if(n!==r){var i=Aa(),a=Da();t.stateNode=ye(r,i,a,t),Al(t)}else t.stateNode=e.stateNode}}else kl=function(e){},Pl=function(e,t,n,r,i){},El=function(e,t,n,r){};function Dl(e,t){if(!no())switch(e.tailMode){case"hidden":for(var n=e.tail,r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":for(var i=e.tail,a=null;null!==i;)null!==i.alternate&&(a=i),i=i.sibling;null===a?t||null===e.tail?e.tail=null:e.tail.sibling=null:a.sibling=null}}function Nl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case v:case 0:case f:case 7:case 8:case p:case 9:case m:return null;case 1:return bn(t.type)&&wn(t),null;case 3:Ma(t),xn(t),ao();var i=t.stateNode;if(i.pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),null===e||null===e.child)eo(t)?Al(t):i.hydrate||(t.flags|=V);return kl(t),null;case 5:Fa(t);var a=Aa(),o=t.type;if(null!==e&&null!=t.stateNode)Pl(e,t,o,r,a),e.ref!==t.ref&&Ll(t);else{if(!r){if(null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return null}var s=Da();if(eo(t))(function(e,t,n){if(!Pe)throw Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");var r=e.stateNode,i=gt(r,e.type,e.memoizedProps,t,n,e);return e.updateQueue=i,null!==i})(t,a,s)&&Al(t);else{var l=fe(o,r,a,s,t);Cl(l,t,!1,!1),t.stateNode=l,ge(l,o,r,a,s)&&Al(t)}null!==t.ref&&Ll(t)}return null;case 6:var u=r;if(e&&null!=t.stateNode){var c=e.memoizedProps;El(e,t,c,u)}else{if("string"!=typeof u&&null===t.stateNode)throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");var d=Aa(),C=Da();eo(t)?function(e){if(!Pe)throw Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");var t=e.stateNode,n=e.memoizedProps,r=mt(t,n,e);if(r){var i=qa;if(null!==i)switch(i.tag){case 3:var a=i.stateNode.containerInfo;It(a,t,n);break;case 5:var o=i.type,s=i.memoizedProps,l=i.stateNode;zt(o,s,l,t,n)}}return r}(t)&&Al(t):t.stateNode=ye(u,d,C,t)}return null;case g:ja(t);var k=t.memoizedState;if(0!=(t.flags&q))return t.lanes=n,0!=(8&t.mode)&&Us(t),t;var P=null!==k,E=!1;if(null===e)void 0!==t.memoizedProps.fallback&&eo(t);else E=null!==e.memoizedState;if(P&&!E)if(0!=(2&t.mode))null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||Oa(Ua.current,1)?0===Zu&&(Zu=3):function(){0!==Zu&&3!==Zu||(Zu=4);null!==Vu&&(Zn(nc)||Zn(rc))&&Uc(Vu,$u)}();return ke&&P&&(t.flags|=4),Ce&&(P||E)&&(t.flags|=4),null;case 4:return Ma(t),kl(t),null===e&&Ae(t.stateNode.containerInfo),null;case h:return Ei(t),null;case y:return bn(t.type)&&wn(t),null;case b:ja(t);var T=t.memoizedState;if(null===T)return null;var R=0!=(t.flags&q),I=T.rendering;if(null===I)if(R)Dl(T,!1);else{if(!(0===Zu&&(null===e||0==(e.flags&q))))for(var z=t.child;null!==z;){var A=Ya(z);if(null!==A){R=!0,t.flags|=q,Dl(T,!1);var L=A.updateQueue;return null!==L&&(t.updateQueue=L,t.flags|=4),null===T.lastEffect&&(t.firstEffect=null),t.lastEffect=T.lastEffect,Pa(t,n),Ba(t,Ga(Ua.current,2)),t.child}z=z.sibling}null!==T.tail&&Fr()>uc()&&(t.flags|=q,R=!0,Dl(T,!1),t.lanes=Un,zd(Un))}else{if(!R){var M=Ya(I);if(null!==M){t.flags|=q,R=!0;var D=M.updateQueue;if(null!==D&&(t.updateQueue=D,t.flags|=4),Dl(T,!0),null===T.tail&&"hidden"===T.tailMode&&!I.alternate&&!no()){var N=t.lastEffect=T.lastEffect;return null!==N&&(N.nextEffect=null),null}}else 2*Fr()-T.renderingStartTime>uc()&&n!==jn&&(t.flags|=q,R=!0,Dl(T,!1),t.lanes=Un,zd(Un))}if(T.isBackwards)I.sibling=t.child,t.child=I;else{var F=T.last;null!==F?F.sibling=I:t.child=I,T.last=I}}if(null!==T.tail){var U=T.tail;T.rendering=U,T.tail=U.sibling,T.lastEffect=t.lastEffect,T.renderingStartTime=Fr(),U.sibling=null;var O=Ua.current;return Ba(t,O=R?Ga(O,2):Wa(O)),U}return null;case w:case 21:case x:break;case _:case S:if(jc(t),null!==e){var W=t.memoizedState;null!==e.memoizedState!==(null!==W)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4)}return null}throw Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function Fl(e,t){switch(e.tag){case 1:bn(e.type)&&wn(e);var n=e.flags;return n&Z?(e.flags=-4097&n|q,0!=(8&e.mode)&&Us(e),e):null;case 3:Ma(e),xn(e),ao();var r=e.flags;if(0!=(r&q))throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");return e.flags=-4097&r|q,e;case 5:return Fa(e),null;case g:ja(e);var i=e.flags;return i&Z?(e.flags=-4097&i|q,0!=(8&e.mode)&&Us(e),e):null;case b:return ja(e),null;case 4:return Ma(e),null;case h:return Ei(e),null;case _:case S:return jc(e),null;default:return null}}function Ul(e){switch(e.tag){case 1:var t=e.type.childContextTypes;null!=t&&wn(e);break;case 3:Ma(e),xn(e),ao();break;case 5:Fa(e);break;case 4:Ma(e);break;case g:case b:ja(e);break;case h:Ei(e);break;case _:case S:jc(e)}}function Ol(e,t){return{value:e,source:t,stack:$r(t)}}function Wl(e,t){try{0;var n=t.value,r=t.source,i=t.stack,a=null!==i?i:"";if(null!=n&&n._suppressLogging){if(1===e.tag)return;console.error(n)}var o=r?Y(r.type):null,s=o?"The above error occurred in the <"+o+"> component:":"The above error occurred in one of your React components:",l=Y(e.type),u=s+"\n"+a+"\n\n"+(l?"React will try to recreate this component tree from scratch using the error boundary you provided, "+l+".":"Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.");console.error(u)}catch(e){setTimeout((function(){throw e}))}}var Gl="function"==typeof WeakMap?WeakMap:Map;function Bl(e,t,n){var r=Fi(Hn,n);r.tag=3,r.payload={element:null};var i=t.value;return r.callback=function(){pd(i),Wl(e,t)},r}function jl(e,t,n){var r=Fi(Hn,n);r.tag=3;var i=e.type.getDerivedStateFromError;if("function"==typeof i){var a=t.value;r.payload=function(){return Wl(e,t),i(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch?r.callback=function(){var n;$d(e),"function"!=typeof i&&(n=this,null===fc?fc=new Set([n]):fc.add(n),Wl(e,t));var r=t.value,a=t.stack;this.componentDidCatch(r,{componentStack:null!==a?a:""}),"function"!=typeof i&&(ir(e.lanes,1)||c("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",Y(e.type)||"Unknown"))}:r.callback=function(){$d(e)},r}function Hl(e,t,n){var r,i=e.pingCache;if(null===i?(i=e.pingCache=new Gl,r=new Set,i.set(t,r)):void 0===(r=i.get(t))&&(r=new Set,i.set(t,r)),!r.has(n)){r.add(n);var a=vd.bind(null,e,t,n);t.then(a,a)}}function Yl(e,t,n,r,i){if(n.flags|=J,n.firstEffect=n.lastEffect=null,null!==r&&"object"==typeof r&&"function"==typeof r.then){var a=r;if(0==(2&n.mode)){var o=n.alternate;o?(n.updateQueue=o.updateQueue,n.memoizedState=o.memoizedState,n.lanes=o.lanes):(n.updateQueue=null,n.memoizedState=null)}var s=Oa(Ua.current,1),l=t;do{if(l.tag===g&&Ha(l,s)){var u=l.updateQueue;if(null===u){var c=new Set;c.add(a),l.updateQueue=c}else u.add(a);if(0==(2&l.mode)){if(l.flags|=q,n.flags|=ee,n.flags&=-2981,1===n.tag)if(null===n.alternate)n.tag=y;else{var d=Fi(Hn,1);d.tag=Li,Ui(n,d)}return void(n.lanes=or(n.lanes,1))}return Hl(e,a,i),l.flags|=Z,void(l.lanes=i)}l=l.return}while(null!==l);r=new Error((Y(n.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Zu&&(Zu=2),r=Ol(r,n);var h=t;do{switch(h.tag){case 3:var f=r;h.flags|=Z;var p=nr(i);return h.lanes=or(h.lanes,p),void Oi(h,Bl(h,f,p));case 1:var m=r,v=h.type,b=h.stateNode;if(0==(h.flags&q)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&!fd(b))){h.flags|=Z;var w=nr(i);return h.lanes=or(h.lanes,w),void Oi(h,jl(h,m,w))}}h=h.return}while(null!==h)}function ql(e,t,n,r,i,a,o,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Ql=ql;if("undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"undefined"!=typeof document&&"function"==typeof document.createEvent){var Vl=document.createElement("react");Ql=function(e,t,n,r,i,a,o,s,l){if("undefined"==typeof document)throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");var u=document.createEvent("Event"),c=!1,d=!0,h=window.event,f=Object.getOwnPropertyDescriptor(window,"event");function p(){Vl.removeEventListener(x,v,!1),void 0!==window.event&&window.hasOwnProperty("event")&&(window.event=h)}var g,m=Array.prototype.slice.call(arguments,3);function v(){c=!0,p(),t.apply(n,m),d=!1}var y=!1,b=!1;function w(e){if(g=e.error,y=!0,null===g&&0===e.colno&&0===e.lineno&&(b=!0),e.defaultPrevented&&null!=g&&"object"==typeof g)try{g._suppressLogging=!0}catch(e){}}var x="react-"+(e||"invokeguardedcallback");if(window.addEventListener("error",w),Vl.addEventListener(x,v,!1),u.initEvent(x,!1,!1),Vl.dispatchEvent(u),f&&Object.defineProperty(window,"event",f),c&&d&&(y?b&&(g=new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")):g=new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue."),this.onError(g)),window.removeEventListener("error",w),!c)return p(),ql.apply(this,arguments)}}var Xl=Ql,$l=!1,Kl=null,Jl={onError:function(e){$l=!0,Kl=e}};function Zl(e,t,n,r,i,a,o,s,l){$l=!1,Kl=null,Xl.apply(Jl,arguments)}function eu(){return $l}function tu(){if($l){var e=Kl;return $l=!1,Kl=null,e}throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.")}var nu;nu=new Set;var ru="function"==typeof WeakSet?WeakSet:Set,iu=function(e,t){t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()};function au(e){var t=e.ref;null!==t&&("function"==typeof t?(Zl(null,t,null,null),eu()&&md(e,tu())):t.current=null)}function ou(e,t){(Zl(null,t,null),eu())&&md(e,tu())}function su(e,t){switch(t.tag){case 0:case f:case v:case x:return;case 1:if(t.flags&V&&null!==e){var n=e.memoizedProps,r=e.memoizedState,i=t.stateNode;t.type!==t.elementType||Hs||(i.props!==t.memoizedProps&&c("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",Y(t.type)||"instance"),i.state!==t.memoizedState&&c("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",Y(t.type)||"instance"));var a=i.getSnapshotBeforeUpdate(t.elementType===t.type?n:gi(t.type,n),r),o=nu;void 0!==a||o.has(t.type)||(o.add(t.type),c("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",Y(t.type))),i.__reactInternalSnapshotBeforeUpdate=a}return;case 3:if(Ce&&t.flags&V){var s=t.stateNode;tt(s.containerInfo)}return;case 5:case 6:case 4:case y:return}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}function lu(e,t){var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var i=r.next,a=i;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&o()}a=a.next}while(a!==i)}}function uu(e,t,n,r){switch(n.tag){case 0:case f:case v:case x:return function(e,t){var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var i=r.next,a=i;do{if((a.tag&e)===e){var o=a.create;a.destroy=o();var s=a.destroy;void 0!==s&&"function"!=typeof s&&c("An effect function must not return anything besides a function, which is used for clean-up.%s",null===s?" You returned null. If your effect does not require clean up, return undefined (or nothing).":"function"==typeof s.then?"\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching":" You returned: "+s)}a=a.next}while(a!==i)}}(3,n),void function(e){var t=e.updateQueue,n=null!==t?t.lastEffect:null;if(null!==n){var r=n.next,i=r;do{var a=i,o=a.next,s=a.tag;0!=(4&s)&&0!=(1&s)&&(cd(e,i),ud(e,i)),i=o}while(i!==r)}}(n);case 1:var i=n.stateNode;if(4&n.flags)if(null===t)n.type!==n.elementType||Hs||(i.props!==n.memoizedProps&&c("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",Y(n.type)||"instance"),i.state!==n.memoizedState&&c("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",Y(n.type)||"instance")),i.componentDidMount();else{var a=n.elementType===n.type?t.memoizedProps:gi(n.type,t.memoizedProps),o=t.memoizedState;n.type!==n.elementType||Hs||(i.props!==n.memoizedProps&&c("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",Y(n.type)||"instance"),i.state!==n.memoizedState&&c("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",Y(n.type)||"instance")),i.componentDidUpdate(a,o,i.__reactInternalSnapshotBeforeUpdate)}var s=n.updateQueue;return void(null!==s&&(n.type!==n.elementType||Hs||(i.props!==n.memoizedProps&&c("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",Y(n.type)||"instance"),i.state!==n.memoizedState&&c("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",Y(n.type)||"instance")),Yi(0,s,i)));case 3:var l=n.updateQueue;if(null!==l){var u=null;if(null!==n.child)switch(n.child.tag){case 5:u=le(n.child.stateNode);break;case 1:u=n.child.stateNode}Yi(0,l,u)}return;case 5:var d=n.stateNode;if(null===t&&4&n.flags){var h=n.type,m=n.memoizedProps;He(d,h,m,n)}return;case 6:case 4:return;case p:var C=n.memoizedProps;C.onCommit;var k=C.onRender;n.stateNode.effectDuration;var P=Ls();return void("function"==typeof k&&k(n.memoizedProps.id,null===t?"mount":"update",n.actualDuration,n.treeBaseDuration,n.actualStartTime,P,e.memoizedInteractions));case g:return void function(e,t){if(!Pe)return;if(null===t.memoizedState){var n=t.alternate;if(null!==n){var r=n.memoizedState;if(null!==r){var i=r.dehydrated;null!==i&&xt(i)}}}}(0,n);case b:case y:case w:case 21:case _:case S:return}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}function cu(e,t){if(Ce)for(var n=e;;){if(5===n.tag){var r=n.stateNode;t?Ke(r):Ze(n.stateNode,n.memoizedProps)}else if(6===n.tag){var i=n.stateNode;t?Je(i):et(i,n.memoizedProps)}else if(n.tag!==_&&n.tag!==S||null===n.memoizedState||n===e){if(null!==n.child){n.child.return=n,n=n.child;continue}}else;if(n===e)return;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function du(e){var t=e.ref;if(null!==t){var n,r=e.stateNode;if(5===e.tag)n=le(r);else n=r;"function"==typeof t?t(n):(t.hasOwnProperty("current")||c("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",Y(e.type)),t.current=n)}}function hu(e){var t=e.ref;null!==t&&("function"==typeof t?t(null):t.current=null)}function fu(e,t,n){switch(function(e){if(Tn&&"function"==typeof Tn.onCommitFiberUnmount)try{Tn.onCommitFiberUnmount(En,e)}catch(e){Rn||(Rn=!0,c("React instrumentation encountered an error: %s",e))}}(t),t.tag){case 0:case f:case m:case v:case x:var r=t.updateQueue;if(null!==r){var i=r.lastEffect;if(null!==i){var a=i.next,o=a;do{var s=o,l=s.destroy,u=s.tag;void 0!==l&&(0!=(4&u)?cd(t,o):ou(t,l)),o=o.next}while(o!==a)}}return;case 1:au(t);var d=t.stateNode;return void("function"==typeof d.componentWillUnmount&&function(e,t){Zl(null,iu,null,e,t),eu()&&md(e,tu())}(t,d));case 5:return void au(t);case 4:return void(Ce?wu(e,t):ke&&function(e){if(!ke)return;var t=e.stateNode.containerInfo,n=rt(t);ot(t,n)}(t));case w:case 18:case 21:return}}function pu(e,t,n){for(var r=t;;)if(fu(e,r),null===r.child||Ce&&4===r.tag){if(r===t)return;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}else r.child.return=r,r=r.child}function gu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null,e._debugOwner=null}function mu(e){return 5===e.tag||3===e.tag||4===e.tag}function vu(e){if(Ce){var t,n,r=function(e){for(var t=e.return;null!==t;){if(mu(t))return t;t=t.return}throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.")}(e),i=r.stateNode;switch(r.tag){case 5:t=i,n=!1;break;case 3:case 4:t=i.containerInfo,n=!0;break;default:throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.")}16&r.flags&&($e(t),r.flags&=-17);var a=function(e){var t=e;e:for(;;){for(;null===t.sibling;){if(null===t.return||mu(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;5!==t.tag&&6!==t.tag&&18!==t.tag;){if(2&t.flags)continue e;if(null===t.child||4===t.tag)continue e;t.child.return=t,t=t.child}if(!(2&t.flags))return t.stateNode}}(e);n?yu(e,a,t):bu(e,a,t)}}function yu(e,t,n){var r=e.tag,i=5===r||6===r;if(i){var a=i?e.stateNode:e.stateNode.instance;t?Qe(n,a,t):Be(n,a)}else if(4===r);else{var o=e.child;if(null!==o){yu(o,t,n);for(var s=o.sibling;null!==s;)yu(s,t,n),s=s.sibling}}}function bu(e,t,n){var r=e.tag,i=5===r||6===r;if(i){var a=i?e.stateNode:e.stateNode.instance;t?qe(n,a,t):Ge(n,a)}else if(4===r);else{var o=e.child;if(null!==o){bu(o,t,n);for(var s=o.sibling;null!==s;)bu(s,t,n),s=s.sibling}}}function wu(e,t,n){for(var r,i,a=t,o=!1;;){if(!o){var s=a.return;e:for(;;){if(null===s)throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");var l=s.stateNode;switch(s.tag){case 5:r=l,i=!1;break e;case 3:case 4:r=l.containerInfo,i=!0;break e}s=s.return}o=!0}if(5===a.tag||6===a.tag)pu(e,a),i?Xe(r,a.stateNode):Ve(r,a.stateNode);else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,i=!0,a.child.return=a,a=a.child;continue}}else if(fu(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)return;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(o=!1)}a.sibling.return=a.return,a=a.sibling}}function xu(e,t,n){Ce?wu(e,t):pu(e,t);var r=t.alternate;gu(t),null!==r&&gu(r)}function _u(e,t){if(Ce){switch(t.tag){case 0:case f:case m:case v:case x:return void lu(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r,a=t.type,o=t.updateQueue;t.updateQueue=null,null!==o&&Ye(n,o,a,i,r,t)}return;case 6:if(null===t.stateNode)throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");var s=t.stateNode,l=t.memoizedProps,u=null!==e?e.memoizedProps:l;return void je(s,u,l);case 3:if(Pe){var c=t.stateNode;c.hydrate&&(c.hydrate=!1,wt(c.containerInfo))}return;case p:return;case g:return Su(t),void Cu(t);case b:return void Cu(t);case y:return;case w:case 21:break;case _:case S:return void cu(t,null!==t.memoizedState)}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}switch(t.tag){case 0:case f:case m:case v:case x:return void lu(3,t);case p:return;case g:return Su(t),void Cu(t);case b:return void Cu(t);case 3:if(Pe){var d=t.stateNode;d.hydrate&&(d.hydrate=!1,wt(d.containerInfo))}break;case _:case S:return}!function(e){if(ke){switch(e.tag){case 1:case 5:case 6:case w:return;case 3:case 4:var t=e.stateNode,n=t.containerInfo,r=t.pendingChildren;return void ot(n,r)}throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}}(t)}function Su(e){null!==e.memoizedState&&(oc=Fr(),Ce&&cu(e.child,!0))}function Cu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ru),t.forEach((function(t){var r=yd.bind(null,e,t);n.has(t)||(!0!==t.__reactDoNotTraceInteractions&&(r=s.unstable_wrap(r)),n.add(t),t.then(r,r))}))}}function ku(e,t){if(null!==e){var n=e.memoizedState;if(null===n||null!==n.dehydrated){var r=t.memoizedState;return null!==r&&null===r.dehydrated}}return!1}function Pu(e){Ce&&$e(e.stateNode)}var Eu=0,Tu=1,Ru=2,Iu=3,zu=4;if("function"==typeof Symbol&&Symbol.for){var Au=Symbol.for;Eu=Au("selector.component"),Tu=Au("selector.has_pseudo_class"),Ru=Au("selector.role"),Iu=Au("selector.test_id"),zu=Au("selector.text")}function Lu(e){var t=Ee(e);if(null!=t){if("string"!=typeof t.memoizedProps["data-testname"])throw Error("Invalid host root specified. Should be either a React container or a node with a testname attribute.");return t}var n=Me(e);if(null===n)throw Error("Could not find React container within specified host subtree.");return n.stateNode.current}function Mu(e,t){switch(t.$$typeof){case Eu:if(e.type===t.value)return!0;break;case Tu:return function(e,t){var n=[e,0],r=0;for(;r<n.length;){var i=n[r++],a=n[r++],o=t[a];if(5!==i.tag||!Fe(i)){for(;null!=o&&Mu(i,o);)o=t[++a];if(a===t.length)return!0;for(var s=i.child;null!==s;)n.push(s,a),s=s.sibling}}return!1}(e,t.value);case Ru:if(5===e.tag){var n=e.stateNode;if(Ue(n,t.value))return!0}break;case zu:if(5===e.tag||6===e.tag){var r=Ne(e);if(null!==r&&r.indexOf(t.value)>=0)return!0}break;case Iu:if(5===e.tag){var i=e.memoizedProps["data-testname"];if("string"==typeof i&&i.toLowerCase()===t.value.toLowerCase())return!0}break;default:throw Error("Invalid selector type "+t+" specified.")}return!1}function Du(e){switch(e.$$typeof){case Eu:return"<"+(Y(e.value)||"Unknown")+">";case Tu:return":has("+(Du(e)||"")+")";case Ru:return'[role="'+e.value+'"]';case zu:return'"'+e.value+'"';case Iu:return'[data-testname="'+e.value+'"]';default:throw Error("Invalid selector type "+e+" specified.")}}function Nu(e,t){for(var n=[],r=[e,0],i=0;i<r.length;){var a=r[i++],o=r[i++],s=t[o];if(5!==a.tag||!Fe(a)){for(;null!=s&&Mu(a,s);)s=t[++o];if(o===t.length)n.push(a);else for(var l=a.child;null!==l;)r.push(l,o),l=l.sibling}}return n}function Fu(e,t){if(!Le)throw Error("Test selector API is not supported by this renderer.");for(var n=Nu(Lu(e),t),r=[],i=Array.from(n),a=0;a<i.length;){var o=i[a++];if(5===o.tag){if(Fe(o))continue;r.push(o.stateNode)}else for(var s=o.child;null!==s;)i.push(s),s=s.sibling}return r}var Uu=[];var Ou=!1,Wu=null;var Gu=Math.ceil,Bu=l.ReactCurrentDispatcher,ju=l.ReactCurrentOwner,Hu=l.IsSomeRendererActing,Yu=16,qu=32,Qu=0,Vu=null,Xu=null,$u=0,Ku=0,Ju=ln(0),Zu=0,ec=null,tc=0,nc=0,rc=0,ic=0,ac=null,oc=0,sc=1/0;function lc(){sc=Fr()+500}function uc(){return sc}var cc=null,dc=!1,hc=null,fc=null,pc=!1,gc=null,mc=90,vc=0,yc=[],bc=[],wc=null,xc=0,_c=null,Sc=0,Cc=null,kc=Hn,Pc=0,Ec=0,Tc=!1,Rc=null,Ic=!1;function zc(){return 0!=(48&Qu)?Fr():kc!==Hn?kc:kc=Fr()}function Ac(e){var t=e.mode;if(0==(2&t))return 1;if(0==(4&t))return Ur()===Tr?1:2;if(0===Pc&&(Pc=tc),0!==Yr.transition)return 0!==Ec&&(Ec=null!==ac?ac.pendingLanes:0),function(e,t){var n=nr(Nn&~t);return 0===n&&0===(n=nr(Nn&~e))&&(n=nr(Nn)),n}(Pc,Ec);var n,r=Ur();0!=(4&Qu)&&r===Rr?n=tr(12,Pc):n=tr(function(e){switch(e){case 99:return Ln;case 98:return Mn;case 97:case 96:return 8;case 95:return 2;default:return 0}}(r),Pc);return n}function Lc(e){var t,n=e.mode;return 0==(2&n)?1:0==(4&n)?Ur()===Tr?1:2:(0===Pc&&(Pc=tc),0===(t=nr(Fn&~Pc))&&(t=nr(Fn)),t)}function Mc(e,t,n){!function(){if(xc>50)throw xc=0,_c=null,Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");Sc>50&&(Sc=0,c("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."))}(),function(e){if(Zr&&0!=(Qu&Yu)&&!ps)switch(e.tag){case 0:case f:case v:var t=Xu&&Y(Xu.type)||"Unknown",n=t;if(!Sd.has(n))Sd.add(n),c("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render",Y(e.type)||"Unknown",t,t);break;case 1:Cd||(c("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."),Cd=!0)}}(e);var r=Dc(e,t);if(null===r)return function(e){var t=e.tag;if(3!==t&&1!==t&&0!==t&&t!==f&&t!==m&&t!==v&&t!==x)return;if(0!=(e.flags&$))return;var n=Y(e.type)||"ReactComponent";if(null!==_d){if(_d.has(n))return;_d.add(n)}else _d=new Set([n]);if(Tc);else{var r=Jr;try{ni(e),c("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.",1===t?"the componentWillUnmount method":"a useEffect cleanup function")}finally{r?ni(e):ti()}}}(e),null;ur(r,t,n),r===Vu&&(rc=or(rc,t),4===Zu&&Uc(r,$u));var i=Ur();1===t?0!=(8&Qu)&&0==(48&Qu)?(Ld(r,t),Oc(r)):(Nc(r,n),Ld(r,t),0===Qu&&(lc(),jr())):(0==(4&Qu)||i!==Rr&&i!==Tr||(null===wc?wc=new Set([r]):wc.add(r)),Nc(r,n),Ld(r,t)),ac=r}function Dc(e,t){e.lanes=or(e.lanes,t);var n=e.alternate;null!==n&&(n.lanes=or(n.lanes,t)),null===n&&0!=(1026&e.flags)&&wd(e);for(var r=e,i=e.return;null!==i;)i.childLanes=or(i.childLanes,t),null!==(n=i.alternate)?n.childLanes=or(n.childLanes,t):0!=(1026&i.flags)&&wd(e),r=i,i=i.return;return 3===r.tag?r.stateNode:null}function Nc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.pendingLanes,r=e.suspendedLanes,i=e.pingedLanes,a=e.expirationTimes,o=n;o>0;){var s=rr(o),l=1<<s,u=a[s];u===Hn?0!=(l&r)&&0==(l&i)||(a[s]=Kn(l,t)):u<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=$n(e,e===Vu?$u:0),i=Vn;if(0!==r){if(null!==n){if(e.callbackPriority===i)return;Br(n)}var a,o;if(i===Ln)o=Oc.bind(null,e),null===Lr?(Lr=[o],Mr=mr(_r,Hr)):Lr.push(o),a=Er;else if(14===i)a=Gr(Tr,Oc.bind(null,e));else{a=Gr(function(e){switch(e){case Ln:case 14:return 99;case 13:case 12:case 11:case Mn:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error("Invalid update priority: "+e+". This is a bug in React.")}}(i),Fc.bind(null,e))}e.callbackPriority=i,e.callbackNode=a}else null!==n&&(Br(n),e.callbackNode=null,e.callbackPriority=0)}function Fc(e){if(kc=Hn,Pc=0,Ec=0,0!=(48&Qu))throw Error("Should not already be working.");var t=e.callbackNode;if(ld()&&e.callbackNode!==t)return null;var n=$n(e,e===Vu?$u:0);if(0===n)return null;var r=function(e,t){var n=Qu;Qu|=Yu;var r=qc();Vu===e&&$u===t||(lc(),Hc(e,t),Md(e,t));var i=Vc(e);for(;;)try{Zc();break}catch(t){Yc(e,t)}return Si(),Xc(i),Qc(r),Qu=n,null!==Xu?0:(Vu=null,$u=0,Zu)}(e,n);if(ir(tc,rc))Hc(e,0);else if(0!==r){if(2===r&&(Qu|=64,e.hydrate&&(e.hydrate=!1,tt(e.containerInfo)),0!==(n=Jn(e))&&(r=Kc(e,n))),1===r){var i=ec;throw Hc(e,0),Uc(e,n),Nc(e,Fr()),i}var a=e.current.alternate;e.finishedWork=a,e.finishedLanes=n,function(e,t,n){switch(t){case 0:case 1:throw Error("Root did not complete. This is a bug in React.");case 2:case 5:rd(e);break;case 3:if(Uc(e,n),er(n)&&!Nd()){var r=oc+500-Fr();if(r>10){if(0!==$n(e,0))break;var i=e.suspendedLanes;if(!ar(i,n)){zc(),cr(e,i);break}e.timeoutHandle=be(rd.bind(null,e),r);break}}rd(e);break;case 4:if(Uc(e,n),function(e){return(e&Nn)===e}(n))break;if(!Nd()){var a=function(e,t){for(var n=e.eventTimes,r=Hn;t>0;){var i=rr(t),a=1<<i,o=n[i];o>r&&(r=o),t&=~a}return r}(e,n),o=a,s=Fr()-o,l=((u=s)<120?120:u<480?480:u<1080?1080:u<1920?1920:u<3e3?3e3:u<4320?4320:1960*Gu(u/1960))-s;if(l>10){e.timeoutHandle=be(rd.bind(null,e),l);break}}rd(e);break;default:throw Error("Unknown root exit status.")}var u}(e,r,n)}return Nc(e,Fr()),e.callbackNode===t?Fc.bind(null,e):null}function Uc(e,t){t=sr(t,ic),function(e,t){e.suspendedLanes|=t,e.pingedLanes&=~t;for(var n=e.expirationTimes,r=t;r>0;){var i=rr(r),a=1<<i;n[i]=Hn,r&=~a}}(e,t=sr(t,rc))}function Oc(e){if(0!=(48&Qu))throw Error("Should not already be working.");var t,n;if(ld(),e===Vu&&ir(e.expiredLanes,$u)?(n=Kc(e,t=$u),ir(tc,rc)&&(n=Kc(e,t=$n(e,t)))):n=Kc(e,t=$n(e,0)),0!==e.tag&&2===n&&(Qu|=64,e.hydrate&&(e.hydrate=!1,tt(e.containerInfo)),0!==(t=Jn(e))&&(n=Kc(e,t))),1===n){var r=ec;throw Hc(e,0),Uc(e,t),Nc(e,Fr()),r}var i=e.current.alternate;return e.finishedWork=i,e.finishedLanes=t,rd(e),Nc(e,Fr()),null}function Wc(e,t){var n=Qu;Qu|=1;try{return e(t)}finally{0===(Qu=n)&&(lc(),jr())}}function Gc(e,t){var n=Qu;if(0!=(48&n))return c("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."),e(t);Qu|=1;try{return e?Wr(Tr,e.bind(null,t)):void 0}finally{Qu=n,jr()}}function Bc(e,t){cn(Ju,Ku,e),Ku=or(Ku,t),tc=or(tc,t)}function jc(e){Ku=Ju.current,un(Ju,e)}function Hc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==xe&&(e.timeoutHandle=xe,we(n)),null!==Xu)for(var r=Xu.return;null!==r;)Ul(r),r=r.return;Vu=e,Xu=ch(e.current,null),$u=Ku=tc=t,Zu=0,ec=null,nc=0,rc=0,ic=0,Cc=null,ii.discardPendingWarnings()}function Yc(e,t){for(;;){var n=Xu;try{if(Si(),Ro(),ti(),ju.current=null,null===n||null===n.return)return Zu=1,ec=t,void(Xu=null);8&n.mode&&Fs(n,!0),Yl(e,n.return,n,t,$u),td(n)}catch(e){t=e,Xu===n&&null!==n?(n=n.return,Xu=n):n=Xu;continue}return}}function qc(){var e=Bu.current;return Bu.current=ws,null===e?ws:e}function Qc(e){Bu.current=e}function Vc(e){var t=s.__interactionsRef.current;return s.__interactionsRef.current=e.memoizedInteractions,t}function Xc(e){s.__interactionsRef.current=e}function $c(e){nc=or(e,nc)}function Kc(e,t){var n=Qu;Qu|=Yu;var r=qc();Vu===e&&$u===t||(Hc(e,t),Md(e,t));for(var i=Vc(e);;)try{Jc();break}catch(t){Yc(e,t)}if(Si(),Xc(i),Qu=n,Qc(r),null!==Xu)throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");return Vu=null,$u=0,Zu}function Jc(){for(;null!==Xu;)ed(Xu)}function Zc(){for(;null!==Xu&&!zr();)ed(Xu)}function ed(e){var t,n=e.alternate;ni(e),0!=(8&e.mode)?(Ds(e),t=xd(n,e,Ku),Fs(e,!0)):t=xd(n,e,Ku),ti(),e.memoizedProps=e.pendingProps,null===t?td(e):Xu=t,ju.current=null}function td(e){var t=e;do{var n=t.alternate,r=t.return;if(0==(t.flags&J)){ni(t);var i=void 0;if(0==(8&t.mode)?i=Nl(n,t,Ku):(Ds(t),i=Nl(n,t,Ku),Fs(t,!1)),ti(),null!==i)return void(Xu=i);if(nd(t),null!==r&&0==(r.flags&J))null===r.firstEffect&&(r.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==r.lastEffect&&(r.lastEffect.nextEffect=t.firstEffect),r.lastEffect=t.lastEffect),t.flags>1&&(null!==r.lastEffect?r.lastEffect.nextEffect=t:r.firstEffect=t,r.lastEffect=t)}else{var a=Fl(t);if(null!==a)return a.flags&=2047,void(Xu=a);if(0!=(8&t.mode)){Fs(t,!1);for(var o=t.actualDuration,s=t.child;null!==s;)o+=s.actualDuration,s=s.sibling;t.actualDuration=o}null!==r&&(r.firstEffect=r.lastEffect=null,r.flags|=J)}var l=t.sibling;if(null!==l)return void(Xu=l);Xu=t=r}while(null!==t);0===Zu&&(Zu=5)}function nd(e){if(e.tag!==S&&e.tag!==_||null===e.memoizedState||ir(Ku,jn)||0==(4&e.mode)){var t=0;if(0!=(8&e.mode)){for(var n=e.actualDuration,r=e.selfBaseDuration,i=null===e.alternate||e.child!==e.alternate.child,a=e.child;null!==a;)t=or(t,or(a.lanes,a.childLanes)),i&&(n+=a.actualDuration),r+=a.treeBaseDuration,a=a.sibling;if(e.tag===g&&null!==e.memoizedState){var o=e.child;null!==o&&(r-=o.treeBaseDuration)}e.actualDuration=n,e.treeBaseDuration=r}else for(var s=e.child;null!==s;)t=or(t,or(s.lanes,s.childLanes)),s=s.sibling;e.childLanes=t}}function rd(e){var t=Ur();return Wr(Tr,id.bind(null,e,t)),null}function id(e,t){do{ld()}while(null!==gc);if(ii.flushLegacyContextWarning(),ii.flushPendingUnsafeLifecycleWarnings(),0!=(48&Qu))throw Error("Should not already be working.");var n=e.finishedWork,r=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");e.callbackNode=null;var i,a=or(n.lanes,n.childLanes);if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t;for(var r=e.entanglements,i=e.eventTimes,a=e.expirationTimes,o=n;o>0;){var s=rr(o),l=1<<s;r[s]=0,i[s]=Hn,a[s]=Hn,o&=~l}}(e,a),null!==wc&&!function(e){return 0!=(24&e)}(a)&&wc.has(e)&&wc.delete(e),e===Vu&&(Vu=null,Xu=null,$u=0),n.flags>1?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=Qu;Qu|=qu;var s=Vc(e);ju.current=null,Rc=de(e.containerInfo),Ic=!1,cc=i;do{if(Zl(null,ad,null),eu()){if(null===cc)throw Error("Should be working on an effect.");var l=tu();md(cc,l),cc=cc.nextEffect}}while(null!==cc);Rc=null,Ms(),cc=i;do{if(Zl(null,od,null,e,t),eu()){if(null===cc)throw Error("Should be working on an effect.");var u=tu();md(cc,u),cc=cc.nextEffect}}while(null!==cc);Ic&&ze(),he(e.containerInfo),e.current=n,cc=i;do{if(Zl(null,sd,null,e,r),eu()){if(null===cc)throw Error("Should be working on an effect.");var c=tu();md(cc,c),cc=cc.nextEffect}}while(null!==cc);cc=null,Ar(),Xc(s),Qu=o}else e.current=n,Ms();var d=pc;if(pc)pc=!1,gc=e,vc=r,mc=t;else for(cc=i;null!==cc;){var h=cc.nextEffect;cc.nextEffect=null,8&cc.flags&&Bd(cc),cc=h}if(0!==(a=e.pendingLanes)){if(null!==Cc){var f=Cc;Cc=null;for(var p=0;p<f.length;p++)Ad(e,f[p],e.memoizedInteractions)}Ld(e,a)}else fc=null;if(d||Dd(e,r),1===a?e===_c?xc++:(xc=0,_c=e):xc=0,zn(n.stateNode,t),Le&&Uu.forEach((function(e){return e()})),Nc(e,Fr()),dc){dc=!1;var g=hc;throw hc=null,g}return 0!=(8&Qu)||jr(),null}function ad(){for(;null!==cc;){var e=cc.alternate;Ic||null===Rc||(0!=(8&cc.flags)?se(cc,Rc)&&(Ic=!0,Ie()):cc.tag===g&&ku(e,cc)&&se(cc,Rc)&&(Ic=!0,Ie()));var t=cc.flags;0!=(t&V)&&(ni(cc),su(e,cc),ti()),0!=(t&X)&&(pc||(pc=!0,Gr(Ir,(function(){return ld(),null})))),cc=cc.nextEffect}}function od(e,t){for(;null!==cc;){ni(cc);var n=cc.flags;if(16&n&&Pu(cc),n&Q){var r=cc.alternate;null!==r&&hu(r)}switch(1038&n){case 2:vu(cc),cc.flags&=-3;break;case 6:vu(cc),cc.flags&=-3,_u(cc.alternate,cc);break;case K:cc.flags&=-1025;break;case 1028:cc.flags&=-1025,_u(cc.alternate,cc);break;case 4:_u(cc.alternate,cc);break;case 8:xu(e,cc)}ti(),cc=cc.nextEffect}}function sd(e,t){for(;null!==cc;){ni(cc);var n=cc.flags;if(36&n)uu(e,cc.alternate,cc);n&Q&&du(cc),ti(),cc=cc.nextEffect}}function ld(){if(90!==mc){var e=mc>Ir?Ir:mc;return mc=90,Wr(e,hd)}return!1}function ud(e,t){yc.push(t,e),pc||(pc=!0,Gr(Ir,(function(){return ld(),null})))}function cd(e,t){bc.push(t,e),e.flags|=$;var n=e.alternate;null!==n&&(n.flags|=$),pc||(pc=!0,Gr(Ir,(function(){return ld(),null})))}function dd(e){var t=e.create;e.destroy=t()}function hd(){if(null===gc)return!1;var e=gc,t=vc;if(gc=null,vc=0,0!=(48&Qu))throw Error("Cannot flush passive effects while already rendering.");Tc=!0;var n=Qu;Qu|=qu;var r=Vc(e),i=bc;bc=[];for(var a=0;a<i.length;a+=2){var o=i[a],s=i[a+1],l=o.destroy;o.destroy=void 0,s.flags&=-8193;var u=s.alternate;if(null!==u&&(u.flags&=-8193),"function"==typeof l){if(ni(s),Zl(null,l,null),eu()){if(null===s)throw Error("Should be working on an effect.");md(s,tu())}ti()}}var c=yc;yc=[];for(var d=0;d<c.length;d+=2){var h=c[d],f=c[d+1];if(ni(f),Zl(null,dd,null,h),eu()){if(null===f)throw Error("Should be working on an effect.");md(f,tu())}ti()}for(var p=e.current.firstEffect;null!==p;){var g=p.nextEffect;p.nextEffect=null,8&p.flags&&Bd(p),p=g}return Xc(r),Dd(e,t),Tc=!1,Qu=n,jr(),Sc=null===gc?0:Sc+1,!0}function fd(e){return null!==fc&&fc.has(e)}var pd=function(e){dc||(dc=!0,hc=e)};function gd(e,t,n){Ui(e,Bl(e,Ol(n,t),1));var r=zc(),i=Dc(e,1);null!==i&&(ur(i,1,r),Nc(i,r),Ld(i,1))}function md(e,t){if(3!==e.tag)for(var n=e.return;null!==n;){if(3===n.tag)return void gd(n,e,t);if(1===n.tag){var r=n.type,i=n.stateNode;if("function"==typeof r.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&!fd(i)){var a=Ol(t,e);Ui(n,jl(n,a,1));var o=zc(),s=Dc(n,1);if(null!==s)ur(s,1,o),Nc(s,o),Ld(s,1);else if("function"==typeof i.componentDidCatch&&!fd(i))try{i.componentDidCatch(t,a)}catch(e){}return}}n=n.return}else gd(e,e,t)}function vd(e,t,n){var r=e.pingCache;null!==r&&r.delete(t);var i=zc();cr(e,n),Vu===e&&ar($u,n)&&(4===Zu||3===Zu&&er($u)&&Fr()-oc<500?Hc(e,0):ic=or(ic,n)),Nc(e,i),Ld(e,n)}function yd(e,t){var n;null!==(n=e.stateNode)&&n.delete(t),function(e,t){0===t&&(t=Lc(e));var n=zc(),r=Dc(e,t);null!==r&&(ur(r,t,n),Nc(r,n),Ld(r,t))}(e,0)}var bd=null;function wd(e){if(0==(Qu&Yu)&&6&e.mode){var t=e.tag;if(2===t||3===t||1===t||0===t||t===f||t===m||t===v||t===x){var n=Y(e.type)||"ReactComponent";if(null!==bd){if(bd.has(n))return;bd.add(n)}else bd=new Set([n]);var r=Jr;try{ni(e),c("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.")}finally{r?ni(e):ti()}}}}var xd,_d=null;xd=function(e,t,n){var r=yh(null,t);try{return zl(e,t,n)}catch(i){if(null!==i&&"object"==typeof i&&"function"==typeof i.then)throw i;if(Si(),Ro(),Ul(t),yh(t,r),8&t.mode&&Ds(t),Zl(null,zl,null,e,t,n),eu())throw tu();throw i}};var Sd,Cd=!1;Sd=new Set;var kd={current:!1};function Pd(e){if(!0===Se&&!0===Hu.current&&!0!==kd.current){var t=Jr;try{ni(e),c("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);")}finally{t?ni(e):ti()}}}function Ed(e){!0===Se&&0!=(1&e.mode)&&!1===Hu.current&&!1===kd.current&&c("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",Y(e.type))}var Td=function(e){if(!0===Se&&0===Qu&&!1===Hu.current&&!1===kd.current){var t=Jr;try{ni(e),c("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",Y(e.type))}finally{t?ni(e):ti()}}},Rd=!1;function Id(e,t){return 1e3*t+e.interactionThreadID}function zd(e){null===Cc?Cc=[e]:Cc.push(e)}function Ad(e,t,n){if(n.size>0){var r=e.pendingInteractionMap,i=r.get(t);null!=i?n.forEach((function(e){i.has(e)||e.__count++,i.add(e)})):(r.set(t,new Set(n)),n.forEach((function(e){e.__count++})));var a=s.__subscriberRef.current;if(null!==a){var o=Id(e,t);a.onWorkScheduled(n,o)}}}function Ld(e,t){Ad(e,t,s.__interactionsRef.current)}function Md(e,t){var n=new Set;if(e.pendingInteractionMap.forEach((function(e,r){ir(t,r)&&e.forEach((function(e){return n.add(e)}))})),e.memoizedInteractions=n,n.size>0){var r=s.__subscriberRef.current;if(null!==r){var i=Id(e,t);try{r.onWorkStarted(n,i)}catch(e){Gr(Tr,(function(){throw e}))}}}}function Dd(e,t){var n,r=e.pendingLanes;try{if(null!==(n=s.__subscriberRef.current)&&e.memoizedInteractions.size>0){var i=Id(e,t);n.onWorkStopped(e.memoizedInteractions,i)}}catch(e){Gr(Tr,(function(){throw e}))}finally{var a=e.pendingInteractionMap;a.forEach((function(e,t){ir(r,t)||(a.delete(t),e.forEach((function(e){if(e.__count--,null!==n&&0===e.__count)try{n.onInteractionScheduledWorkCompleted(e)}catch(e){Gr(Tr,(function(){throw e}))}})))}))}}function Nd(){return Gd>0}var Fd=o.unstable_flushAllWithoutAsserting,Ud="function"==typeof Fd;function Od(){if(void 0!==Fd)try{return Fd()}finally{}else try{for(var e=!1;ld();)e=!0;return e}finally{}}function Wd(t){try{Od(),function(t){if(null===Wu)try{var n=("require"+Math.random()).slice(0,7),r=e&&e[n];Wu=r.call(e,"timers").setImmediate}catch(e){Wu=function(e){!1===Ou&&(Ou=!0,"undefined"==typeof MessageChannel&&c("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}Wu(t)}((function(){Od()?Wd(t):t()}))}catch(e){t(e)}}var Gd=0;function Bd(e){e.sibling=null,e.stateNode=null}var jd=null,Hd=null,Yd=function(e){jd=e};function qd(e){if(null===jd)return e;var t=jd(e);return void 0===t?e:t.current}function Qd(e){return qd(e)}function Vd(e){if(null===jd)return e;var t=jd(e);if(void 0===t){if(null!=e&&"function"==typeof e.render){var n=qd(e.render);if(e.render!==n){var r={$$typeof:A,render:n};return void 0!==e.displayName&&(r.displayName=e.displayName),r}}return e}return t.current}function Xd(e,t){if(null===jd)return!1;var n=e.elementType,r=t.type,i=!1,a="object"==typeof r&&null!==r?r.$$typeof:null;switch(e.tag){case 1:"function"==typeof r&&(i=!0);break;case 0:("function"==typeof r||a===N)&&(i=!0);break;case f:(a===A||a===N)&&(i=!0);break;case m:case v:(a===D||a===N)&&(i=!0);break;default:return!1}if(i){var o=jd(n);if(void 0!==o&&o===jd(r))return!0}return!1}function $d(e){null!==jd&&"function"==typeof WeakSet&&(null===Hd&&(Hd=new WeakSet),Hd.add(e))}var Kd=function(e,t){if(null!==jd){var n=t.staleFamilies,r=t.updatedFamilies;ld(),Gc((function(){Zd(e.current,r,n)}))}},Jd=function(e,t){e.context===dn&&(ld(),Gc((function(){xh(t,e,null,null)})))};function Zd(e,t,n){var r=e.alternate,i=e.child,a=e.sibling,o=e.tag,s=e.type,l=null;switch(o){case 0:case v:case 1:l=s;break;case f:l=s.render}if(null===jd)throw new Error("Expected resolveFamily to be set during hot reload.");var u=!1,c=!1;if(null!==l){var d=jd(l);void 0!==d&&(n.has(d)?c=!0:t.has(d)&&(1===o?c=!0:u=!0))}null!==Hd&&(Hd.has(e)||null!==r&&Hd.has(r))&&(c=!0),c&&(e._debugNeedsRemount=!0),(c||u)&&Mc(e,1,Hn),null===i||c||Zd(i,t,n),null!==a&&Zd(a,t,n)}var eh,th=function(e,t){var n=new Set,r=new Set(t.map((function(e){return e.current})));return nh(e.current,r,n),n};function nh(e,t,n){var r=e.child,i=e.sibling,a=e.tag,o=e.type,s=null;switch(a){case 0:case v:case 1:s=o;break;case f:s=o.render}var l=!1;null!==s&&t.has(s)&&(l=!0),l?function(e,t){if(function(e,t){var n=e,r=!1;for(;;){if(5===n.tag)r=!0,t.add(n.stateNode);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)return r;for(;null===n.sibling;){if(null===n.return||n.return===e)return r;n=n.return}n.sibling.return=n.return,n=n.sibling}return!1}(e,t))return;var n=e;for(;;){switch(n.tag){case 5:return void t.add(n.stateNode);case 4:case 3:return void t.add(n.stateNode.containerInfo)}if(null===n.return)throw new Error("Expected to reach root first.");n=n.return}}(e,n):null!==r&&nh(r,t,n),null!==i&&nh(i,t,n)}eh=!1;try{var rh=Object.preventExtensions({});new Map([[rh,null]]),new Set([rh])}catch(e){eh=!0}var ih=1;function ah(e,t,n,r){this.tag=e,this.key=n,this.elementType=null,this.type=null,this.stateNode=null,this.return=null,this.child=null,this.sibling=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedProps=null,this.updateQueue=null,this.memoizedState=null,this.dependencies=null,this.mode=r,this.flags=0,this.nextEffect=null,this.firstEffect=null,this.lastEffect=null,this.lanes=0,this.childLanes=0,this.alternate=null,this.actualDuration=Number.NaN,this.actualStartTime=Number.NaN,this.selfBaseDuration=Number.NaN,this.treeBaseDuration=Number.NaN,this.actualDuration=0,this.actualStartTime=-1,this.selfBaseDuration=0,this.treeBaseDuration=0,this._debugID=ih++,this._debugSource=null,this._debugOwner=null,this._debugNeedsRemount=!1,this._debugHookTypes=null,eh||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this)}var oh,sh,lh=function(e,t,n,r){return new ah(e,t,n,r)};function uh(e){var t=e.prototype;return!(!t||!t.isReactComponent)}function ch(e,t){var n=e.alternate;null===n?((n=lh(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n._debugID=e._debugID,n._debugSource=e._debugSource,n._debugOwner=e._debugOwner,n._debugHookTypes=e._debugHookTypes,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null,n.actualDuration=0,n.actualStartTime=-1),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue;var r=e.dependencies;switch(n.dependencies=null===r?null:{lanes:r.lanes,firstContext:r.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.selfBaseDuration=e.selfBaseDuration,n.treeBaseDuration=e.treeBaseDuration,n._debugNeedsRemount=e._debugNeedsRemount,n.tag){case 2:case 0:case v:n.type=qd(e.type);break;case 1:n.type=Qd(e.type);break;case f:n.type=Vd(e.type)}return n}function dh(e,t){e.flags&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null;var n=e.alternate;if(null===n)e.childLanes=0,e.lanes=t,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null,e.selfBaseDuration=0,e.treeBaseDuration=0;else{e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type;var r=n.dependencies;e.dependencies=null===r?null:{lanes:r.lanes,firstContext:r.firstContext},e.selfBaseDuration=n.selfBaseDuration,e.treeBaseDuration=n.treeBaseDuration}return e}function hh(e,t,n,r,i,a){var o=2,s=e;if("function"==typeof e)uh(e)?(o=1,s=Qd(s)):s=qd(s);else if("string"==typeof e)o=5;else e:switch(e){case E:return ph(n.children,i,a,t);case U:o=8,i|=16;break;case T:o=8,i|=1;break;case R:return function(e,t,n,r){"string"!=typeof e.id&&c('Profiler must specify an "id" as a prop');var i=lh(p,e,r,8|t);return i.elementType=R,i.type=R,i.lanes=n,i.stateNode={effectDuration:0,passiveEffectDuration:0},i}(n,i,a,t);case L:return function(e,t,n,r){var i=lh(g,e,r,t);return i.type=L,i.elementType=L,i.lanes=n,i}(n,i,a,t);case M:return function(e,t,n,r){var i=lh(b,e,r,t);return i.type=M,i.elementType=M,i.lanes=n,i}(n,i,a,t);case O:return gh(n,i,a,t);case W:return function(e,t,n,r){var i=lh(S,e,r,t);return i.type=W,i.elementType=W,i.lanes=n,i}(n,i,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case I:o=h;break e;case z:o=9;break e;case A:o=f,s=Vd(s);break e;case D:o=m;break e;case N:o=16,s=null;break e;case F:o=x;break e}var l="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(l+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var u=r?Y(r.type):null;throw u&&(l+="\n\nCheck the render method of `"+u+"`."),Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: "+(null==e?e:typeof e)+"."+l)}var d=lh(o,n,t,i);return d.elementType=e,d.type=s,d.lanes=a,d._debugOwner=r,d}function fh(e,t,n){var r;r=e._owner;var i=hh(e.type,e.key,e.props,r,t,n);return i._debugSource=e._source,i._debugOwner=e._owner,i}function ph(e,t,n,r){var i=lh(7,e,r,t);return i.lanes=n,i}function gh(e,t,n,r){var i=lh(_,e,r,t);return i.type=O,i.elementType=O,i.lanes=n,i}function mh(e,t,n){var r=lh(6,e,null,t);return r.lanes=n,r}function vh(e,t,n){var r=null!==e.children?e.children:[],i=lh(4,r,e.key,t);return i.lanes=n,i.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},i}function yh(e,t){return null===e&&(e=lh(2,null,null,0)),e.tag=t.tag,e.key=t.key,e.elementType=t.elementType,e.type=t.type,e.stateNode=t.stateNode,e.return=t.return,e.child=t.child,e.sibling=t.sibling,e.index=t.index,e.ref=t.ref,e.pendingProps=t.pendingProps,e.memoizedProps=t.memoizedProps,e.updateQueue=t.updateQueue,e.memoizedState=t.memoizedState,e.dependencies=t.dependencies,e.mode=t.mode,e.flags=t.flags,e.nextEffect=t.nextEffect,e.firstEffect=t.firstEffect,e.lastEffect=t.lastEffect,e.lanes=t.lanes,e.childLanes=t.childLanes,e.alternate=t.alternate,e.actualDuration=t.actualDuration,e.actualStartTime=t.actualStartTime,e.selfBaseDuration=t.selfBaseDuration,e.treeBaseDuration=t.treeBaseDuration,e._debugID=t._debugID,e._debugSource=t._debugSource,e._debugOwner=t._debugOwner,e._debugNeedsRemount=t._debugNeedsRemount,e._debugHookTypes=t._debugHookTypes,e}function bh(e,t,n){switch(this.tag=t,this.containerInfo=e,this.pendingChildren=null,this.current=null,this.pingCache=null,this.finishedWork=null,this.timeoutHandle=xe,this.context=null,this.pendingContext=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=lr(0),this.expirationTimes=lr(Hn),this.pendingLanes=0,this.suspendedLanes=0,this.pingedLanes=0,this.expiredLanes=0,this.mutableReadLanes=0,this.finishedLanes=0,this.entangledLanes=0,this.entanglements=lr(0),Pe&&(this.mutableSourceEagerHydrationData=null),this.interactionThreadID=s.unstable_getThreadID(),this.memoizedInteractions=new Set,this.pendingInteractionMap=new Map,t){case 1:this._debugRootType="createBlockingRoot()";break;case 2:this._debugRootType="createRoot()";break;case 0:this._debugRootType="createLegacyRoot()"}}function wh(e,t,n,r){var i=new bh(e,t,n),a=function(e){var t;return t=2===e?7:1===e?3:0,In&&(t|=8),lh(3,null,null,t)}(t);return i.current=a,a.stateNode=i,Di(a),i}function xh(e,t,n,r){!function(e,t){if(Tn&&"function"==typeof Tn.onScheduleFiberRoot)try{Tn.onScheduleFiberRoot(En,e,t)}catch(e){Rn||(Rn=!0,c("React instrumentation encountered an error: %s",e))}}(t,e);var i,a=t.current,s=zc();"undefined"!=typeof jest&&(i=a,!1===Rd&&void 0===o.unstable_flushAllWithoutAsserting&&(2&i.mode||4&i.mode)&&(Rd=!0,c("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler")),Pd(a));var l=Ac(a),u=function(e){if(!e)return dn;var t=C(e),n=Pn(t);if(1===t.tag){var r=t.type;if(bn(r))return Sn(t,r,n)}return n}(n);null===t.context?t.context=u:t.pendingContext=u,Zr&&null!==Jr&&!oh&&(oh=!0,c("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",Y(Jr.type)||"Unknown"));var d=Fi(s,l);return d.payload={element:e},null!==(r=void 0===r?null:r)&&("function"!=typeof r&&c("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",r),d.callback=r),Ui(a,d),Mc(a,l,s),l}function _h(e,t){var n=e.memoizedState;null!==n&&null!==n.dehydrated&&(n.retryLane=function(e,t){return 0!==e&&e<t?e:t}(n.retryLane,t))}function Sh(e,t){_h(e,t);var n=e.alternate;n&&_h(n,t)}oh=!1,sh={};var Ch=function(e){return!1};function kh(e){return Ch(e)}var Ph,Eh,Th,Rh,Ih,zh,Ah,Lh,Mh=function(e,t,n){var r=t[n],i=Array.isArray(e)?e.slice():a({},e);return n+1===t.length?(Array.isArray(i)?i.splice(r,1):delete i[r],i):(i[r]=Mh(e[r],t,n+1),i)},Dh=function(e,t){return Mh(e,t,0)},Nh=function(e,t,n,r){var i=t[r],o=Array.isArray(e)?e.slice():a({},e);r+1===t.length?(o[n[r]]=o[i],Array.isArray(o)?o.splice(i,1):delete o[i]):o[i]=Nh(e[i],t,n,r+1);return o},Fh=function(e,t,n){if(t.length===n.length){for(var r=0;r<n.length-1;r++)if(t[r]!==n[r])return void u("copyWithRename() expects paths to be the same except for the deepest key");return Nh(e,t,n,0)}u("copyWithRename() expects paths of the same length")},Uh=function(e,t,n,r){if(n>=t.length)return r;var i=t[n],o=Array.isArray(e)?e.slice():a({},e);return o[i]=Uh(e[i],t,n+1,r),o},Oh=function(e,t,n){return Uh(e,t,0,n)},Wh=function(e,t){for(var n=e.memoizedState;null!==n&&t>0;)n=n.next,t--;return n};function Gh(e){var t=oe(e);return null===t?null:t.stateNode}function Bh(e){return null}function jh(){return Jr}return Ph=function(e,t,n,r){var i=Wh(e,t);if(null!==i){var o=Oh(i.memoizedState,n,r);i.memoizedState=o,i.baseState=o,e.memoizedProps=a({},e.memoizedProps),Mc(e,1,Hn)}},Eh=function(e,t,n){var r=Wh(e,t);if(null!==r){var i=Dh(r.memoizedState,n);r.memoizedState=i,r.baseState=i,e.memoizedProps=a({},e.memoizedProps),Mc(e,1,Hn)}},Th=function(e,t,n,r){var i=Wh(e,t);if(null!==i){var o=Fh(i.memoizedState,n,r);i.memoizedState=o,i.baseState=o,e.memoizedProps=a({},e.memoizedProps),Mc(e,1,Hn)}},Rh=function(e,t,n){e.pendingProps=Oh(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),Mc(e,1,Hn)},Ih=function(e,t){e.pendingProps=Dh(e.memoizedProps,t),e.alternate&&(e.alternate.pendingProps=e.pendingProps),Mc(e,1,Hn)},zh=function(e,t,n){e.pendingProps=Fh(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),Mc(e,1,Hn)},Ah=function(e){Mc(e,1,Hn)},Lh=function(e){Ch=e},r.IsThisRendererActing=kd,r.act=function(e){var t=Gd;Gd++;var n,r=Hu.current,i=kd.current;function a(){Gd--,Hu.current=r,kd.current=i,Gd>t&&c("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ")}Hu.current=!0,kd.current=!0;try{n=Wc(e)}catch(e){throw a(),e}if(null!==n&&"object"==typeof n&&"function"==typeof n.then){var o=!1;return"undefined"!=typeof Promise&&Promise.resolve().then((function(){})).then((function(){!1===o&&c("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);")})),{then:function(e,t){o=!0,n.then((function(){if(Gd>1||!0===Ud&&!0===r)return a(),void e();Wd((function(n){a(),n?t(n):e()}))}),(function(e){a(),t(e)}))}}}void 0!==n&&c("The callback passed to act(...) function must return undefined, or a Promise. You returned %s",n);try{1!==Gd||!1!==Ud&&!1!==r||Od(),a()}catch(e){throw a(),e}return{then:function(e){c("Do not await the result of calling act(...) with sync logic, it is not a Promise."),e()}}},r.attemptContinuousHydration=function(e){if(e.tag===g){var t=zc(),n=On;Mc(e,n,t),Sh(e,n)}},r.attemptHydrationAtCurrentPriority=function(e){if(e.tag===g){var t=zc(),n=Ac(e);Mc(e,n,t),Sh(e,n)}},r.attemptSynchronousHydration=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.hydrate){var n=function(e){return Xn(e.pendingLanes)}(t);!function(e,t){!function(e,t){e.expiredLanes|=t&e.pendingLanes}(e,t),Nc(e,Fr()),0==(48&Qu)&&(lc(),jr())}(t,n)}break;case g:var r=zc();Gc((function(){return Mc(e,1,r)}));Sh(e,4)}},r.attemptUserBlockingHydration=function(e){if(e.tag===g){Mc(e,4,zc()),Sh(e,4)}},r.batchedEventUpdates=function(e,t){var n=Qu;Qu|=2;try{return e(t)}finally{0===(Qu=n)&&(lc(),jr())}},r.batchedUpdates=Wc,r.createComponentSelector=function(e){return{$$typeof:Eu,value:e}},r.createContainer=function(e,t,n,r){return wh(e,t,n)},r.createHasPsuedoClassSelector=function(e){return{$$typeof:Tu,value:e}},r.createPortal=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:P,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}},r.createRoleSelector=function(e){return{$$typeof:Ru,value:e}},r.createTestNameSelector=function(e){return{$$typeof:Iu,value:e}},r.createTextSelector=function(e){return{$$typeof:zu,value:e}},r.deferredUpdates=function(e){return Wr(Ir,e)},r.discreteUpdates=function(e,t,n,r,i){var a=Qu;Qu|=4;try{return Wr(Rr,e.bind(null,t,n,r,i))}finally{0===(Qu=a)&&(lc(),jr())}},r.findAllNodes=Fu,r.findBoundingRects=function(e,t){if(!Le)throw Error("Test selector API is not supported by this renderer.");for(var n=Fu(e,t),r=[],i=0;i<n.length;i++)r.push(De(n[i]));for(var a=r.length-1;a>0;a--)for(var o=r[a],s=o.x,l=s+o.width,u=o.y,c=u+o.height,d=a-1;d>=0;d--)if(a!==d){var h=r[d],f=h.x,p=f+h.width,g=h.y,m=g+h.height;if(s>=f&&u>=g&&l<=p&&c<=m){r.splice(a,1);break}if(!(s!==f||o.width!==h.width||m<u||g>c)){g>u&&(h.height+=g-u,h.y=u),m<c&&(h.height=c-g),r.splice(a,1);break}if(!(u!==g||o.height!==h.height||p<s||f>l)){f>s&&(h.width+=f-s,h.x=s),p<l&&(h.width=l-f),r.splice(a,1);break}}return r},r.findHostInstance=function(e){var t=C(e);if(void 0===t)throw"function"==typeof e.render?Error("Unable to find node on an unmounted component."):Error("Argument appears to not be a ReactComponent. Keys: "+Object.keys(e));var n=oe(t);return null===n?null:n.stateNode},r.findHostInstanceWithNoPortals=function(e){var t=function(e){var t=ae(e);if(!t)return null;for(var n=t;;){if(5===n.tag||6===n.tag)return n;if(n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}(e);return null===t?null:t.tag===w?t.stateNode.instance:t.stateNode},r.findHostInstanceWithWarning=function(e,t){var n=C(e);if(void 0===n)throw"function"==typeof e.render?Error("Unable to find node on an unmounted component."):Error("Argument appears to not be a ReactComponent. Keys: "+Object.keys(e));var r=oe(n);if(null===r)return null;if(1&r.mode){var i=Y(n.type)||"Component";if(!sh[i]){sh[i]=!0;var a=Jr;try{ni(r),1&n.mode?c("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",t,t,i):c("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",t,t,i)}finally{a?ni(a):ti()}}}return r.stateNode},r.flushControlled=function(e){var t=Qu;Qu|=1;try{Wr(Tr,e)}finally{0===(Qu=t)&&(lc(),jr())}},r.flushDiscreteUpdates=function(){0==(49&Qu)?(!function(){if(null!==wc){var e=wc;wc=null,e.forEach((function(e){!function(e){e.expiredLanes|=24&e.pendingLanes}(e),Nc(e,Fr())}))}jr()}(),ld()):0!=(Qu&Yu)&&c("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.")},r.flushPassiveEffects=ld,r.flushSync=Gc,r.focusWithin=function(e,t){if(!Le)throw Error("Test selector API is not supported by this renderer.");for(var n=Nu(Lu(e),t),r=Array.from(n),i=0;i<r.length;){var a=r[i++];if(!Fe(a)){if(5===a.tag){var o=a.stateNode;if(Oe(o))return!0}for(var s=a.child;null!==s;)r.push(s),s=s.sibling}}return!1},r.getCurrentUpdateLanePriority=qn,r.getFindAllNodesFailureDescription=function(e,t){if(!Le)throw Error("Test selector API is not supported by this renderer.");for(var n=0,r=[],i=[Lu(e),0],a=0;a<i.length;){var o=i[a++],s=i[a++],l=t[s];if((5!==o.tag||!Fe(o))&&(Mu(o,l)&&(r.push(Du(l)),++s>n&&(n=s)),s<t.length))for(var u=o.child;null!==u;)i.push(u,s),u=u.sibling}if(n<t.length){for(var c=[],d=n;d<t.length;d++)c.push(Du(t[d]));return"findAllNodes was able to match part of the selector:\n  "+r.join(" > ")+"\n\nNo matching component was found for:\n  "+c.join(" > ")}return null},r.getPublicRootInstance=function(e){var t=e.current;return t.child?5===t.child.tag?le(t.child.stateNode):t.child.stateNode:null},r.injectIntoDevTools=function(e){var t=e.findFiberByHostInstance,n=l.ReactCurrentDispatcher;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return c("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"),!0;try{En=t.inject(e),Tn=t}catch(e){c("React instrumentation encountered an error: %s.",e)}return!0}({bundleType:e.bundleType,version:e.version,rendererPackageName:e.rendererPackageName,rendererConfig:e.rendererConfig,overrideHookState:Ph,overrideHookStateDeletePath:Eh,overrideHookStateRenamePath:Th,overrideProps:Rh,overridePropsDeletePath:Ih,overridePropsRenamePath:zh,setSuspenseHandler:Lh,scheduleUpdate:Ah,currentDispatcherRef:n,findHostInstanceByFiber:Gh,findFiberByHostInstance:t||Bh,findHostInstancesForRefresh:th,scheduleRefresh:Kd,scheduleRoot:Jd,setRefreshHandler:Yd,getCurrentFiber:jh})},r.observeVisibleRects=function(e,t,n,r){if(!Le)throw Error("Test selector API is not supported by this renderer.");var i=Fu(e,t),a=We(i,n,r),o=a.disconnect,s=a.observe,l=a.unobserve,u=function(){var n=Fu(e,t);i.forEach((function(e){n.indexOf(e)<0&&l(e)})),n.forEach((function(e){i.indexOf(e)<0&&s(e)}))};return Uu.push(u),{disconnect:function(){var e=Uu.indexOf(u);e>=0&&Uu.splice(e,1),o()}}},r.registerMutableSourceForHydration=function(e,t){var n=(0,t._getVersion)(t._source);null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,n]:e.mutableSourceEagerHydrationData.push(t,n)},r.runWithPriority=function(e,t){var n=qn();try{return Qn(e),t()}finally{Qn(n)}},r.shouldSuspend=kh,r.unbatchedUpdates=function(e,t){var n=Qu;Qu&=-2,Qu|=8;try{return e(t)}finally{0===(Qu=n)&&(lc(),jr())}},r.updateContainer=xh,r})}(_t),"production"===process.env.NODE_ENV?dt.exports=ht.exports:dt.exports=_t.exports;var Et=dt.exports,Tt={children:!0,ref:!0,key:!0,style:!0,forwardedRef:!0,unstable_applyCache:!0,unstable_applyDrawHitFromCache:!0},Rt=!1,It=!1,zt="ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.\nPosition of a node will be changed during drag&drop, so you should update state of the react app as well.\nConsider to add onDragMove or onDragEnd events.\nFor more info see: https://github.com/konvajs/react-konva/issues/256\n",At='ReactKonva: You are using "zIndex" attribute for a Konva node.\nreact-konva may get confused with ordering. Just define correct order of elements in your render function of a component.\nFor more info see: https://github.com/konvajs/react-konva/issues/194\n',Lt={};function Mt(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Lt;if(t===n&&console.error("same props"),!Rt&&"zIndex"in t&&(console.warn(At),Rt=!0),!It&&t.draggable){var r=void 0!==t.x||void 0!==t.y,i=t.onDragEnd||t.onDragMove;r&&!i&&(console.warn(zt),It=!0)}for(var a in n)if(!Tt[a]){var o="on"===a.slice(0,2),s=n[a]!==t[a];if(o&&s)"content"===(p=a.substr(2).toLowerCase()).substr(0,7)&&(p="content"+p.substr(7,1).toUpperCase()+p.substr(8)),e.off(p,n[a]);var l=!t.hasOwnProperty(a);l&&e.setAttr(a,void 0)}var u=t._useStrictMode,c={},d=!1,h={};for(var a in t)if(!Tt[a]){o="on"===a.slice(0,2);var f=n[a]!==t[a];if(o&&f)"content"===(p=a.substr(2).toLowerCase()).substr(0,7)&&(p="content"+p.substr(7,1).toUpperCase()+p.substr(8)),t[a]&&(h[p]=t[a]);!o&&(t[a]!==n[a]||u&&t[a]!==e.getAttr(a))&&(d=!0,c[a]=t[a])}for(var p in d&&(e.setAttrs(c),Dt(e)),h)e.on(p+".react-konva-event",h[p])}function Dt(e){if(!s.autoDrawEnabled){var t=e.getLayer()||e.getStage();t&&t.batchDraw()}}var Nt={},Ft={};ye.Node.prototype._applyProps=Mt;var Ut=setTimeout,Ot=clearTimeout;function Wt(e,t,n){t._remove(),e.add(t),t.setZIndex(n.getZIndex()),Dt(e)}var Gt=Object.freeze({__proto__:null,appendInitialChild:function(e,t){"string"!=typeof t?(e.add(t),Dt(e)):console.error("Do not use plain text as child of Konva.Node. You are using text: "+t)},createInstance:function(e,t,n){var r=ye[e];r||(console.error("Konva has no node with the type "+e+'. Group will be used instead. If you use minimal version of react-konva, just import required nodes into Konva: "import "konva/lib/shapes/'+e+'"  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html'),r=ye.Group);var i={},a={};for(var o in t){"on"===o.slice(0,2)?a[o]=t[o]:i[o]=t[o]}var s=new r(i);return Mt(s,a),s},createTextInstance:function(e,t,n){console.error('Text components are not supported for now in ReactKonva. Your text is: "'+e+'"')},finalizeInitialChildren:function(e,t,n){return!1},getPublicInstance:function(e){return e},prepareForCommit:function(){return null},preparePortalMount:function(){return null},prepareUpdate:function(e,t,n,r){return Ft},resetAfterCommit:function(){},resetTextContent:function(e){},shouldDeprioritizeSubtree:function(e,t){return!1},getRootHostContext:function(){return Nt},getChildHostContext:function(){return Nt},scheduleTimeout:Ut,cancelTimeout:Ot,noTimeout:-1,shouldSetTextContent:function(e,t){return!1},isPrimaryRenderer:!1,warnsIfNotActing:!0,supportsMutation:!0,appendChild:function(e,t){t.parent===e?t.moveToTop():e.add(t),Dt(e)},appendChildToContainer:function(e,t){t.parent===e?t.moveToTop():e.add(t),Dt(e)},insertBefore:Wt,insertInContainerBefore:function(e,t,n){Wt(e,t,n)},removeChild:function(e,t){t.destroy(),t.off(".react-konva-event"),Dt(e)},removeChildFromContainer:function(e,t){t.destroy(),t.off(".react-konva-event"),Dt(e)},commitTextUpdate:function(e,t,n){console.error('Text components are not yet supported in ReactKonva. You text is: "'+n+'"')},commitMount:function(e,t,n){},commitUpdate:function(e,t,n,r,i){Mt(e,i,r)},hideInstance:function(e){e.hide(),Dt(e)},hideTextInstance:function(e){},unhideInstance:function(e,t){(null==t.visible||t.visible)&&e.show()},unhideTextInstance:function(e,t){},clearContainer:function(e){},now:yt.exports.unstable_now,idlePriority:yt.exports.unstable_IdlePriority,run:yt.exports.unstable_runWithPriority}),Bt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var jt=function(e){var t,r,i=n.default.useRef(),a=n.default.useRef(),o=n.default.useRef(),s=(t=e,r=n.default.useRef(),n.default.useLayoutEffect((function(){r.current=t})),r.current),l=function(t){var n=e.forwardedRef;n&&("function"==typeof n?n(t):n.current=t)};return n.default.useLayoutEffect((function(){return a.current=new ye.Stage({width:e.width,height:e.height,container:i.current}),l(a.current),o.current=qt.createContainer(a.current),qt.updateContainer(e.children,o.current),function(){ye.isBrowser&&(l(null),qt.updateContainer(null,o.current,null),a.current.destroy())}}),[]),n.default.useLayoutEffect((function(){l(a.current),Mt(a.current,e,s),qt.updateContainer(e.children,o.current,null)})),n.default.createElement("div",{ref:i,accessKey:e.accessKey,className:e.className,role:e.role,style:e.style,tabIndex:e.tabIndex,title:e.title})},Ht="Group",Yt="Rect",qt=Et(Gt);qt.injectIntoDevTools({findHostInstanceByFiber:function(){return null},bundleType:"production"!==process.env.NODE_ENV?1:0,version:n.default.version,rendererPackageName:"react-konva"});var Qt=n.default.forwardRef((function(e,t){return n.default.createElement(jt,Bt({},e,{forwardedRef:t}))})),Vt={gridSize:{width:100,height:100},baseUnits:{wire:{width:5,height:4},tube:{width:4,height:2},fiber:{width:4,height:1}},wireSeparation:6,separation:1,pixelsPerUnit:10,separationWireToAngle:15,splitterWidth:2,colorForSplitters:"#555555"},Xt=function(e){var t=e.size,n=e.position,r=n.x,i=n.y,a=t.width,o=t.height;return{position:{x:r*Vt.pixelsPerUnit,y:i*Vt.pixelsPerUnit},size:{width:a*Vt.pixelsPerUnit,height:o*Vt.pixelsPerUnit}}},$t=n.default.createContext(void 0),Kt=function(e){var t=e.children,r=n.default.useState(void 0),i=r[0],a=r[1];return n.default.createElement($t.Provider,{value:{selectedFiber:i,setSelectedFiber:a}},t)},Jt=function(t){var r=t.x,i=t.y,a=t.fiber,o=Vt.baseUnits.fiber.height*Vt.pixelsPerUnit/2,s=e.useContext($t),l=s.selectedFiber,u=s.setSelectedFiber;return n.default.createElement("Circle",{x:r,y:i+o,radius:o,fill:"#FFff1F",stroke:l&&l.id===a.id?"#ff0000":"#000000",strokeWidth:2,onMouseEnter:function(e){e.target.getStage().container().style.cursor="pointer"},onMouseLeave:function(e){e.target.getStage().container().style.cursor="default"},onClick:function(e){if(e.target.getStage().container().style.cursor="default",void 0!==l){var t="SPLITTER"===a.parentType?a.parent.parentGrid:a.parent.parentWire.parentGrid;!function(e){var t=e.fiberIn,n=e.fiberOut;if(t.id===n.id)return!1;if("SPLITTER"===t.parentType&&"SPLITTER"===n.parentType){var r=t.parent,i=n.parent;if(!r.isFiberInput(t)==!i.isFiberInput(n))return!1;if(r.id===i.id)return!1}if("SPLITTER"===t.parentType||"SPLITTER"===n.parentType){var a="SPLITTER"===t.parentType?t:n,o=a===t?n:t,s=a.parent.isFiberInput(a);if("TUBE"!==o.parentType){var l=a.parent.getSplittersConnectedInInput(),u=o.parent.getSplittersConnectedInInput(),c=o.parent.isFiberInput(o);if(l.length>0&&u.length>0&&s!==c&&l.some((function(e){return u.some((function(t){return t.id===e.id}))})))return!1;if(s!==c&&l.length>0&&l.some((function(e){return e.id===o.parent.id})))return!1;if(s!==c&&u.length>0&&u.some((function(e){e.id,a.parent.id})))return!1}}return!0}({fiberIn:l,fiberOut:a})||t.addFiberConnection({fiber_in:l.id,fiber_out:a.id}),u(void 0)}else u(a)}})},Zt=function(e){var t=e.fiber,r=t.attr,i=t.color,a=Xt(r),o="RIGHT"===t.parent.parentWire.disposition,s=void 0!==t.parent.parentWire.parentGrid.getFiberConnectionWithId(t.id);return n.default.createElement(Ht,null,n.default.createElement(Yt,{x:a.position.x,y:a.position.y,width:a.size.width,height:a.size.height,fill:i}),n.default.createElement("Text",{text:"#".concat(t.id),x:a.position.x-(o?.1*a.size.width:0),y:a.position.y,width:1.2*a.size.width,height:a.size.height,fontSize:10,padding:a.size.height,fill:"red",strokeWidth:.5,stroke:"#000000"}),!s&&n.default.createElement(Jt,{x:a.position.x+a.size.width*(o?0:1),y:a.position.y,fiber:t}))},en=function(e){var t=e.tube,r=t.attr,i=t.color,a=Xt(r);function o(){!0===t.expanded?t.collapse():t.expand()}return n.default.createElement(Ht,null,n.default.createElement(Yt,{x:a.position.x,y:a.position.y,width:a.size.width,height:a.size.height,onClick:o,fill:i}),n.default.createElement("Text",{onClick:o,text:"#".concat(t.id),x:a.position.x,y:a.position.y,width:a.size.width,height:a.size.height,fontSize:14,padding:5,fill:"red",strokeWidth:.5,stroke:"#000000"}),t.expanded&&t.fibers.map((function(e,t){return n.default.createElement(Zt,{key:t,fiber:e})})))},tn=function(e){var t=e.wire,r=t.attr,i=Xt(r);return n.default.createElement(Ht,null,n.default.createElement(Yt,{x:i.position.x,y:i.position.y,width:i.size.width,height:i.size.height,fill:"#555555"}),t.expanded&&t.tubes.map((function(e,t){return n.default.createElement(en,{key:t,tube:e})})))},nn=function(){function e(e){var t=e.data,n=e.parentGrid,i=e.index;this.attr=r({},Wn),this.fibers_in=[],this.fibers_out=[];var a=t.id,o=t.fibers_in,s=t.fibers_out;this.id=a,this.fibers_in=this.getParsedFibers(o),this.fibers_out=this.getParsedFibers(s),this.parentGrid=n,this.index=i}return e.prototype.calculateSize=function(){this.attr.size={width:Vt.splitterWidth+2*Vt.baseUnits.fiber.width,height:(this.fibers_out.length+this.fibers_out.length+1)*Vt.baseUnits.fiber.height}},e.prototype.calculatePosition=function(){var e,t=this,n=this.fibers_in.map((function(e){return t.parentGrid.getFiberConnectionWithId(e.id)})).filter((function(e){return void 0!==e})).map((function(e){var n=t.fibers_in.some((function(t){return t.id===e.fiber_in}))?e.fiber_out:e.fiber_in,r=t.parentGrid.getFiberById(n);return"SPLITTER"===r.parentType?r:void 0})).filter((function(e){return void 0!==e})).sort((function(e,t){return e.attr.position.x-t.attr.position.x}));if(n.length>0){var r=n[0].parent;0===r.attr.position.x&&r.calculatePosition(),e=r.attr.position.x+r.attr.size.width+Vt.baseUnits.fiber.height,e=this.parentGrid.pathController.rightAngleRowController.indexController.getFreeAboveIndexes({point:e+2*Vt.baseUnits.fiber.height,n:1,unitSize:this.attr.size.width})[0]}else e=this.parentGrid.leftSideWidth;var i=this.parentGrid.pathController.tubeFusionColumnController.indexController.getHeight(),a=this.parentGrid.getWiresHeight(),o=this.parentGrid.splitters.find((function(e){return e.index===t.index-1}));if(o){var s=o.attr.position.y+o.getHeight();this.attr.position={x:e,y:s}}else this.attr.position={x:e,y:Math.max(a,i)}},e.prototype.getParsedFibers=function(e){var t=this;return e.map((function(e,n){return new rn({data:r(r({},e),{color:Vt.colorForSplitters}),parent:t,index:n})}))},e.prototype.isFiberInput=function(e){return void 0!==this.fibers_in.find((function(t){return t.id===e.id}))},e.prototype.getSibilingsForFiber=function(e){return(this.isFiberInput(e)?this.fibers_in:this.fibers_out).filter((function(t){return t.id!==e.id}))},e.prototype.getHeight=function(){return this.attr.size.height+2*Vt.separation},e.prototype.getPreviousSibilingsHeight=function(){var e=this;return this.parentGrid.splitters.filter((function(t){return t.index<e.index})).reduce((function(e,t){return e+t.getHeight()}),0)},e.prototype.getSplittersConnectedInInput=function(){var e=this;return this.fibers_in.map((function(t){return e.getSplitterConnectedInInput(t)})).filter((function(e){return void 0!==e}))},e.prototype.getSplitterConnectedInInput=function(e){var t=this.parentGrid.getFiberConnectionWithId(e.id);if(t){var n=e.id===t.fiber_in?t.fiber_out:t.fiber_in,r=this.parentGrid.getFiberById(n);if(r&&"SPLITTER"===r.parentType)return r.parent}},e.prototype.getJson=function(){return{id:this.id,fibers_in:this.fibers_in.map((function(e){return e.getJson()})),fibers_out:this.fibers_out.map((function(e){return e.getJson()})),index:this.index}},e.prototype.getParentGrid=function(){return this.parentGrid},e}(),rn=function(){function e(e){var t=e.data,n=e.parent,i=e.index,a=t.id,o=t.name,s=t.color;this.id=a,this.name=o,this.color=s,this.index=i,this.parent=n,n instanceof an?this.parentType="TUBE":n instanceof nn&&(this.parentType="SPLITTER"),this.attr=r({},Wn)}return e.prototype.calculateSize=function(){this.attr.size={width:Vt.baseUnits.fiber.width,height:Vt.baseUnits.fiber.height}},e.prototype.calculatePosition=function(){"TUBE"===this.parentType?this.calculatePositionForParentTube():this.calculatePositionForParentSplitter()},e.prototype.calculatePositionForParentTube=function(){var e,t=this,n=this.parent,r=n.attr.position,i=n.parentWire.disposition,a=n.fibers.filter((function(e){return e.index<t.index}));e=1===n.fibers.length?Vt.baseUnits.tube.height/2-Vt.baseUnits.fiber.height/2:Vt.separation+a.map((function(e){return e.attr.size.height+Vt.separation})).reduce((function(e,t){return e+t}),0);var o="LEFT"===i?r.x+Vt.baseUnits.tube.width:r.x-Vt.baseUnits.fiber.width;this.attr.position={x:o,y:r.y+e}},e.prototype.calculatePositionForParentSplitter=function(){var e,t,n=this.parent,r=n.isFiberInput(this)?n.fibers_in:n.fibers_out,i=(null==n?void 0:n.attr.size.height)/(r.length+r.length+1);e=1===r.length?(null==n?void 0:n.attr.size.height)/2-Vt.baseUnits.fiber.height/2:i+i*this.index*2,t=n.isFiberInput(this)?null==n?void 0:n.attr.position.x:(null==n?void 0:n.attr.position.x)+((null==n?void 0:n.attr.size.width)-Vt.baseUnits.fiber.width),this.attr={position:{x:t,y:e+n.attr.position.y},size:{width:Vt.baseUnits.fiber.width,height:Vt.baseUnits.fiber.height}}},e.prototype.getJson=function(){var e=this;return{id:e.id,name:e.name,color:e.color,attr:e.attr,index:e.index}},e}(),an=function(){function e(e){var t=this,n=e.data,i=e.parentWire,a=e.index;this.fibers=[],this.attr=r({},Wn),this.parentWire=i,this.index=a;var o=n.id,s=n.name,l=n.color,u=n.expanded,c=n.fibers,d=void 0===c?[]:c;this.id=o,this.name=s,this.color=l,this.expanded=u,d.forEach((function(e){return t.addFiber(e)}))}return e.prototype.addFiber=function(e){this.fibers.push(new rn({data:e,parent:this,index:this.fibers.length}))},e.prototype.getTubeConnectedTo=function(){var e=this,t={};return this.fibers.every((function(n){var r=e.getParentGrid().getFiberConnectionWithId(n.id);if(!r)return!1;var i=r.getOtherFiberId(n.id),a=e.getParentGrid().getFiberById(i);return"TUBE"===a.parentType&&(t[a.parent.id]=a.parent,n.parent.fibers.indexOf(n)===a.parent.fibers.indexOf(a))}))&&1===Object.values(t).length?Object.values(t)[0]:void 0},e.prototype.canWeCollapse=function(){return void 0!==this.getTubeConnectedTo()},e.prototype.evaluateExpanded=function(){void 0===this.expanded&&(this.expanded=!this.canWeCollapse())},e.prototype.expand=function(){this.expanded||this.getParentGrid().onTubeExpand(this)},e.prototype.collapse=function(){this.expanded&&this.canWeCollapse()&&this.getParentGrid().onTubeCollapse(this)},e.prototype.calculateSize=function(){var e=this.fibers.reduce((function(e,t){return e+t.attr.size.height}),0),t=!1===this.expanded||0===this.fibers.length?Vt.baseUnits.tube.height:Math.max(e+this.fibers.length*Vt.separation+Vt.separation,Vt.baseUnits.tube.height);this.attr.size={width:Vt.baseUnits.tube.width,height:t}},e.prototype.calculatePosition=function(){var e=this,t=this.parentWire.attr.position,n=this.parentWire.tubes.filter((function(t){return t.index<e.index})),r=n.map((function(e){return e.attr.size.height})).reduce((function(e,t){return e+t}),0),i=Vt.separation+r+n.length*Vt.separation,a="LEFT"===this.parentWire.disposition?t.x+Vt.baseUnits.wire.width:t.x-Vt.baseUnits.tube.width;this.attr.position={x:a,y:t.y+i}},e.prototype.getParentGrid=function(){return this.parentWire.parentGrid},e.prototype.getJson=function(){var e=this,t=e.id,n=e.name,r=e.color,i=e.attr,a=e.expanded;return{id:t,name:n,color:r,attr:i,index:e.index,expanded:a,fibers:e.fibers.map((function(e){return e.getJson()}))}},e}(),on=function(e){var t=e.pathCoords,n=e.color,r=e.unitSize;return t.map((function(e){return{position:{x:e[0],y:e[1]},size:{width:r,height:r},color:n}}))},sn=function(e){var t=e.point,n=e.unitSize,r=e.n;return un({point:t,unitSize:n,n:r,place:"BELOW"})},ln=function(e){var t=e.point,n=e.unitSize,r=e.n;return un({point:t,unitSize:n,n:r,place:"ABOVE"})},un=function(e){for(var t=e.point,n=e.unitSize,r=e.n,i=e.place,a=[],o=0;o<r;o++)a.push(t+o*n*("ABOVE"===i?-1:1));return a.sort((function(e,t){return e-t}))},cn=function(e){var t=e.source,n=e.point,r=e.angleRowController,i=e.fusionYPoint,a=e.unitSize;if(t.y===i)return{path:hn({source:t,point:n})};var o,s=[],l=r.indexController.getFreeBelowIndexes({point:n-2*a,unitSize:a,n:1});o=l&&0!==l.length?l[0]:sn({point:r.indexController.getLowestUsedIndex(),unitSize:a,n:1})[0];for(var u=t.x;u<o;u+=1)s.push([u,t.y]);if(t.y<i)for(var c=t.y;c<i;c+=1)s.push([o,c]);else for(c=t.y;c>i;c-=1)s.push([o,c]);for(u=o;u<n;u+=1)s.push([u,i]);return{path:s,usedXPoint:o,usedYPoint:t.y}},dn=function(e){var t=e.source,n=e.point,r=e.angleRowController,i=e.fusionYPoint,a=e.unitSize,o=e.minAngle;if(t.y===i)return{path:fn({target:t,point:n})};for(var s=[],l=r.indexController.getFreeAboveIndexes({point:o?o+a:n+a,unitSize:a,n:1})[0],u=t.x;u>=l;u-=1)s.push([u,t.y]);if(t.y<i)for(var c=t.y;c<i;c+=1)s.push([l,c]);else for(c=t.y;c>i;c-=1)s.push([l,c]);for(u=l;u>=n;u-=1)s.push([u,i]);return{path:s,usedXPoint:l,usedYPoint:t.y}},hn=function(e){for(var t=e.source,n=e.point,r=[],i=t.x;i<n;i+=1)r.push([i,t.y]);return r},fn=function(e){for(var t=e.target,n=[],r=e.point;r<t.x;r+=1)n.push([r,t.y]);return n},pn=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController,a=e.leftAngleRowController,o=e.rightAngleRowController,s=t.attr.position,l=n.attr.position,u=t instanceof an?"tube":"fiber",c=r.indexController.getNFreeIndexesFromPoint({point:s.y,unitSize:Vt.baseUnits[u].height,n:1})[0];if(r.indexController.setUsedIndexWithSize({point:c,size:Vt.baseUnits[u].height,element:t}),s.y===l.y&&l.y===c)return gn({elementIn:t,elementOut:n,fusionYPoint:c,columnController:r});var d=mn({elementIn:t,columnController:r,angleRowController:a,fusionYPoint:c}),h=vn({elementOut:n,columnController:r,angleRowController:o,fusionYPoint:c});return{fusionPoint:{x:r.middlePoint,y:c},path:i(i([],d,!0),h,!0)}},gn=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController,a=e.fusionYPoint,o=t instanceof an?"tube":"fiber",s=hn({source:t.attr.position,point:r.middlePoint}),l=on({pathCoords:s,color:t.color,unitSize:Vt.baseUnits[o].height}),u=fn({target:n.attr.position,point:r.middlePoint}),c=on({pathCoords:u,color:n.color,unitSize:Vt.baseUnits[o].height});return{fusionPoint:{x:r.middlePoint,y:a},path:i(i([],l,!0),c,!0)}},mn=function(e){var t=e.elementIn,n=e.columnController,r=e.fusionYPoint,i=e.angleRowController,a=t instanceof an?"tube":"fiber",o=cn({source:t.attr.position,point:n.middlePoint,angleRowController:i,fusionYPoint:r,unitSize:Vt.baseUnits[a].height}),s=o.path,l=o.usedXPoint,u=o.usedYPoint;return l&&i.indexController.setUsedIndexWithSize({point:l,size:Vt.baseUnits[a].height,element:t}),u&&n.indexController.setUsedIndexWithSize({point:u,size:Vt.baseUnits[a].height,element:t}),on({pathCoords:s,color:t.color,unitSize:Vt.baseUnits[a].height})},vn=function(e){var t=e.elementOut,n=e.columnController,r=e.fusionYPoint,i=e.angleRowController,a=t instanceof an?"tube":"fiber",o=dn({source:t.attr.position,point:n.middlePoint,angleRowController:i,fusionYPoint:r,unitSize:Vt.baseUnits[a].height}),s=o.path,l=o.usedXPoint,u=o.usedYPoint;return l&&i.indexController.setUsedIndexWithSize({point:l,size:Vt.baseUnits[a].height,element:t}),u&&n.indexController.setUsedIndexWithSize({point:u,size:Vt.baseUnits[a].height,element:t}),on({pathCoords:s,color:t.color,unitSize:Vt.baseUnits[a].height})},yn=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController,a=e.leftAngleRowController,o=e.rightAngleRowController,s=t instanceof an?"tube":"fiber",l=bn({elementIn:t,elementOut:n,columnController:r});l.forEach((function(e){r.indexController.setUsedIndexWithSize({point:e,size:Vt.baseUnits[s].height,element:t})}));var u=wn({elementIn:t,elementOut:n}),c=u.firstFiber,d=u.secondFiber,h=on({unitSize:Vt.baseUnits[s].height,color:c.color,pathCoords:[[r.middlePoint-Vt.baseUnits[s].height/2,l[0]],[r.middlePoint-Vt.baseUnits[s].height/2,l[1]]]}),f=on({unitSize:Vt.baseUnits[s].height,color:d.color,pathCoords:[[r.middlePoint-Vt.baseUnits[s].height/2,l[2]]]}),p=xn({element:c,fusionYPoint:l[0],columnController:r,leftAngleRowController:a,rightAngleRowController:o}),g=xn({element:d,fusionYPoint:l[2],columnController:r,leftAngleRowController:a,rightAngleRowController:o});return{fusionPoint:{x:r.middlePoint,y:l[1]},path:i(i(i(i([],h,!0),f,!0),p,!0),g,!0)}},bn=function(e){var t,n,r,i=e.elementIn,a=e.elementOut,o=e.columnController,s=i instanceof an?"tube":"fiber",l=o.indexController.getNFreeIndexesFromPoint({point:i.attr.position.y,unitSize:Vt.baseUnits[s].height,n:3}),u=l[0],c=l[1],d=l[2],h=o.indexController.getNFreeIndexesFromPoint({point:a.attr.position.y,unitSize:Vt.baseUnits[s].height,n:3}),f=h[0],p=h[1],g=h[2];return u<f?(t=u,n=c,r=d):(t=f,n=p,r=g),[t,n,r]},wn=function(e){var t=[e.elementIn,e.elementOut].sort((function(e,t){return e.attr.position.y-t.attr.position.y}));return{firstFiber:t[0],secondFiber:t[1]}},xn=function(e){var t=e.element,n=e.fusionYPoint,r=e.columnController,i=e.leftAngleRowController,a=e.rightAngleRowController;return t.attr.position.y===n?Cn({element:t,columnController:r}):"LEFT"===(t instanceof an?t.parentWire.disposition:t.parent.parentWire.disposition)?_n({element:t,fusionYPoint:n,columnController:r,angleRowController:i}):Sn({element:t,fusionYPoint:n,columnController:r,angleRowController:a})},_n=function(e){var t=e.element,n=e.fusionYPoint,r=e.columnController,i=e.angleRowController,a=t instanceof an?"tube":"fiber",o=cn({source:t.attr.position,point:r.middlePoint,angleRowController:i,fusionYPoint:n,unitSize:Vt.baseUnits[a].height}),s=o.path,l=o.usedXPoint,u=o.usedYPoint;return l&&i.indexController.setUsedIndexWithSize({point:l,size:Vt.baseUnits[a].height,element:t}),u&&r.indexController.setUsedIndexWithSize({point:u,size:Vt.baseUnits[a].height,element:t}),on({pathCoords:s,color:t.color,unitSize:Vt.baseUnits[a].height})},Sn=function(e){var t=e.element,n=e.fusionYPoint,r=e.columnController,i=e.angleRowController,a=t instanceof an?"tube":"fiber",o=dn({source:t.attr.position,point:r.middlePoint,angleRowController:i,fusionYPoint:n,unitSize:Vt.baseUnits[a].height}),s=o.path,l=o.usedXPoint,u=o.usedYPoint;return l&&i.indexController.setUsedIndexWithSize({point:l,size:Vt.baseUnits[a].height,element:t}),u&&r.indexController.setUsedIndexWithSize({point:u,size:Vt.baseUnits[a].height,element:t}),on({pathCoords:s,color:t.color,unitSize:Vt.baseUnits[a].height})},Cn=function(e){var t=e.element,n=e.columnController,r=t instanceof an?"tube":"fiber";if("LEFT"===(t instanceof an?t.parentWire.disposition:t.parent.parentWire.disposition)){var i=hn({source:t.attr.position,point:n.middlePoint});return on({pathCoords:i,color:t.color,unitSize:Vt.baseUnits[r].height})}var a=fn({target:t.attr.position,point:n.middlePoint});return on({pathCoords:a,color:t.color,unitSize:Vt.baseUnits[r].height})},kn=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController,a=e.fusionYPoint,o=t instanceof an?"tube":"fiber",s=hn({source:t.attr.position,point:r.middlePoint}),l=on({pathCoords:s,color:t.color,unitSize:Vt.baseUnits[o].height}),u=fn({target:n.attr.position,point:r.middlePoint}),c=on({pathCoords:u,color:n.color,unitSize:Vt.baseUnits[o].height});return{fusionPoint:{x:r.middlePoint,y:a},path:i(i([],l,!0),c,!0)}},Pn=function(e){var t=e.elementIn,n=e.columnController,r=e.fusionYPoint,i=e.angleRowController,a=t instanceof an?"tube":"fiber",o=cn({source:t.attr.position,point:n.middlePoint,angleRowController:i,fusionYPoint:r,unitSize:Vt.baseUnits[a].height}),s=o.path,l=o.usedXPoint,u=o.usedYPoint;return l&&i.indexController.setUsedIndexWithSize({point:l,size:Vt.baseUnits[a].height,element:t}),u&&n.indexController.setUsedIndexWithSize({point:u,size:Vt.baseUnits[a].height,element:t}),on({pathCoords:s,color:t.color,unitSize:Vt.baseUnits[a].height})},En=function(e){for(var t=e.element,n=e.fusionYPoint,r=e.middlePoint,i=[],a=t.attr.position.x;a>=r;a-=1)i.push([a,n]);return on({pathCoords:i,color:t.color,unitSize:Vt.baseUnits.fiber.height})},Tn=function(e){var t=e.elementOut,n=e.columnController,r=e.fusionYPoint,i=e.angleRowController,a=e.color,o=t instanceof an?"tube":"fiber",s=cn({source:t.attr.position,point:n.middlePoint,angleRowController:i,fusionYPoint:r,unitSize:Vt.baseUnits[o].height}),l=s.path,u=s.usedXPoint,c=s.usedYPoint;u&&i.indexController.setUsedIndexWithSize({point:u,size:Vt.baseUnits[o].height,element:t}),c&&n.indexController.setUsedIndexWithSize({point:c,size:Vt.baseUnits[o].height,element:t});for(var d=t.attr.position.x-1;d>=u;d-=1)l.push([d,t.attr.position.y]);return on({pathCoords:l,color:a,unitSize:Vt.baseUnits[o].height})},Rn=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController,i=e.fusionYPoint,a=e.angleRowController,o=n instanceof an?"tube":"fiber",s=t.parent,l=dn({source:n.attr.position,point:t.attr.position.x,angleRowController:a,fusionYPoint:i,unitSize:Vt.baseUnits[o].height,minAngle:s.attr.position.x+s.attr.size.width}),u=l.path,c=l.usedXPoint,d=l.usedYPoint;return c&&a.indexController.setUsedIndexWithSize({point:c,size:Vt.baseUnits[o].height,element:n}),d&&r.indexController.setUsedIndexWithSize({point:d,size:Vt.baseUnits[o].height,element:n}),on({pathCoords:u,color:n.color,unitSize:Vt.baseUnits[o].height})},In=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController,i=e.fusionYPoint,a=e.angleRowController,o=n instanceof an?"tube":"fiber",s=t.parent.getParentGrid().getSplittersMaxHposition(),l=dn({source:n.attr.position,point:t.attr.position.x+Vt.baseUnits[o].width,angleRowController:a,fusionYPoint:i,unitSize:Vt.baseUnits[o].height,minAngle:s+Vt.separation}),u=l.path,c=l.usedXPoint,d=l.usedYPoint;return c&&a.indexController.setUsedIndexWithSize({point:c,size:Vt.baseUnits[o].height,element:n}),d&&r.indexController.setUsedIndexWithSize({point:d,size:Vt.baseUnits[o].height,element:n}),on({pathCoords:u,color:n.color,unitSize:Vt.baseUnits[o].height})},zn=function(e){for(var t=e.elementIn,n=e.freeXPoint,r=e.fusionYPoint,i=e.middlePoint,a=e.color,o=[],s=t.attr.position.x+Vt.baseUnits.fiber.width;s<n;s+=1)o.push([s,t.attr.position.y]);for(var l=t.attr.position.y;l<r;l+=1)o.push([n,l]);for(s=n;s>=i;s-=1)o.push([s,r]);return on({pathCoords:o,color:a,unitSize:Vt.baseUnits.fiber.height})},An=function(){function e(e){var t=e.data,n=e.parentGrid;this.path=[],this.fusionPoint={x:0,y:0};var r=t.fiber_in,i=t.fiber_out;this.fiber_in=r,this.fiber_out=i,this.parentGrid=n}return e.prototype.fiberIdBelongsToConnection=function(e){var t=this.fiber_in,n=this.fiber_out;return e===t||e===n},e.prototype.getOtherFiberId=function(e){var t=this.fiber_in,n=this.fiber_out;return e===t?n:t},e.prototype.getJson=function(){return{fiber_in:this.fiber_in,fiber_out:this.fiber_out}},e.prototype.remove=function(){this.parentGrid.removeFiberConnection({fiber_in:this.fiber_in,fiber_out:this.fiber_out})},e.prototype.calculate=function(){var e=this.parentGrid.getFiberById(this.fiber_in),t=this.parentGrid.getFiberById(this.fiber_out);if("TUBE"!==e.parentType||"TUBE"!==t.parentType)if("SPLITTER"===e.parentType&&"TUBE"===t.parentType||"TUBE"===e.parentType&&"SPLITTER"===t.parentType){var n="SPLITTER"===e.parentType?e:t,r="TUBE"===e.parentType?e:t;this.calculateSplitterToTubeFiberConnection(n,r)}else"SPLITTER"!==e.parentType||"SPLITTER"!==t.parentType||this.calculateSplitterToSplitterFiberConnection(e,t);else this.calculateTubeFiberConnection(e,t)},e.prototype.calculateTubeFiberConnection=function(e,t){var n=e.parent,r=t.parent,i=e.attr.position.x<t.attr.position.x?e:t,a=i===e?t:e;if(n.parentWire.disposition!==r.parentWire.disposition){var o=pn({elementIn:i,elementOut:a,columnController:this.parentGrid.pathController.tubeFusionColumnController,leftAngleRowController:this.parentGrid.pathController.leftAngleRowController,rightAngleRowController:this.parentGrid.pathController.rightAngleRowController}),s=o.path,l=o.fusionPoint;this.path=s,this.fusionPoint=l}else{var u=yn({elementIn:i,elementOut:a,columnController:this.parentGrid.pathController.tubeFusionColumnController,leftAngleRowController:this.parentGrid.pathController.leftAngleRowController,rightAngleRowController:this.parentGrid.pathController.rightAngleRowController});s=u.path,l=u.fusionPoint;this.path=s,this.fusionPoint=l}},e.prototype.isVisible=function(){var e=this.getOtherFiberId(this.fiber_in),t=this.parentGrid.getFiberById(e);return"SPLITTER"===t.parentType||"TUBE"===t.parentType&&t.parent.expanded},e.prototype.someFiberIsFromSplitter=function(){var e=this.parentGrid.getFiberById(this.fiber_in),t=this.parentGrid.getFiberById(this.fiber_out);return"SPLITTER"===e.parentType||"SPLITTER"===t.parentType},e.prototype.calculateSplitterToTubeFiberConnection=function(e,t){e.parent.isFiberInput(e)?this.calculateSplitterInputToTubeFiberConnection(e,t):this.calculateSplitterOutputToTubeFiberConnection(e,t)},e.prototype.calculateSplitterInputToTubeFiberConnection=function(e,t){if("LEFT"===t.parent.parentWire.disposition){var n=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController,a=e.leftAngleRowController;e.rightAngleRowController;var o=t.attr.position,s=n.attr.position,l=t instanceof an?"tube":"fiber",u=s.y;if(r.indexController.setUsedIndexWithSize({point:u,size:Vt.baseUnits[l].height,element:t}),o.y===s.y&&s.y===u)return kn({elementIn:t,elementOut:n,fusionYPoint:u,columnController:r});var c=Pn({elementIn:t,columnController:r,angleRowController:a,fusionYPoint:u}),d=[];return s.x>r.middlePoint&&(d=En({element:n,fusionYPoint:u,middlePoint:r.middlePoint})),{fusionPoint:{x:r.middlePoint,y:u},path:i(i([],c,!0),d,!0)}}({elementIn:t,elementOut:e,columnController:this.parentGrid.pathController.tubeFusionColumnController,leftAngleRowController:this.parentGrid.pathController.leftAngleRowController,rightAngleRowController:this.parentGrid.pathController.rightAngleRowController}),r=n.path,a=n.fusionPoint;this.path=r,this.fusionPoint=a}else{var o=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController,a=e.leftAngleRowController,o=e.rightAngleRowController,s=t.attr.position;n.attr.position;var l=t instanceof an?"tube":"fiber",u=r.indexController.getNFreeIndexesFromPoint({point:s.y,unitSize:Vt.baseUnits[l].height,n:1})[0];r.indexController.setUsedIndexWithSize({point:u,size:Vt.baseUnits[l].height,element:t});var c=Tn({elementOut:n,columnController:r,angleRowController:a,fusionYPoint:u,color:t.color}),d=vn({elementOut:t,columnController:r,angleRowController:o,fusionYPoint:u});return{fusionPoint:{x:n.attr.position.x,y:n.attr.position.y},path:i(i(i([],c,!0),[],!0),d,!0)}}({elementIn:t,elementOut:e,columnController:this.parentGrid.pathController.tubeFusionColumnController,leftAngleRowController:this.parentGrid.pathController.leftAngleRowController,rightAngleRowController:this.parentGrid.pathController.rightAngleRowController});r=o.path,a=o.fusionPoint;this.path=r,this.fusionPoint=a}},e.prototype.calculateSplitterOutputToTubeFiberConnection=function(e,t){if("LEFT"===t.parent.parentWire.disposition){var n=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController,a=e.leftAngleRowController,o=e.rightAngleRowController;t.attr.position;var s=t.parent.getParentGrid().splitters.sort((function(e,t){return t.attr.position.y-e.attr.position.y})),l=s[0],u=l.attr.position.y+l.attr.size.height,c=r.indexController.getFreeAboveIndexes({point:u+2*Vt.baseUnits.fiber.height,unitSize:Vt.baseUnits.fiber.height,n:1})[0];r.indexController.setUsedIndexWithSize({point:c,size:Vt.baseUnits.fiber.height,element:t});var d=t.parent.getParentGrid().getSplittersMaxHposition(),h=o.indexController.getFreeAboveIndexes({point:d+2*Vt.baseUnits.fiber.height,unitSize:Vt.baseUnits.fiber.height,n:1})[0];o.indexController.setUsedIndexWithSize({point:h,size:Vt.baseUnits.fiber.height,element:t});var f=zn({elementIn:t,freeXPoint:h,fusionYPoint:c,middlePoint:r.middlePoint,color:n.color}),p=mn({elementIn:n,columnController:r,angleRowController:a,fusionYPoint:c});return{fusionPoint:{x:r.middlePoint,y:c},path:i(i([],f,!0),p,!0)}}({elementIn:e,elementOut:t,columnController:this.parentGrid.pathController.tubeFusionColumnController,leftAngleRowController:this.parentGrid.pathController.leftAngleRowController,rightAngleRowController:this.parentGrid.pathController.rightAngleRowController}),r=n.path,a=n.fusionPoint;this.path=r,this.fusionPoint=a}else{var o=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController;e.leftAngleRowController;var a=e.rightAngleRowController,o=t.attr.position,s=t instanceof an?"tube":"fiber",l=o.y;r.indexController.setUsedIndexWithSize({point:l,size:Vt.baseUnits[s].height,element:t});var u=In({elementOut:n,elementIn:t,columnController:r,angleRowController:a,fusionYPoint:l});return{fusionPoint:{x:o.x+Vt.baseUnits[s].width,y:l},path:i([],u,!0)}}({elementIn:e,elementOut:t,columnController:this.parentGrid.pathController.tubeFusionColumnController,leftAngleRowController:this.parentGrid.pathController.leftAngleRowController,rightAngleRowController:this.parentGrid.pathController.rightAngleRowController});r=o.path,a=o.fusionPoint;this.path=r,this.fusionPoint=a}},e.prototype.calculateSplitterToSplitterFiberConnection=function(e,t){var n=e.parent.isFiberInput(e),r=function(e){var t=e.elementIn,n=e.elementOut,r=e.columnController;e.leftAngleRowController;var a=e.rightAngleRowController,o=t.attr.position,s=t instanceof an?"tube":"fiber",l=o.y;r.indexController.setUsedIndexWithSize({point:l,size:Vt.baseUnits[s].height,element:t});var u=Rn({elementOut:n,elementIn:t,columnController:r,angleRowController:a,fusionYPoint:l});return{fusionPoint:{x:o.x+Vt.baseUnits[s].width,y:l},path:i([],u,!0)}}({elementIn:t.parent.isFiberInput(t)?e:t,elementOut:n?e:t,columnController:this.parentGrid.pathController.tubeFusionColumnController,leftAngleRowController:this.parentGrid.pathController.leftAngleRowController,rightAngleRowController:this.parentGrid.pathController.rightAngleRowController}),a=r.path,o=r.fusionPoint;this.path=a,this.fusionPoint=o},e}(),Ln=function(){function e(e){var t=this,n=e.data,i=e.parentGrid,a=e.index;this.expanded=!0,this.tubes=[],this.tubesSized={},this.tubesPositioned={},this.attr=r({},Wn),this.index=a,this.parentGrid=i;var o=n.id,s=n.name,l=n.tubes,u=void 0===l?[]:l,c=n.disposition,d=n.expanded,h=void 0===d||d;this.id=o,this.name=s,this.disposition=c,this.expanded=h,u.forEach((function(e){return t.addTube(e)}))}return e.prototype.addTube=function(e){var t=new an({data:e,parentWire:this,index:this.tubes.length});this.tubes.push(t)},e.prototype.calculateSize=function(){var e=this.tubes.reduce((function(e,t){return e+t.attr.size.height}),0),t=!1===this.expanded||0===this.tubes.length?Vt.baseUnits.wire.height:e+this.tubes.length*Vt.separation+Vt.separation;this.attr.size={width:Vt.baseUnits.wire.width,height:t}},e.prototype.calculatePosition=function(){var e=this,t=("LEFT"===this.disposition?this.parentGrid.leftWires:this.parentGrid.rightWires).filter((function(t){return t.index<e.index})),n=t.map((function(e){return e.attr.size.height})).reduce((function(e,t){return e+t}),0),r=n+t.length*Vt.wireSeparation;this.attr.position={x:"LEFT"===this.disposition?0:this.parentGrid.size.width-Vt.baseUnits.wire.width,y:r}},e.prototype.getJson=function(){var e=this,t=e.id,n=e.name,r=e.expanded,i=e.tubes,a=e.attr;return{id:t,name:n,expanded:r,disposition:e.disposition,attr:a,tubes:i.map((function(e){return e.getJson()}))}},e}(),Mn=function(){function e(e){var t=e.data,n=e.parentGrid;this.path=[],this.fusionPoint={x:0,y:0};var r=t.tube_in,i=t.tube_out;this.tube_in=r,this.tube_out=i,this.parentGrid=n}return e.prototype.tubeIdBelongsToConnection=function(e){var t=this.tube_in,n=this.tube_out;return e===t||e===n},e.prototype.getOtherTubeId=function(e){var t=this.tube_in,n=this.tube_out;return e===t?n:t},e.prototype.getJson=function(){return{tube_in:this.tube_in,tube_out:this.tube_out}},e.prototype.remove=function(){this.parentGrid.removeTubeConnection({tube_in:this.tube_in,tube_out:this.tube_out})},e.prototype.calculate=function(){var e=this.parentGrid.getTubeById(this.tube_in),t=this.parentGrid.getTubeById(this.tube_out);if(e.parentWire.disposition!==t.parentWire.disposition){var n=pn({elementIn:e,elementOut:t,columnController:this.parentGrid.pathController.tubeFusionColumnController,leftAngleRowController:this.parentGrid.pathController.leftAngleRowController,rightAngleRowController:this.parentGrid.pathController.rightAngleRowController}),r=n.path,i=n.fusionPoint;this.path=r,this.fusionPoint=i}else{var a=yn({elementIn:e,elementOut:t,columnController:this.parentGrid.pathController.tubeFusionColumnController,leftAngleRowController:this.parentGrid.pathController.leftAngleRowController,rightAngleRowController:this.parentGrid.pathController.rightAngleRowController});r=a.path,i=a.fusionPoint;this.path=r,this.fusionPoint=i}},e}(),Dn=function(){function e(){this.indexes={}}return e.prototype.checkIfIndexIsFree=function(e){var t=e.index;return!(t<0)&&void 0===this.indexes[t]},e.prototype.getLowestUsedIndex=function(){var e=Object.keys(this.indexes).map((function(e){return parseInt(e)}));return e.length>0?Math.min.apply(Math,e):0},e.prototype.getHighestUsedIndex=function(){var e=Object.keys(this.indexes).map((function(e){return parseInt(e)}));return e.length>0?Math.max.apply(Math,e):0},e.prototype.getFreeBelowIndexes=function(e){var t,n=this,r=e.n,a=e.unitSize,o=e.point;if(0===this.getHighestUsedIndex())return sn({point:o,unitSize:a,n:r});for(var s=o;!t&&s>0;){for(var l=sn({point:s,unitSize:a,n:r}),u=l[0],c=l[l.length-1],d=i([],l,!0),h=u;h>=u-a;h-=1)d.push(h);for(h=c;h<=c+a;h+=1)d.push(h);d.every((function(e){return n.checkIfIndexIsFree({index:e})}))&&(t=l),s-=1}return t},e.prototype.getFreeAboveIndexes=function(e){var t,n=this,r=e.n,a=e.unitSize,o=e.point;if(0===this.getHighestUsedIndex())return ln({point:o,unitSize:a,n:r});for(var s=o;!t;){var l=ln({point:s,unitSize:a,n:r}),u=l[0],c=l[l.length-1];i(i([],l,!0),[u-a,c+a],!1).every((function(e){return n.checkIfIndexIsFree({index:e})}))&&(t=l),s+=1}return t},e.prototype.getNFreeIndexesFromPoint=function(e){var t=e.n,n=e.unitSize,r=e.point,i=this.getFreeBelowIndexes({n:t,unitSize:n,point:r}),a=this.getFreeAboveIndexes({n:t,unitSize:n,point:r});if(a&&i){var o=a[0],s=i[0];return Math.abs(r-o)<Math.abs(r-s)?a:i}return a||i},e.prototype.setUsedIndexWithSize=function(e){var t=e.element,n=e.point,r=e.size;this.indexes[n]=t;for(var i=n;i<n+r;i++)this.indexes[i]=t},e.prototype.getHeight=function(){var e=this,t=Object.keys(this.indexes).filter((function(t){return void 0!==e.indexes[t]})).map((function(e){return parseInt(e,10)}));return 0===t.length?0:Math.max.apply(Math,t)+3*Vt.baseUnits.fiber.height},e.prototype.getWidth=function(){var e=this,t=Object.keys(this.indexes).filter((function(t){return void 0!==e.indexes[t]})).map((function(e){return parseInt(e,10)}));if(0===t.length)return 0;var n=Math.max.apply(Math,t),r=Math.min.apply(Math,t);return Math.abs(n-r)+3*Vt.baseUnits.fiber.width},e}(),Nn=function(e){var t=e.middlePoint;this.indexController=new Dn,this.middlePoint=t},Fn=function(){this.indexController=new Dn},Un=function(){function e(e){var t=e.middlePoint;this.tubeFusionColumnController=new Nn({middlePoint:t}),this.splitterFusionColumnController=new Nn({middlePoint:t}),this.leftAngleRowController=new Fn,this.rightAngleRowController=new Fn}return e.prototype.setMiddlePoint=function(e){this.tubeFusionColumnController.middlePoint=e,this.splitterFusionColumnController.middlePoint=e},e}(),On=function(){function e(e){var t,n,i,a,o,s,l=e.input,u=e.onChange;this.leftWires=[],this.rightWires=[],this.fiberConnections=[],this.tubeConnections=[],this.splitters=[],this.id=null===(t=null==l?void 0:l.res)||void 0===t?void 0:t.id,this.name=null===(n=null==l?void 0:l.res)||void 0===n?void 0:n.name,this.onChange=u,this.size=r({},Vt.gridSize),this.leftSideWidth=this.size.width/2,this.rightSideWidth=this.size.width/2,(null===(i=null==l?void 0:l.res)||void 0===i?void 0:i.leftSideWidth)&&(this.leftSideWidth=null===(a=null==l?void 0:l.res)||void 0===a?void 0:a.leftSideWidth,this.size.width=this.leftSideWidth+this.rightSideWidth),(null===(o=null==l?void 0:l.res)||void 0===o?void 0:o.rightSideWidth)&&(this.rightSideWidth=null===(s=null==l?void 0:l.res)||void 0===s?void 0:s.rightSideWidth,this.size.width=this.leftSideWidth+this.rightSideWidth),this.parse({input:l}),this.pathController=new Un({middlePoint:this.leftSideWidth}),this.calculate()}return e.prototype.parse=function(e){var t,n,r,i,a,o,s,l,u,c=e.input;(null===(t=null==c?void 0:c.res)||void 0===t?void 0:t.elements)&&c.res.elements.wires&&(this.parseWires(c.res.elements.wires),(null===(r=null===(n=c.res)||void 0===n?void 0:n.elements)||void 0===r?void 0:r.splitters)&&this.parseSplitters(null===(a=null===(i=c.res)||void 0===i?void 0:i.elements)||void 0===a?void 0:a.splitters),(null===(s=null===(o=c.res)||void 0===o?void 0:o.connections)||void 0===s?void 0:s.fibers)?this.parseConnections(null===(u=null===(l=c.res)||void 0===l?void 0:l.connections)||void 0===u?void 0:u.fibers):this.getAllTubes().forEach((function(e){e.evaluateExpanded()})))},e.prototype.calculate=function(){this.getAllFibers().forEach((function(e){e.calculateSize()})),this.getAllTubes().forEach((function(e){e.calculateSize()})),this.getAllWires().forEach((function(e){e.calculateSize()})),this.getAllWires().forEach((function(e){e.calculatePosition()})),this.getAllTubes().forEach((function(e){e.calculatePosition()})),this.getAllFibers().forEach((function(e){"TUBE"===e.parentType&&e.calculatePosition()})),this.splitters.forEach((function(e){e.calculateSize()})),this.tubeConnections.forEach((function(e){e.calculate()})),this.fiberConnections.forEach((function(e){!e.someFiberIsFromSplitter()&&e.isVisible()&&e.calculate()})),this.splitters.forEach((function(e){e.calculatePosition()})),this.getAllFibers().forEach((function(e){"SPLITTER"===e.parentType&&e.calculatePosition()})),this.fiberConnections.forEach((function(e){e.someFiberIsFromSplitter()&&e.calculate()}));var e=this.pathController.tubeFusionColumnController.indexController.getHeight();this.size.height=Math.max(this.getWiresHeight(),e)+this.getSplittersHeight(),this.recalculateWidth()},e.prototype.parseWires=function(e){var t=this;e.forEach((function(e){return t.addWire({wireData:e})}))},e.prototype.parseSplitters=function(e){var t=this;e.forEach((function(e){return t.splitters.push(new nn({data:e,parentGrid:t,index:e.index||t.splitters.length}))})),this.splitters=this.splitters.sort((function(e,t){return e.index-t.index}))},e.prototype.parseConnections=function(e){var t=this;e.forEach((function(e){return t.fiberConnections.push(new An({data:e,parentGrid:t}))})),this.getAllTubes().forEach((function(e){e.evaluateExpanded()})),this.getConnectedO2OTubes().forEach((function(e){t.tubeConnections.push(new Mn({data:e,parentGrid:t}))}))},e.prototype.getConnectedO2OTubes=function(){var e=[];return this.getAllTubes().forEach((function(t){if(!t.expanded&&!e.find((function(e){return e.tube_in===t.id||e.tube_out===t.id}))){var n=t.getTubeConnectedTo();n&&e.push({tube_in:t.id,tube_out:n.id})}})),e},e.prototype.addWire=function(e){var t=e.wireData,n="LEFT"===t.disposition?this.leftWires:this.rightWires;n.push(new Ln({data:t,parentGrid:this,index:n.length}))},e.prototype.addSplitter=function(e){var t=e.splitterData;this.splitters.push(new nn({data:t,parentGrid:this,index:this.splitters.length})),this.dataHasChanged()},e.prototype.addFiberConnection=function(e){this.fiberConnections.push(new An({data:e,parentGrid:this})),this.dataHasChanged()},e.prototype.removeFiberConnection=function(e){this.fiberConnections=this.fiberConnections.filter((function(t){return t.fiber_in!==e.fiber_in&&t.fiber_out!==e.fiber_out})),this.dataHasChanged()},e.prototype.addTubeConnection=function(e){this.tubeConnections.push(new Mn({data:e,parentGrid:this})),this.dataHasChanged()},e.prototype.removeTubeConnection=function(e){this.tubeConnections=this.tubeConnections.filter((function(t){return t.tube_in!==e.tube_in&&t.tube_out!==e.tube_out})),this.dataHasChanged()},e.prototype.onTubeExpand=function(e){this.setTubeExpanded({tube:e,expanded:!0})},e.prototype.onTubeCollapse=function(e){this.setTubeExpanded({tube:e,expanded:!1})},e.prototype.setTubeExpanded=function(e){var t=e.tube,n=e.expanded,r=this.getTubeConnectionWithId(t.id);if(t.expanded=n,r&&n){var i=r.getOtherTubeId(t.id);(a=this.getTubeById(i)).expanded=n,r.remove()}else if(!n){var a;(a=t.getTubeConnectedTo()).expanded=n,this.addTubeConnection({tube_in:t.id,tube_out:a.id})}},e.prototype.getAllWires=function(){return i(i([],this.leftWires,!0),this.rightWires,!0)},e.prototype.getAllTubes=function(){var e=this.getAllWires(),t=[];return e.forEach((function(e){t=i(i([],t,!0),e.tubes,!0)})),t},e.prototype.getAllFibers=function(){var e=this.getAllTubes(),t=[];return e.forEach((function(e){t=i(i([],t,!0),e.fibers,!0)})),this.splitters.forEach((function(e){t=i(i(i([],t,!0),e.fibers_in,!0),e.fibers_out,!0)})),t},e.prototype.getFiberById=function(e){var t=this.getAllFibers().find((function(t){return t.id===e}));if(!t)throw new Error("Fiber not found: ".concat(e));return t},e.prototype.getTubeById=function(e){var t=this.getAllTubes().find((function(t){return t.id===e}));if(!t)throw new Error("Tube not found: ".concat(e));return t},e.prototype.getFiberConnectionWithId=function(e){return this.fiberConnections.find((function(t){return t.fiberIdBelongsToConnection(e)}))},e.prototype.getTubeConnectionWithId=function(e){return this.tubeConnections.find((function(t){return t.tubeIdBelongsToConnection(e)}))},e.prototype.getWiresHeight=function(){var e=this.leftWires.reduce((function(e,t){return e+t.attr.size.height+Vt.wireSeparation}),0),t=this.rightWires.reduce((function(e,t){return e+t.attr.size.height+Vt.wireSeparation}),0);return Math.max(e,t)},e.prototype.getSplittersHeight=function(){return this.splitters.reduce((function(e,t){return e+t.getHeight()}),0)},e.prototype.getSplittersMaxHposition=function(){var e=this.splitters.sort((function(e,t){var n=e.attr.position.x+e.attr.size.width;return t.attr.position.x+t.attr.size.width-n}));return e[0].attr.position.x+e[0].attr.size.width},e.prototype.recalculateWidth=function(){var e=!1,t=0;this.splitters&&this.splitters.length>0&&(t=this.getSplittersMaxHposition()-this.rightSideWidth);var n=this.pathController.leftAngleRowController.indexController.getWidth(),r=Math.max(this.pathController.rightAngleRowController.indexController.getWidth(),t),i=Vt.baseUnits.fiber.width+Vt.baseUnits.tube.width+Vt.baseUnits.wire.width;n>=this.leftSideWidth-i&&(e=!0,this.leftSideWidth=n+Vt.separationWireToAngle),r>=this.rightSideWidth-i&&(e=!0,this.rightSideWidth=r+Vt.separationWireToAngle),e&&(this.size.width=this.leftSideWidth+this.rightSideWidth,this.pathController=new Un({middlePoint:this.leftSideWidth}),this.calculate())},e.prototype.getJson=function(){var e={res:{id:this.id,name:this.name,elements:{wires:this.leftWires.concat(this.rightWires).map((function(e){return e.getJson()})),splitters:this.splitters.map((function(e){return e.getJson()})).sort((function(e,t){return e.index-t.index}))},connections:{fibers:i([],this.fiberConnections.map((function(e){return e.getJson()})),!0)},rightSideWidth:this.rightSideWidth,leftSideWidth:this.leftSideWidth}};return e},e.prototype.dataHasChanged=function(){this.onChange(this)},e}(),Wn={size:{width:0,height:0},position:{x:0,y:0}},Gn=function(e){var t=e.connection,i=t.path;if(!i)return null;var a=t.parentGrid.getFiberById(t.fiber_in),o=t.parentGrid.getFiberById(t.fiber_out);if(void 0===a)return console.error("Fiber ".concat(t.fiber_in," not found")),null;if(void 0===o)return console.error("Fiber ".concat(t.fiber_out," not found")),null;var s="TUBE"===a.parentType&&a.parent.expanded,l="TUBE"===o.parentType&&o.parent.expanded;if("TUBE"===a.parentType&&!s||"TUBE"===o.parentType&&!l)return null;var u=i.map((function(e){var t=e.position,n=e.size,i=Xt({position:t,size:n});return r(r({},e),i)})).map((function(e,t){return n.default.createElement(Yt,{key:t,x:e.position.x,y:e.position.y,width:e.size.width,height:e.size.height,fill:e.color})})),c=Vt.baseUnits.fiber.height*Vt.pixelsPerUnit/2;return n.default.createElement(Ht,null,u,n.default.createElement("Circle",{x:t.fusionPoint.x*Vt.pixelsPerUnit,y:t.fusionPoint.y*Vt.pixelsPerUnit+c,radius:c,fill:"#FFFFFF",stroke:"#000000",strokeWidth:2,onClick:function(e){e.target.getStage().container().style.cursor="default",t.remove()},style:{cursor:"pointer"},onMouseEnter:function(e){e.target.getStage().container().style.cursor="pointer"},onMouseLeave:function(e){e.target.getStage().container().style.cursor="default"}}))},Bn=function(e){var t,n,r,i={res:{}};return i.res.connections={fibers:null===(t=e.res.connections)||void 0===t?void 0:t.fibers},i.res.elements={},i.res.elements.wires=null===(n=e.res.elements.wires)||void 0===n?void 0:n.map((function(e){var t;return{id:e.id,name:e.name,disposition:e.position||e.disposition,tubes:null===(t=e.tubes)||void 0===t?void 0:t.map((function(e){var t;return{id:e.id,color:e.color,name:e.name,fibers:null===(t=e.fibers)||void 0===t?void 0:t.map((function(e){return{id:e.id,name:e.name,color:e.color}}))}}))}})),i.res.elements.splitters=null===(r=e.res.elements.splitters)||void 0===r?void 0:r.map((function(e){return{id:e.id,fibers_in:e.fibers_in,fibers_out:e.fibers_out}})),i},jn=function(e){var t=e.connection,i=t.path;if(!i)return null;var a=t.parentGrid.getTubeById(t.tube_in),o=t.parentGrid.getTubeById(t.tube_out);if(void 0===a)return console.error("Tube ".concat(t.tube_in," not found")),null;if(void 0===o)return console.error("Tube ".concat(t.tube_out," not found")),null;var s=a.expanded,l=o.expanded;if(s||l)return null;var u=i.map((function(e){var t=e.position,n=e.size,i=Xt({position:t,size:n});return r(r({},e),i)})).map((function(e,t){return n.default.createElement(Yt,{key:t,x:e.position.x,y:e.position.y,width:e.size.width,height:e.size.height,fill:e.color})})),c=Vt.baseUnits.tube.height*Vt.pixelsPerUnit/2;return n.default.createElement(Ht,null,u,n.default.createElement("Circle",{x:t.fusionPoint.x*Vt.pixelsPerUnit,y:t.fusionPoint.y*Vt.pixelsPerUnit+c,radius:c,fill:"#FFFFFF",stroke:"#000000",strokeWidth:2,onClick:function(e){e.target.getStage().container().style.cursor="default",a.expand()},style:{cursor:"pointer"},onMouseEnter:function(e){e.target.getStage().container().style.cursor="pointer"},onMouseLeave:function(e){e.target.getStage().container().style.cursor="default"}}))},Hn=function(e){var t=e.splitter,r=t.attr,i=function(e){return void 0!==t.parentGrid.getFiberConnectionWithId(e)},a=Xt(r);return n.default.createElement(Ht,null,n.default.createElement(Yt,{x:a.position.x+Vt.baseUnits.fiber.width*Vt.pixelsPerUnit,y:a.position.y,width:Vt.splitterWidth*Vt.pixelsPerUnit,height:a.size.height,fill:"#d0d0d0",stroke:"#555555",strokeWidth:4}),t.fibers_in.map((function(e,t){var r=Xt(e.attr);return n.default.createElement(Ht,{key:t},n.default.createElement(Yt,{x:r.position.x,y:r.position.y,width:r.size.width,height:r.size.height,fill:"#555555"}),n.default.createElement("Text",{text:"#".concat(e.id),x:r.position.x,y:r.position.y,width:1.2*r.size.width,height:r.size.height,fontSize:10,padding:r.size.height,fill:"red",strokeWidth:.5,stroke:"#000000"}),!i(e.id)&&n.default.createElement(Jt,{x:r.position.x,y:r.position.y,fiber:e}))})),t.fibers_out.map((function(e,t){var r=Xt(e.attr);return n.default.createElement(Ht,{key:t},n.default.createElement(Yt,{x:r.position.x,y:r.position.y,width:r.size.width,height:r.size.height,fill:"#555555"}),n.default.createElement("Text",{text:"#".concat(e.id),x:r.position.x,y:r.position.y,width:1.2*r.size.width,height:r.size.height,fontSize:10,padding:r.size.height,fill:"red",strokeWidth:.5,stroke:"#000000"}),!i(e.id)&&n.default.createElement(Jt,{x:r.position.x+r.size.width,y:r.position.y,fiber:e}))})))};exports.GridUi=function(t){var r,a,o,s=t.inputJson,l=t.onChange,u=e.useState(),c=u[0],d=u[1],h=e.useState(),f=h[0],p=h[1],g=e.useCallback((function(e){JSON.stringify(e.getJson())!==JSON.stringify(f)&&(p(e.getJson()),l(JSON.stringify(Bn(e.getJson()))))}),[c,f]);if(e.useEffect((function(){var e=Bn(JSON.parse(s));d(new On({input:e,onChange:g}))}),[s]),e.useEffect((function(){f&&d(new On({input:f,onChange:g}))}),[f]),!c)return null;var m=c.leftWires.map((function(e,t){return n.default.createElement(tn,{key:t,wire:e})})),v=c.rightWires.map((function(e,t){return n.default.createElement(tn,{key:t,wire:e})}));return n.default.createElement(Qt,{width:c.size.width*Vt.pixelsPerUnit,height:c.size.height*Vt.pixelsPerUnit},n.default.createElement(Kt,null,n.default.createElement("Layer",null,n.default.createElement(Yt,{x:c.leftSideWidth*Vt.pixelsPerUnit,y:0,width:1,height:c.size.height*Vt.pixelsPerUnit,fill:"#cccccc"}),null===(r=c.tubeConnections)||void 0===r?void 0:r.map((function(e,t){return n.default.createElement(jn,{key:t,connection:e})})),null===(a=c.splitters)||void 0===a?void 0:a.map((function(e){return n.default.createElement(Hn,{key:e.id,splitter:e})})),null===(o=c.fiberConnections)||void 0===o?void 0:o.map((function(e,t){return n.default.createElement(Gn,{key:t,connection:e})})),m,v,Object.keys(c.pathController.tubeFusionColumnController.indexController.indexes).map((function(e,t){return n.default.createElement(Yt,{key:t,x:c.leftSideWidth*Vt.pixelsPerUnit,y:parseInt(e)*Vt.pixelsPerUnit,width:1,height:1*Vt.pixelsPerUnit,fill:"#ff0000"})})),i(i([],Object.keys(c.pathController.rightAngleRowController.indexController.indexes),!0),Object.keys(c.pathController.leftAngleRowController.indexController.indexes),!0).map((function(e,t){return n.default.createElement(Yt,{key:t,x:parseInt(e)*Vt.pixelsPerUnit,y:1,width:1*Vt.pixelsPerUnit,height:1,fill:"#ff0000"})})))))};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
